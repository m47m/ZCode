{:highlights [{:id #uuid "63b2b1aa-a728-4818-a146-7e8805f05585", :page 27, :position {:bounding {:x1 429.0018005371094, :y1 763.9500427246094, :x2 429.0127868652344, :y2 777.5500183105469, :width 841, :height 1050.0968921389397}, :rects ({:x1 429.0018005371094, :y1 763.9500427246094, :x2 429.0127868652344, :y2 777.5500183105469, :width 841, :height 1050.0968921389397}), :page 27}, :content {:text nil}, :properties {:color "yellow"}} {:id #uuid "63b2b207-d821-4358-9f2c-1a21abc9405a", :page 27, :position {:bounding {:x1 78.5, :y1 884.6750183105469, :x2 627.8500366210938, :y2 903.7000122070312, :width 841, :height 1050.0968921389397}, :rects ({:x1 613.25, :y1 884.6750183105469, :x2 627.8500366210938, :y2 903.0750122070312, :width 841, :height 1050.0968921389397} {:x1 78.5, :y1 885.3000183105469, :x2 602.855712890625, :y2 903.7000122070312, :width 841, :height 1050.0968921389397}), :page 27}, :content {:text "Web 浏览器只是 ECMAScript 实现可能存在的一种宿主环境（host environment）"}, :properties {:color "yellow"}} {:id #uuid "63b2b220-be98-47f6-a69b-2d5681ef2791", :page 27, :position {:bounding {:x1 107.73750305175781, :y1 841.1250152587891, :x2 364.4878845214844, :y2 859.5250091552734, :width 841, :height 1050.0968921389397}, :rects ({:x1 107.73750305175781, :y1 841.1250152587891, :x2 364.4878845214844, :y2 859.5250091552734, :width 841, :height 1050.0968921389397}), :page 27}, :content {:text "ECMAScript，即 ECMA-262 定义的语言"}, :properties {:color "yellow"}} {:id #uuid "63b2b27d-1381-4bc0-9bb7-3012b6aa3b7f", :page 28, :position {:bounding {:x1 0, :y1 604.8000183105469, :x2 762.6356201171875, :y2 663.2375183105469, :width 841, :height 1050.0968921389397}, :rects ({:x1 0, :y1 604.8000183105469, :x2 0, :y2 627.2000122070312, :width 841, :height 1050.0968921389397} {:x1 705.2723999023438, :y1 623.0625152587891, :x2 762.6356201171875, :y2 641.4625091552734, :width 841, :height 1050.0968921389397} {:x1 108.98750305175781, :y1 644.8375091552734, :x2 665.0403594970703, :y2 663.2375183105469, :width 841, :height 1050.0968921389397}), :page 28}, :content {:text "第 4 版包括强类型变量、新语句和数据结构、真正的类和经典的继承，以及操作数据的新手段。"}, :properties {:color "yellow"}} {:id #uuid "63b2b293-3f7c-4ee4-8905-3342f73d2b4a", :page 28, :position {:bounding {:x1 0, :y1 716.8000183105469, :x2 762.9337768554688, :y2 815.8000183105469, :width 841, :height 1050.0968921389397}, :rects ({:x1 0, :y1 716.8000183105469, :x2 0, :y2 739.2000122070312, :width 841, :height 1050.0968921389397} {:x1 430.8248596191406, :y1 775.5750122070312, :x2 762.9337768554688, :y2 793.9750061035156, :width 841, :height 1050.0968921389397} {:x1 109.0374984741211, :y1 797.4000244140625, :x2 704.9993286132812, :y2 815.8000183105469, :width 841, :height 1050.0968921389397}), :page 28}, :content {:text "原生的解析和序列化 JSON 数据的 JSON 对象、方便继承和高级属性定义的方法，以及新的增强 ECMAScript 引擎解释和执行代码能力的严格模式"}, :properties {:color "yellow"}} {:id #uuid "63b2b2a7-49e4-49a5-9324-1925efcb0a23", :page 28, :position {:bounding {:x1 0, :y1 796.8000183105469, :x2 763.24658203125, :y2 924.7625122070312, :width 841, :height 1050.0968921389397}, :rects ({:x1 0, :y1 796.8000183105469, :x2 0, :y2 819.2000122070312, :width 841, :height 1050.0968921389397} {:x1 444.5, :y1 885.1250305175781, :x2 763.24658203125, :y2 903.5250244140625, :width 841, :height 1050.0968921389397} {:x1 108.98750305175781, :y1 906.3625183105469, :x2 416.2246856689453, :y2 924.7625122070312, :width 841, :height 1050.0968921389397}), :page 28}, :content {:text "ES6 正式支持了类、模块、迭代器、生成器、箭头函数、期约、反射、代理和众多新的数据类型。"}, :properties {:color "yellow"}} {:id #uuid "63b2b2ce-c93e-4bf2-bd73-6f10128c3291", :page 29, :position {:bounding {:x1 0, :y1 12.800003051757812, :x2 734.1940307617188, :y2 182.5500030517578, :width 841, :height 1050.0968921389397}, :rects ({:x1 0, :y1 12.800003051757812, :x2 0, :y2 35.19999694824219, :width 841, :height 1050.0968921389397} {:x1 0, :y1 28.800003051757812, :x2 0, :y2 51.19999694824219, :width 841, :height 1050.0968921389397} {:x1 581.43505859375, :y1 118.53749084472656, :x2 728.9339599609375, :y2 136.93751525878906, :width 841, :height 1050.0968921389397} {:x1 78.48750305175781, :y1 140.9499969482422, :x2 734.1940307617188, :y2 159.34999084472656, :width 841, :height 1050.0968921389397} {:x1 78.48750305175781, :y1 164.15000915527344, :x2 668.4691162109375, :y2 182.5500030517578, :width 841, :height 1050.0968921389397}), :page 29}, :content {:text "增加了异步函数（async/ await）、SharedArrayBuffer 及 Atomics API，以及 Object.values()/Object.entries()/Object. getOwnPropertyDescriptors()和字符串填充方法，另外明确支持对象字面量最后的逗号"}, :properties {:color "yellow"}} {:id #uuid "63b2b2de-2166-4887-a3a6-b6d81dc479b9", :page 29, :position {:bounding {:x1 0, :y1 60.80000305175781, :x2 732.72314453125, :y2 224.12501525878906, :width 841, :height 1050.0968921389397}, :rects ({:x1 0, :y1 60.80000305175781, :x2 0, :y2 83.19999694824219, :width 841, :height 1050.0968921389397} {:x1 586.3289794921875, :y1 183.9499969482422, :x2 732.72314453125, :y2 202.34999084472656, :width 841, :height 1050.0968921389397} {:x1 78.48750305175781, :y1 205.72499084472656, :x2 614.2670288085938, :y2 224.12501525878906, :width 841, :height 1050.0968921389397}), :page 29}, :content {:text "包括异步迭代、剩余和扩展属性、一组新的正则表达式特性、Promise finally()，以及模板字面量修订"}, :properties {:color "yellow"}} {:id #uuid "63b2b3d6-9917-43f7-9ee7-7f8392a46259", :page 31, :position {:bounding {:x1 0, :y1 364.8000030517578, :x2 723.8226318359375, :y2 920.7000122070312, :width 841, :height 1050.0968921389397}, :rects ({:x1 0, :y1 364.8000030517578, :x2 0, :y2 387.1999969482422, :width 841, :height 1050.0968921389397} {:x1 502.56524658203125, :y1 879.8875122070312, :x2 723.8226318359375, :y2 898.2875061035156, :width 841, :height 1050.0968921389397} {:x1 78.4749984741211, :y1 902.3000183105469, :x2 348.87255859375, :y2 920.7000122070312, :width 841, :height 1050.0968921389397}), :page 31}, :content {:text "万维网联盟（W3C，World Wide Web Consortium）开始了制定 DOM 标准的进程"}, :properties {:color "yellow"}} {:id #uuid "63b2b44b-fd8f-48f0-b372-2abcbe6b9554", :page 32, :position {:bounding {:x1 0, :y1 285.70001220703125, :x2 762.8302001953125, :y2 355.20001220703125, :width 841, :height 1050.0968921389397}, :rects ({:x1 167.4796142578125, :y1 285.70001220703125, :x2 762.8302001953125, :y2 304.1000061035156, :width 841, :height 1050.0968921389397} {:x1 109.0250015258789, :y1 307.4750061035156, :x2 425.9125061035156, :y2 325.875, :width 841, :height 1050.0968921389397} {:x1 0, :y1 332.8000183105469, :x2 0, :y2 355.20001220703125, :width 841, :height 1050.0968921389397}), :page 32}, :content {:text "对（DHTML 早就支持的）鼠标和用户界面事件、范围、遍历（迭代 DOM 节点的方法）的支持，而且通过对象接口支持了层叠样式表（CSS）"}, :properties {:color "yellow"}} {:id #uuid "63b2b484-97f7-4a8b-b4c6-6880f7b695e4", :page 32, :position {:bounding {:x1 138.2624969482422, :y1 351.73751068115234, :x2 220.4385986328125, :y2 366.93749237060547, :width 841, :height 1050.0968921389397}, :rects ({:x1 138.2624969482422, :y1 351.73751068115234, :x2 220.4385986328125, :y2 366.93749237060547, :width 841, :height 1050.0968921389397}), :page 32}, :content {:text "DOM Level 2 "}, :properties {:color "yellow"}} {:id #uuid "63b2b4bc-1173-42da-9698-9ae87a9a792e", :page 32, :position {:bounding {:x1 138.27500915527344, :y1 460.6750068664551, :x2 218.9698486328125, :y2 475.87500762939453, :width 841, :height 1050.0968921389397}, :rects ({:x1 138.27500915527344, :y1 460.6750068664551, :x2 218.9698486328125, :y2 475.87500762939453, :width 841, :height 1050.0968921389397}), :page 32}, :content {:text "DOM Level 3 "}, :properties {:color "yellow"}} {:id #uuid "63b2b58a-4c56-4694-9957-a327e17f4a46", :page 35, :position {:bounding {:x1 107.73750305175781, :y1 161.2375030517578, :x2 390.9926452636719, :y2 176.43751525878906, :width 841, :height 1050.0968921389397}, :rects ({:x1 107.73750305175781, :y1 161.2375030517578, :x2 390.9926452636719, :y2 176.43751525878906, :width 841, :height 1050.0968921389397}), :page 35}, :content {:text "JavaScript 是一门用来与网页交互的脚本语言"}, :properties {:color "yellow"}} {:id #uuid "63b2b5b6-7baf-469b-8940-ba9e1feeb5c8", :page 36, :position {:bounding {:x1 160.60000610351562, :y1 514.5375137329102, :x2 303.1954040527344, :y2 536.1375122070312, :width 841, :height 1050.0968921389397}, :rects ({:x1 160.60000610351562, :y1 514.5375137329102, :x2 303.1954040527344, :y2 536.1375122070312, :width 841, :height 1050.0968921389397}), :page 36}, :content {:text "<script>元素"}, :properties {:color "yellow"}} {:id #uuid "63b2b632-3923-406f-bc11-55d8bef81d2f", :page 36, :position {:bounding {:x1 0, :y1 444.800012588501, :x2 762.7337036132812, :y2 616.8250122070312, :width 841, :height 1050.0968921389397}, :rects ({:x1 0, :y1 444.800012588501, :x2 0, :y2 467.20001220703125, :width 841, :height 1050.0968921389397} {:x1 637.8875122070312, :y1 578.7125091552734, :x2 762.7337036132812, :y2 597.1125183105469, :width 841, :height 1050.0968921389397} {:x1 109.0250015258789, :y1 598.4250183105469, :x2 195.9462127685547, :y2 616.8250122070312, :width 841, :height 1050.0968921389397}), :page 36}, :content {:text "<script>元素有下列 8 个属性。"}, :properties {:color "yellow"}} {:id #uuid "63b2b807-b7a9-4cee-9ae8-21fa39d50bf7", :page 37, :position {:bounding {:x1 0, :y1 76.80001831054688, :x2 732.232666015625, :y2 245.88754272460938, :width 841, :height 1050.0968921389397}, :rects ({:x1 0, :y1 76.80001831054688, :x2 0, :y2 99.20001220703125, :width 841, :height 1050.0968921389397} {:x1 609.1920776367188, :y1 205.71249389648438, :x2 732.232666015625, :y2 224.11251831054688, :width 841, :height 1050.0968921389397} {:x1 126.4625015258789, :y1 227.48751831054688, :x2 652.5316772460938, :y2 245.88754272460938, :width 841, :height 1050.0968921389397}), :page 37}, :content {:text "值是 module，则代码会被当成 ES6 模块，而且只有这时候代码中才能出现 import 和 export 关键字"}, :properties {:color "yellow"}} {:id #uuid "63b2b848-1988-4c32-898c-f89dcc2d7705", :page 37, :position {:bounding {:x1 375.8233337402344, :y1 249.26251220703125, :x2 559.9981079101562, :y2 267.6625061035156, :width 841, :height 1050.0968921389397}, :rects ({:x1 375.8233337402344, :y1 249.26251220703125, :x2 559.9981079101562, :y2 267.6625061035156, :width 841, :height 1050.0968921389397}), :page 37}, :content {:text "在网页中嵌入 JavaScript 代码"}, :properties {:color "yellow"}} {:id #uuid "63b2b852-0d55-451f-90c1-664c6c8d3b89", :page 37, :position {:bounding {:x1 0, :y1 108.80000305175781, :x2 732.5713500976562, :y2 289.4375, :width 841, :height 1050.0968921389397}, :rects ({:x1 0, :y1 108.80000305175781, :x2 0, :y2 131.1999969482422, :width 841, :height 1050.0968921389397} {:x1 644.7357788085938, :y1 249.26251220703125, :x2 732.5713500976562, :y2 267.6625061035156, :width 841, :height 1050.0968921389397} {:x1 78.48750305175781, :y1 271.0375061035156, :x2 204.38560485839844, :y2 289.4375, :width 841, :height 1050.0968921389397}), :page 37}, :content {:text "在网页中包含外部 JavaScript 文件"}, :properties {:color "yellow"}} {:id #uuid "63b2b882-4075-4556-8e7e-c0b775e7fce4", :page 37, :position {:bounding {:x1 0, :y1 252.79999923706055, :x2 732.868896484375, :y2 461.74999618530273, :width 841, :height 1050.0968921389397}, :rects ({:x1 0, :y1 252.79999923706055, :x2 0, :y2 275.200008392334, :width 841, :height 1050.0968921389397} {:x1 299.02520751953125, :y1 421.575008392334, :x2 732.868896484375, :y2 439.97500228881836, :width 841, :height 1050.0968921389397} {:x1 78.5, :y1 443.35000228881836, :x2 224.72830200195312, :y2 461.74999618530273, :width 841, :height 1050.0968921389397}), :page 37}, :content {:text "在<script>元素中的代码被计算完成之前，页面的其余内容不会被加载，也不会被显示。"}, :properties {:color "yellow"}} {:id #uuid "63b2b945-51a9-4d19-83ea-b59de7a0419e", :page 38, :position {:bounding {:x1 0, :y1 556.8000183105469, :x2 762.79443359375, :y2 618.5750122070312, :width 841, :height 1050.0968921389397}, :rects ({:x1 0, :y1 556.8000183105469, :x2 0, :y2 579.2000122070312, :width 841, :height 1050.0968921389397} {:x1 338.4849548339844, :y1 578.4000244140625, :x2 762.79443359375, :y2 596.8000183105469, :width 841, :height 1050.0968921389397} {:x1 109.0374984741211, :y1 600.1750183105469, :x2 240.72997283935547, :y2 618.5750122070312, :width 841, :height 1050.0968921389397}), :page 38}, :content {:text "第二个<script>元素的代码必须在第一个<script>元素的代码解释完毕才能开始解释"}, :properties {:color "yellow"}} {:id #uuid "63b2baa2-90fc-4cc9-a5ce-fd06e5e8b8a8", :page 40, :position {:bounding {:x1 0, :y1 400.2749938964844, :x2 762.9659423828125, :y2 515.1999969482422, :width 841, :height 1050.0968921389397}, :rects ({:x1 138.27500915527344, :y1 400.2749938964844, :x2 762.9659423828125, :y2 418.6750030517578, :width 841, :height 1050.0968921389397} {:x1 109.01250457763672, :y1 422.0500030517578, :x2 168.32171630859375, :y2 440.4499969482422, :width 841, :height 1050.0968921389397} {:x1 0, :y1 492.8000030517578, :x2 0, :y2 515.1999969482422, :width 841, :height 1050.0968921389397}), :page 40}, :content {:text "异步脚本保证会在页面的 load 事件前执行，但可能会在 DOMContentLoaded（参见第 17 章）之前或之后"}, :properties {:color "yellow"}} {:id #uuid "63b2bce3-96e7-428a-88d8-e466c155377e", :page 41, :position {:bounding {:x1 0, :y1 572.8000030517578, :x2 732.2748413085938, :y2 788.0375061035156, :width 841, :height 1050.0968921389397}, :rects ({:x1 0, :y1 572.8000030517578, :x2 0, :y2 595.1999969482422, :width 841, :height 1050.0968921389397} {:x1 637.4375, :y1 748.3999938964844, :x2 732.2748413085938, :y2 763.6000061035156, :width 841, :height 1050.0968921389397} {:x1 78.5, :y1 769.6375122070312, :x2 456.87066650390625, :y2 788.0375061035156, :width 841, :height 1050.0968921389397}), :page 41}, :content {:text "CDATA 块表示文档中可以包含任意文本的区块，其内容不作为标签来解析"}, :properties {:color "yellow"}} {:id #uuid "63b2be3b-1da2-4deb-9e8d-caa480fc8785", :page 43, :position {:bounding {:x1 129.96250915527344, :y1 119.72499084472656, :x2 323.8534240722656, :y2 141.3249969482422, :width 841, :height 1050.0968921389397}, :rects ({:x1 129.96250915527344, :y1 119.72499084472656, :x2 323.8534240722656, :y2 141.3249969482422, :width 841, :height 1050.0968921389397}), :page 43}, :content {:text "行内代码与外部文件"}, :properties {:color "yellow"}} {:id #uuid "63b2beaf-d402-4c5d-af7d-b81224b2baa6", :page 43, :position {:bounding {:x1 129.96250915527344, :y1 780.9625244140625, :x2 216.15188598632812, :y2 802.5625, :width 841, :height 1050.0968921389397}, :rects ({:x1 129.96250915527344, :y1 780.9625244140625, :x2 216.15188598632812, :y2 802.5625, :width 841, :height 1050.0968921389397}), :page 43}, :content {:text "文档模式"}, :properties {:color "yellow"}} {:id #uuid "63b2bfb2-2199-4581-89bd-f3576abbcc2e", :page 44, :position {:bounding {:x1 160.60000610351562, :y1 735.8500366210938, :x2 328.1879577636719, :y2 757.4500427246094, :width 841, :height 1050.0968921389397}, :rects ({:x1 160.60000610351562, :y1 735.8500366210938, :x2 328.1879577636719, :y2 757.4500427246094, :width 841, :height 1050.0968921389397}), :page 44}, :content {:text "<noscript>元素"}, :properties {:color "yellow"}} {:id #uuid "63b2c01d-5344-40be-8f93-efdd431c2850", :page 45, :position {:bounding {:x1 129.96250915527344, :y1 380.4125061035156, :x2 173.02040100097656, :y2 402.01251220703125, :width 841, :height 1050.0968921389397}, :rects ({:x1 129.96250915527344, :y1 380.4125061035156, :x2 173.02040100097656, :y2 402.01251220703125, :width 841, :height 1050.0968921389397}), :page 45}, :content {:text "小结"}, :properties {:color "yellow"}} {:id #uuid "63b2c02e-5e10-4c6e-bbcc-09781f20d1c8", :page 46, :position {:bounding {:x1 140.52171325683594, :y1 556.4750061035156, :x2 203.5579071044922, :y2 583.6750183105469, :width 841, :height 1050.0968921389397}, :rects ({:x1 140.52171325683594, :y1 556.4750061035156, :x2 140.52474975585938, :y2 583.6750183105469, :width 841, :height 1050.0968921389397} {:x1 160.5, :y1 557.4375305175781, :x2 203.5579071044922, :y2 579.0375061035156, :width 841, :height 1050.0968921389397}), :page 46}, :content {:text "语法"}, :properties {:color "yellow"}} {:id #uuid "63b2c143-f380-449a-9d14-1d0111652505", :page 46, :position {:bounding {:x1 157, :y1 829.6875305175781, :x2 523.0875244140625, :y2 848.0875244140625, :width 841, :height 1050.0968921389397}, :rects ({:x1 157, :y1 829.6875305175781, :x2 523.0875244140625, :y2 848.0875244140625, :width 841, :height 1050.0968921389397}), :page 46}, :content {:text "第一个字符必须是一个字母、下划线（_）或美元符号（$"}, :properties {:color "yellow"}} {:id #uuid "63b2c14b-cdcd-4d85-8bfc-25c5c35f5344", :page 46, :position {:bounding {:x1 157, :y1 851.5500183105469, :x2 522.8335571289062, :y2 869.9500122070312, :width 841, :height 1050.0968921389397}, :rects ({:x1 157, :y1 851.5500183105469, :x2 522.8335571289062, :y2 869.9500122070312, :width 841, :height 1050.0968921389397}), :page 46}, :content {:text "剩下的其他字符可以是字母、下划线、美元符号或数字。"}, :properties {:color "yellow"}} {:id #uuid "63b2c159-be86-44a0-81fa-3335a79dad4c", :page 46, :position {:bounding {:x1 211.39854431152344, :y1 873.3250122070312, :x2 748.1620483398438, :y2 891.7250213623047, :width 841, :height 1050.0968921389397}, :rects ({:x1 211.39854431152344, :y1 873.3250122070312, :x2 748.1620483398438, :y2 891.7250213623047, :width 841, :height 1050.0968921389397}), :page 46}, :content {:text "字母可以是扩展 ASCII（Extended ASCII）中的字母，也可以是 Unicode 的字母字符"}, :properties {:color "yellow"}} {:id #uuid "63b2c224-ee25-4295-924d-681baeab0bfc", :page 48, :position {:bounding {:x1 160.4875030517578, :y1 440.8375244140625, :x2 311.3416442871094, :y2 462.43751525878906, :width 841, :height 1050.0968921389397}, :rects ({:x1 160.4875030517578, :y1 440.8375244140625, :x2 311.3416442871094, :y2 462.43751525878906, :width 841, :height 1050.0968921389397}), :page 48}, :content {:text "关键字与保留字"}, :properties {:color "yellow"}} {:id #uuid "63b2c2af-586d-48d9-b557-ea2945eeb0df", :page 49, :position {:bounding {:x1 129.96250915527344, :y1 178.48750019073486, :x2 173.02040100097656, :y2 200.0875062942505, :width 841, :height 1050.0968921389397}, :rects ({:x1 129.96250915527344, :y1 178.48750019073486, :x2 173.02040100097656, :y2 200.0875062942505, :width 841, :height 1050.0968921389397}), :page 49}, :content {:text "变量"}, :properties {:color "yellow"}} {:id #uuid "63b2c6b3-a8e4-43ef-955c-47b90da7a251", :page 49, :position {:bounding {:x1 0, :y1 156.80000972747803, :x2 732.5436401367188, :y2 423.75001525878906, :width 841, :height 1050.0968921389397}, :rects ({:x1 0, :y1 156.80000972747803, :x2 0, :y2 179.20000743865967, :width 841, :height 1050.0968921389397} {:x1 587.8324584960938, :y1 383.57501220703125, :x2 732.5436401367188, :y2 401.9750213623047, :width 841, :height 1050.0968921389397} {:x1 78.48750305175781, :y1 405.3500213623047, :x2 294.18719482421875, :y2 423.75001525878906, :width 841, :height 1050.0968921389397}), :page 49}, :content {:text "不初始化的情况下，变量会保存一个特殊值 undefined"}, :properties {:color "yellow"}} {:id #uuid "63b2c71d-72b8-4d0d-9bed-480fb3a1298b", :page 49, :position {:bounding {:x1 107.73750305175781, :y1 908.2875366210938, :x2 477.5182800292969, :y2 926.6875305175781, :width 841, :height 1050.0968921389397}, :rects ({:x1 107.73750305175781, :y1 908.2875366210938, :x2 477.5182800292969, :y2 926.6875305175781, :width 841, :height 1050.0968921389397}), :page 49}, :content {:text "去掉之前的 var 操作符之后，message 就变成了全局变量"}, :properties {:color "yellow"}} {:id #uuid "63b2c780-7808-4dca-b890-89f48372508d", :page 50, :position {:bounding {:x1 195.6317901611328, :y1 169.73749542236328, :x2 715.60400390625, :y2 188.13751983642578, :width 841, :height 1050.0968921389397}, :rects ({:x1 195.6317901611328, :y1 169.73749542236328, :x2 715.60400390625, :y2 188.13751983642578, :width 841, :height 1050.0968921389397}), :page 50}, :content {:text "在严格模式下，如果像这样给未声明的变量赋值，则会导致抛出 ReferenceError"}, :properties {:color "yellow"}} {:id #uuid "63b2ca8d-2353-42a7-bc7c-37a67271640d", :page 51, :position {:bounding {:x1 123.9749984741211, :y1 730.6000061035156, :x2 190.55453491210938, :y2 745.8000183105469, :width 841, :height 1050.0968921389397}, :rects ({:x1 123.9749984741211, :y1 730.6000061035156, :x2 190.55453491210938, :y2 745.8000183105469, :width 841, :height 1050.0968921389397}), :page 51}, :content {:text "暂时性死区"}, :properties {:color "yellow"}} {:id #uuid "63b2caeb-3bf4-449b-9dc1-d86bf9e74a59", :page 51, :position {:bounding {:x1 238.61123657226562, :y1 907.2749938964844, :x2 696.4000244140625, :y2 925.6750183105469, :width 841, :height 1050.0968921389397}, :rects ({:x1 238.61123657226562, :y1 907.2749938964844, :x2 696.4000244140625, :y2 925.6750183105469, :width 841, :height 1050.0968921389397}), :page 51}, :content {:text "在 let 声明之前的执行瞬间被称为“暂时性死区”（temporal dead zone）"}, :properties {:color "yellow"}} {:id #uuid "63b2cb48-0aa3-4639-9713-5c741bdbefb8", :page 52, :position {:bounding {:x1 154.5124969482422, :y1 118.71250915527344, :x2 207.7122802734375, :y2 133.91250610351562, :width 841, :height 1050.0968921389397}, :rects ({:x1 154.5124969482422, :y1 118.71250915527344, :x2 207.7122802734375, :y2 133.91250610351562, :width 841, :height 1050.0968921389397}), :page 52}, :content {:text "全局声明"}, :properties {:color "yellow"}} {:id #uuid "63b2cb56-8354-47b0-8489-541496027a2d", :page 52, :position {:bounding {:x1 274.7039489746094, :y1 137.5500030517578, :x2 703.6995849609375, :y2 155.95001220703125, :width 841, :height 1050.0968921389397}, :rects ({:x1 274.7039489746094, :y1 137.5500030517578, :x2 703.6995849609375, :y2 155.95001220703125, :width 841, :height 1050.0968921389397}), :page 52}, :content {:text "使用 let 在全局作用域中声明的变量不会成为 window 对象的属性"}, :properties {:color "yellow"}} {:id #uuid "63b2cba1-1a8f-4b1d-91d4-500e2e1b8ca6", :page 52, :position {:bounding {:x1 154.5124969482422, :y1 316.0375061035156, :x2 207.7122802734375, :y2 331.2375183105469, :width 841, :height 1050.0968921389397}, :rects ({:x1 154.5124969482422, :y1 316.0375061035156, :x2 207.7122802734375, :y2 331.2375183105469, :width 841, :height 1050.0968921389397}), :page 52}, :content {:text "条件声明"}, :properties {:color "yellow"}} {:id #uuid "63b2cbf9-c5a8-49ff-b3ab-65f72bda1b55", :page 52, :position {:bounding {:x1 0, :y1 356.63750648498535, :x2 762.9606323242188, :y2 435.20000648498535, :width 841, :height 1050.0968921389397}, :rects ({:x1 240.375, :y1 356.63750648498535, :x2 762.9606323242188, :y2 375.0375003814697, :width 841, :height 1050.0968921389397} {:x1 109.0374984741211, :y1 378.4125003814697, :x2 372.4310836791992, :y2 396.8124942779541, :width 841, :height 1050.0968921389397} {:x1 0, :y1 412.800012588501, :x2 0, :y2 435.20000648498535, :width 841, :height 1050.0968921389397}), :page 52}, :content {:text " let 的作用域是块，所以不可能检查前面是否已经使用 let 声明过同名变量，同时也就不可能在没有声明的情况下声明它"}, :properties {:color "yellow"}} {:id #uuid "63b2cc82-b07e-45c4-bddd-e57dc456e8fa", :page 53, :position {:bounding {:x1 136.97940063476562, :y1 661.0500183105469, :x2 718.2348022460938, :y2 679.4500427246094, :width 841, :height 1050.0968921389397}, :rects ({:x1 136.97940063476562, :y1 661.0500183105469, :x2 718.2348022460938, :y2 679.4500427246094, :width 841, :height 1050.0968921389397}), :page 53}, :content {:text "使用 let 声明迭代变量时，JavaScript 引擎在后台会为每个迭代循环声明一个新的迭代变量"}, :properties {:color "yellow"}} {:id #uuid "63b2ce0b-773e-47c9-9a8d-06723ccd57f5", :page 55, :position {:bounding {:x1 129.96250915527344, :y1 178.4875030517578, :x2 216.15188598632812, :y2 200.08750915527344, :width 841, :height 1050.0968921389397}, :rects ({:x1 129.96250915527344, :y1 178.4875030517578, :x2 216.15188598632812, :y2 200.08750915527344, :width 841, :height 1050.0968921389397}), :page 55}, :content {:text "数据类型"}, :properties {:color "yellow"}} {:id #uuid "63b2d02b-ee53-4807-908d-42401e383cc3", :page 56, :position {:bounding {:x1 182.0784149169922, :y1 348.8000183105469, :x2 513.2628784179688, :y2 367.2000198364258, :width 841, :height 1050.0968921389397}, :rects ({:x1 182.0784149169922, :y1 348.8000183105469, :x2 513.2628784179688, :y2 367.2000198364258, :width 841, :height 1050.0968921389397}), :page 56}, :content {:text "包含 undefined 值的变量跟未定义变量是有区别的"}, :properties {:color "yellow"}} {:id #uuid "63b2d116-477f-467a-98c9-73c1f5b063b9", :page 57, :position {:bounding {:x1 106.17500305175781, :y1 567.7375030517578, :x2 644.8668823242188, :y2 586.1375274658203, :width 841, :height 1050.0968921389397}, :rects ({:x1 106.17500305175781, :y1 567.7375030517578, :x2 644.8668823242188, :y2 586.1375274658203, :width 841, :height 1050.0968921389397}), :page 57}, :content {:text "undefined 值是由 null 值派生而来的，因此 ECMA-262 将它们定义为表面上相等"}, :properties {:color "yellow"}} {:id #uuid "63b2d164-21ec-463d-b49b-016d43a404de", :page 58, :position {:bounding {:x1 0, :y1 422.13749980926514, :x2 763.5425415039062, :y2 467.19999980926514, :width 841, :height 1050.0968921389397}, :rects ({:x1 704.9972534179688, :y1 422.13749980926514, :x2 763.5425415039062, :y2 440.5374937057495, :width 841, :height 1050.0968921389397} {:x1 109.05000305175781, :y1 444.000018119812, :x2 523.4163208007812, :y2 462.4000120162964, :width 841, :height 1050.0968921389397} {:x1 0, :y1 444.80000591278076, :x2 0, :y2 467.19999980926514, :width 841, :height 1050.0968921389397}), :page 58}, :content {:text "将一个其他类型的值转换为布尔值，可以调用特定的 Boolean()转型函数"}, :properties {:color "yellow"}} {:id #uuid "63b2d236-e39f-4878-ba54-b165e432fc5d", :page 59, :position {:bounding {:x1 136.989501953125, :y1 622.3125305175781, :x2 444.27960205078125, :y2 640.7125244140625, :width 841, :height 1050.0968921389397}, :rects ({:x1 136.989501953125, :y1 622.3125305175781, :x2 444.27960205078125, :y2 640.7125244140625, :width 841, :height 1050.0968921389397}), :page 59}, :content {:text "存储浮点值使用的内存空间是存储整数值的两倍"}, :properties {:color "yellow"}} {:id #uuid "63b2d240-d46f-4644-9efc-382194f42961", :page 59, :position {:bounding {:x1 122.14666748046875, :y1 644.0875244140625, :x2 456.8791198730469, :y2 662.4875183105469, :width 841, :height 1050.0968921389397}, :rects ({:x1 122.14666748046875, :y1 644.0875244140625, :x2 456.8791198730469, :y2 662.4875183105469, :width 841, :height 1050.0968921389397}), :page 59}, :content {:text "在小数点后面没有数字的情况下，数值就会变成整数"}, :properties {:color "yellow"}} {:id #uuid "63b2d2a8-dd78-4795-adef-a467920361f3", :page 59, :position {:bounding {:x1 203.10000610351562, :y1 886.3375244140625, :x2 732.562255859375, :y2 904.7375183105469, :width 841, :height 1050.0968921389397}, :rects ({:x1 203.10000610351562, :y1 886.3375244140625, :x2 732.562255859375, :y2 904.7375183105469, :width 841, :height 1050.0968921389397}), :page 59}, :content {:text "默认情况下，ECMAScript 会将小数点后至少包含 6 个零的浮点值转换为科学记数法"}, :properties {:color "yellow"}} {:id #uuid "63b2d380-b580-4176-b70b-81ad8a00b250", :page 60, :position {:bounding {:x1 0, :y1 454.87501525878906, :x2 763.0834350585938, :y2 516.8250274658203, :width 841, :height 1050.0968921389397}, :rects ({:x1 632.1359252929688, :y1 454.87501525878906, :x2 763.0834350585938, :y2 473.27500915527344, :width 841, :height 1050.0968921389397} {:x1 0, :y1 460.8000030517578, :x2 0, :y2 483.2000274658203, :width 841, :height 1050.0968921389397} {:x1 109.0374984741211, :y1 476.65000915527344, :x2 762.7606201171875, :y2 495.0500030517578, :width 841, :height 1050.0968921389397} {:x1 0, :y1 476.8000030517578, :x2 0, :y2 499.2000274658203, :width 841, :height 1050.0968921389397} {:x1 109.0374984741211, :y1 498.4250030517578, :x2 152.77203369140625, :y2 516.8250274658203, :width 841, :height 1050.0968921389397}), :page 60}, :content {:text "如果某个计算得到的数值结果超出了 JavaScript 可以表示的范围，那么这个数值会被自动转换为一个特殊的 Infinity（无穷）值"}, :properties {:color "yellow"}} {:id #uuid "63b2d39a-d584-45bc-bbbb-542e8b30fbea", :page 60, :position {:bounding {:x1 0, :y1 540.8000030517578, :x2 762.808837890625, :y2 604.0000152587891, :width 841, :height 1050.0968921389397}, :rects ({:x1 0, :y1 540.8000030517578, :x2 0, :y2 563.2000274658203, :width 841, :height 1050.0968921389397} {:x1 401.173583984375, :y1 563.8250274658203, :x2 762.808837890625, :y2 582.2250213623047, :width 841, :height 1050.0968921389397} {:x1 109.0250015258789, :y1 585.6000213623047, :x2 436.804443359375, :y2 604.0000152587891, :width 841, :height 1050.0968921389397}), :page 60}, :content {:text "要确定一个值是不是有限大（即介于 JavaScript 能表示的最小值和最大值之间），可以使用 isFinite()函数"}, :properties {:color "yellow"}} {:id #uuid "63b2d5a3-1649-4e5b-8bc4-145523e4dc59", :page 61, :position {:bounding {:x1 0, :y1 588.7999877929688, :x2 732.1913452148438, :y2 966.0124816894531, :width 841, :height 1050.0968921389397}, :rects ({:x1 0, :y1 588.7999877929688, :x2 0, :y2 611.1999893188477, :width 841, :height 1050.0968921389397} {:x1 121.36250305175781, :y1 924.375, :x2 732.1913452148438, :y2 942.7749938964844, :width 841, :height 1050.0968921389397} {:x1 126.4625015258789, :y1 947.6124877929688, :x2 458.2158203125, :y2 966.0124816894531, :width 841, :height 1050.0968921389397}), :page 61}, :content {:text " 对象，调用 valueOf()方法，并按照上述规则转换返回的值。如果转换结果是 NaN，则调用 toString()方法，再按照转换字符串的规则转换。"}, :properties {:color "yellow"}} {:id #uuid "63b2d5bc-6200-4bab-a417-0f0c59494ebb", :page 62, :position {:bounding {:x1 383.0724792480469, :y1 354.15000915527344, :x2 587.9398803710938, :y2 372.5500030517578, :width 841, :height 1050.0968921389397}, :rects ({:x1 383.0724792480469, :y1 354.15000915527344, :x2 587.9398803710938, :y2 372.5500030517578, :width 841, :height 1050.0968921389397}), :page 62}, :content {:text "专注于字符串是否包含数值模式"}, :properties {:color "yellow"}} {:id #uuid "63b2d6c1-19cc-49fd-bb17-07aca65763c0", :page 62, :position {:bounding {:x1 0, :y1 375.9250030517578, :x2 762.860595703125, :y2 435.1999969482422, :width 841, :height 1050.0968921389397}, :rects ({:x1 358.35382080078125, :y1 375.9250030517578, :x2 762.860595703125, :y2 394.3249969482422, :width 841, :height 1050.0968921389397} {:x1 109.0374984741211, :y1 397.6875, :x2 167.61236572265625, :y2 416.08750915527344, :width 841, :height 1050.0968921389397} {:x1 0, :y1 412.8000030517578, :x2 0, :y2 435.1999969482422, :width 841, :height 1050.0968921389397}), :page 62}, :content {:text "如果第一个字符不是数值字符、加号或减号，parseInt()立即返回 NaN"}, :properties {:color "yellow"}} {:id #uuid "63b2d858-d53a-4a08-a2ca-b840bd80b9c8", :page 65, :position {:bounding {:x1 0, :y1 188.80001831054688, :x2 732.5116577148438, :y2 367.38751220703125, :width 841, :height 1050.0968921389397}, :rects ({:x1 0, :y1 188.80001831054688, :x2 0, :y2 211.20001220703125, :width 841, :height 1050.0968921389397} {:x1 107.73750305175781, :y1 327.2124938964844, :x2 732.5116577148438, :y2 345.6125183105469, :width 841, :height 1050.0968921389397} {:x1 78.48750305175781, :y1 348.9875183105469, :x2 224.77952575683594, :y2 367.38751220703125, :width 841, :height 1050.0968921389397}), :page 65}, :content {:text "如果你不确定一个值是不是 null 或 undefined，可以使用 String()转型函数，它始终会返回表示相应类型值的字符串"}, :properties {:color "yellow"}} {:id #uuid "63b2d8f4-e69e-4943-ba74-0f539beb636e", :page 66, :position {:bounding {:x1 167.36717224121094, :y1 291.875, :x2 400.216552734375, :y2 310.2749938964844, :width 841, :height 1050.0968921389397}, :rects ({:x1 167.36717224121094, :y1 291.875, :x2 400.216552734375, :y2 310.2749938964844, :width 841, :height 1050.0968921389397}), :page 66}, :content {:text "模板字面量会保持反引号内部的空格"}, :properties {:color "yellow"}} {:id #uuid "63b2d922-fdd9-46d5-8692-ca070c5df4c5", :page 66, :position {:bounding {:x1 138.29165649414062, :y1 642.7000122070312, :x2 616.8558959960938, :y2 661.1000061035156, :width 841, :height 1050.0968921389397}, :rects ({:x1 138.29165649414062, :y1 642.7000122070312, :x2 616.8558959960938, :y2 661.1000061035156, :width 841, :height 1050.0968921389397}), :page 66}, :content {:text "技术上讲，模板字面量不是字符串，而是一种特殊的 JavaScript 句法表达式"}, :properties {:color "yellow"}} {:id #uuid "63b2dac7-5456-4a3b-a568-4cbe18d9b5d1", :page 68, :position {:bounding {:x1 0, :y1 696.4750137329102, :x2 763.0165405273438, :y2 739.2000122070312, :width 841, :height 1050.0968921389397}, :rects ({:x1 284.6075744628906, :y1 696.4750137329102, :x2 763.0165405273438, :y2 714.8750152587891, :width 841, :height 1050.0968921389397} {:x1 0, :y1 716.8000183105469, :x2 0, :y2 739.2000122070312, :width 841, :height 1050.0968921389397} {:x1 109.0374984741211, :y1 718.2500152587891, :x2 211.4450225830078, :y2 736.6500091552734, :width 841, :height 1050.0968921389397}), :page 68}, :content {:text "直接获取原始的模板字面量内容（如换行符或 Unicode 字符），而不是被转换后的字符表示"}, :properties {:color "yellow"}} {:id #uuid "63b2db65-ce96-4e92-a064-93f2a78c0db2", :page 69, :position {:bounding {:x1 382.4934997558594, :y1 243.4499969482422, :x2 725.2457275390625, :y2 261.84999084472656, :width 841, :height 1050.0968921389397}, :rects ({:x1 382.4934997558594, :y1 243.4499969482422, :x2 725.2457275390625, :y2 261.84999084472656, :width 841, :height 1050.0968921389397}), :page 69}, :content {:text "即字符串数组的.raw 属性取得每个字符串的原始内容"}, :properties {:color "yellow"}} {:id #uuid "63b2dba6-e1d5-4e16-b16e-506020667547", :page 69, :position {:bounding {:x1 107.76250457763672, :y1 739.1125183105469, :x2 338.6454772949219, :y2 757.5125122070312, :width 841, :height 1050.0968921389397}, :rects ({:x1 107.76250457763672, :y1 739.1125183105469, :x2 338.6454772949219, :y2 757.5125122070312, :width 841, :height 1050.0968921389397}), :page 69}, :content {:text "符号需要使用 Symbol()函数初始化"}, :properties {:color "yellow"}} {:id #uuid "63b2dbc5-4267-4217-9b93-f2286abbf272", :page 69, :position {:bounding {:x1 280.4291687011719, :y1 822.9500122070312, :x2 651.9375, :y2 841.3500213623047, :width 841, :height 1050.0968921389397}, :rects ({:x1 280.4291687011719, :y1 822.9500122070312, :x2 651.9375, :y2 841.3500213623047, :width 841, :height 1050.0968921389397}), :page 69}, :content {:text "可以传入一个字符串参数作为对符号的描述（description）"}, :properties {:color "yellow"}} {:id #uuid "63b2dbfb-4f18-48fe-a535-fdd9adcea9af", :page 70, :position {:bounding {:x1 0, :y1 271.98751068115234, :x2 763.1725463867188, :y2 371.2000045776367, :width 841, :height 1050.0968921389397}, :rects ({:x1 225.72500610351562, :y1 271.98751068115234, :x2 763.1725463867188, :y2 290.3875045776367, :width 841, :height 1050.0968921389397} {:x1 109.0374984741211, :y1 291.7000045776367, :x2 196.41615295410156, :y2 310.0999984741211, :width 841, :height 1050.0968921389397} {:x1 0, :y1 348.80001068115234, :x2 0, :y2 371.2000045776367, :width 841, :height 1050.0968921389397}), :page 70}, :content {:text "Symbol()函数不能与 new 关键字一起作为构造函数使用。这样做是为了避免创建符号包装对象，"}, :properties {:color "yellow"}} {:id #uuid "63b2dc64-6d9d-4cec-997e-26fc9331f535", :page 70, :position {:bounding {:x1 154.5124969482422, :y1 577.375, :x2 274.3716125488281, :y2 592.5750122070312, :width 841, :height 1050.0968921389397}, :rects ({:x1 154.5124969482422, :y1 577.375, :x2 274.3716125488281, :y2 592.5750122070312, :width 841, :height 1050.0968921389397}), :page 70}, :content {:text "使用全局符号注册表"}, :properties {:color "yellow"}} {:id #uuid "63b2dc7f-b846-4f2e-9258-701ff3d23e95", :page 70, :position {:bounding {:x1 280.28509521484375, :y1 702.75, :x2 441.4847106933594, :y2 721.1500244140625, :width 841, :height 1050.0968921389397}, :rects ({:x1 280.28509521484375, :y1 702.75, :x2 441.4847106933594, :y2 721.1500244140625, :width 841, :height 1050.0968921389397}), :page 70}, :content {:text "字符串键都执行幂等操作"}, :properties {:color "yellow"}} {:id #uuid "63b2dc92-fba9-44fe-af62-ddfc416dfb87", :page 70, :position {:bounding {:x1 328.51129150390625, :y1 746.3874969482422, :x2 708.9667358398438, :y2 764.7875061035156, :width 841, :height 1050.0968921389397}, :rects ({:x1 328.51129150390625, :y1 746.3874969482422, :x2 708.9667358398438, :y2 764.7875061035156, :width 841, :height 1050.0968921389397}), :page 70}, :content {:text "发现存在与该字符串对应的符号，然后就会返回该符号实例"}, :properties {:color "yellow"}} {:id #uuid "63b2dca3-cc8a-472e-9930-9e815badfcc1", :page 70, :position {:bounding {:x1 138.27500915527344, :y1 838.6374969482422, :x2 763.6712646484375, :y2 857.0375061035156, :width 841, :height 1050.0968921389397}, :rects ({:x1 138.27500915527344, :y1 838.6374969482422, :x2 763.6712646484375, :y2 857.0375061035156, :width 841, :height 1050.0968921389397}), :page 70}, :content {:text "即使采用相同的符号描述，在全局注册表中定义的符号跟使用 Symbol()定义的符号也并不等同："}, :properties {:color "yellow"}} {:id #uuid "63b2dcb5-a383-4d3e-b0b2-c3e4bfc7a0c0", :page 70, :position {:bounding {:x1 469.58251953125, :y1 930.9750289916992, :x2 762.9124145507812, :y2 949.3750228881836, :width 841, :height 1050.0968921389397}, :rects ({:x1 469.58251953125, :y1 930.9750289916992, :x2 762.9124145507812, :y2 949.3750228881836, :width 841, :height 1050.0968921389397}), :page 70}, :content {:text "作为参数传给 Symbol.for()的任何值都会被"}, :properties {:color "yellow"}} {:id #uuid "63b2dcb7-e0ac-49b2-9cf1-f8ce05cbf2f6", :page 71, :position {:bounding {:x1 78.5, :y1 118.53750610351562, :x2 166.28953552246094, :y2 136.9375, :width 841, :height 1050.0968921389397}, :rects ({:x1 78.5, :y1 118.53750610351562, :x2 166.28953552246094, :y2 136.9375, :width 841, :height 1050.0968921389397}), :page 71}, :content {:text "转换为字符串"}, :properties {:color "yellow"}} {:id #uuid "63b2dd0b-e24e-4223-908b-3519659a88f7", :page 71, :position {:bounding {:x1 119.9000015258789, :y1 393.62499618530273, :x2 230.5341796875, :y2 412.02502059936523, :width 841, :height 1050.0968921389397}, :rects ({:x1 119.9000015258789, :y1 393.62499618530273, :x2 230.5341796875, :y2 412.02502059936523, :width 841, :height 1050.0968921389397}), :page 71}, :content {:text " 使用符号作为属性"}, :properties {:color "yellow"}} {:id #uuid "63b2de45-08d5-44cf-961c-8173f779af1d", :page 71, :position {:bounding {:x1 153.77500915527344, :y1 872.25, :x2 551.9188232421875, :y2 890.6500244140625, :width 841, :height 1050.0968921389397}, :rects ({:x1 153.77500915527344, :y1 872.25, :x2 551.9188232421875, :y2 890.6500244140625, :width 841, :height 1050.0968921389397}), :page 71}, :content {:text "Object.getOwnPropertyNames()返回对象实例的常规属性数组"}, :properties {:color "yellow"}} {:id #uuid "63b2de4f-0594-406c-942b-d22c73908ef3", :page 71, :position {:bounding {:x1 0, :y1 604.8000183105469, :x2 738.4708251953125, :y2 912.5125122070312, :width 841, :height 1050.0968921389397}, :rects ({:x1 0, :y1 604.8000183105469, :x2 0, :y2 627.2000122070312, :width 841, :height 1050.0968921389397} {:x1 563.0750122070312, :y1 872.25, :x2 738.4708251953125, :y2 890.6500244140625, :width 841, :height 1050.0968921389397} {:x1 78.5, :y1 894.1124877929688, :x2 343.40692138671875, :y2 912.5125122070312, :width 841, :height 1050.0968921389397}), :page 71}, :content {:text "Object.getOwnPropertySymbols()返回对象实例的符号属性数组"}, :properties {:color "yellow"}} {:id #uuid "63b2df37-528a-41e6-b5d4-81bb8c11c412", :page 71, :position {:bounding {:x1 0, :y1 636.8000335693359, :x2 732.46240234375, :y2 953.9875411987305, :width 841, :height 1050.0968921389397}, :rects ({:x1 0, :y1 636.8000335693359, :x2 0, :y2 659.2000274658203, :width 841, :height 1050.0968921389397} {:x1 488.82501220703125, :y1 915.8875389099121, :x2 732.46240234375, :y2 934.287540435791, :width 841, :height 1050.0968921389397} {:x1 78.5, :y1 935.5875396728516, :x2 107.71060943603516, :y2 953.9875411987305, :width 841, :height 1050.0968921389397}), :page 71}, :content {:text "Reflect.ownKeys()会返回两种类型的键"}, :properties {:color "yellow"}} {:id #uuid "63b2df6e-5853-49cf-849b-42994aa2362d", :page 72, :position {:bounding {:x1 154.5124969482422, :y1 685.1124877929688, :x2 234.47178649902344, :y2 700.3125, :width 841, :height 1050.0968921389397}, :rects ({:x1 154.5124969482422, :y1 685.1124877929688, :x2 234.47178649902344, :y2 700.3125, :width 841, :height 1050.0968921389397}), :page 72}, :content {:text "常用内置符号"}, :properties {:color "yellow"}} {:id #uuid "63b2dfcc-3e24-4925-a808-24830df6ae31", :page 72, :position {:bounding {:x1 167.54246520996094, :y1 834.6750335693359, :x2 518.7349090576172, :y2 853.0750427246094, :width 841, :height 1050.0968921389397}, :rects ({:x1 167.54246520996094, :y1 834.6750335693359, :x2 518.7349090576172, :y2 853.0750427246094, :width 841, :height 1050.0968921389397}), :page 72}, :content {:text "所有内置符号属性都是不可写、不可枚举、不可配置的"}, :properties {:color "yellow"}} {:id #uuid "63b2dfd3-9011-4aaa-b512-0c5373d2068d", :page 73, :position {:bounding {:x1 123.9749984741211, :y1 120.79998779296875, :x2 295.53768157958984, :y2 134.39999389648438, :width 841, :height 1050.0968921389397}, :rects ({:x1 123.9749984741211, :y1 120.79998779296875, :x2 295.53768157958984, :y2 134.39999389648438, :width 841, :height 1050.0968921389397}), :page 73}, :content {:text "Symbol.asyncIterator"}, :properties {:color "yellow"}} {:id #uuid "63b2e04a-bfc5-4d89-ab2b-906c6875b418", :page 73, :position {:bounding {:x1 0, :y1 204.80001068115234, :x2 732.4568481445312, :y2 417.37500762939453, :width 841, :height 1050.0968921389397}, :rects ({:x1 0, :y1 204.80001068115234, :x2 0, :y2 227.20000457763672, :width 841, :height 1050.0968921389397} {:x1 199.63763427734375, :y1 379.7000198364258, :x2 732.4568481445312, :y2 398.10001373291016, :width 841, :height 1050.0968921389397} {:x1 78.5, :y1 403.53751373291016, :x2 170.0169219970703, :y2 417.37500762939453, :width 841, :height 1050.0968921389397}), :page 73}, :content {:text "由 Symbol.asyncIterator 函数生成的对象应该通过其 next()方法陆续返回 Promise 实例"}, :properties {:color "yellow"}} {:id #uuid "63b2e052-4203-493b-918d-78d0aca430dc", :page 73, :position {:bounding {:x1 184.63160705566406, :y1 401.4625015258789, :x2 691.4408569335938, :y2 419.8624954223633, :width 841, :height 1050.0968921389397}, :rects ({:x1 184.63160705566406, :y1 401.4625015258789, :x2 691.4408569335938, :y2 419.8624954223633, :width 841, :height 1050.0968921389397}), :page 73}, :content {:text "可以通过显式地调用 next()方法返回，也可以隐式地通过异步生成器函数返回"}, :properties {:color "yellow"}} {:id #uuid "63b2e05d-97d4-46a9-92bd-3da8a822843f", :page 73, :position {:bounding {:x1 123.9749984741211, :y1 919.1125335693359, :x2 278.38436126708984, :y2 932.7125396728516, :width 841, :height 1050.0968921389397}, :rects ({:x1 123.9749984741211, :y1 919.1125335693359, :x2 278.38436126708984, :y2 932.7125396728516, :width 841, :height 1050.0968921389397}), :page 73}, :content {:text "Symbol.hasInstance"}, :properties {:color "yellow"}} {:id #uuid "63b2e0f1-04d4-4070-a5f9-4a497a591d66", :page 74, :position {:bounding {:x1 0, :y1 276.37500762939453, :x2 764.7315673828125, :y2 387.2000045776367, :width 841, :height 1050.0968921389397}, :rects ({:x1 682.720703125, :y1 276.37500762939453, :x2 764.7315673828125, :y2 294.7750015258789, :width 841, :height 1050.0968921389397} {:x1 109.0374984741211, :y1 300.31250762939453, :x2 555.7127532958984, :y2 314.1500015258789, :width 841, :height 1050.0968921389397} {:x1 0, :y1 364.80001068115234, :x2 0, :y2 387.2000045776367, :width 841, :height 1050.0968921389397}), :page 74}, :content {:text "以 Symbol. hasInstance 为键的函数会执行同样的操作，只是操作数对调了一下"}, :properties {:color "yellow"}} {:id #uuid "63b2e132-c0f1-4bad-b02e-d740bf26ead5", :page 74, :position {:bounding {:x1 154.5124969482422, :y1 693.7500152587891, :x2 368.9510192871094, :y2 707.3500061035156, :width 841, :height 1050.0968921389397}, :rects ({:x1 154.5124969482422, :y1 693.7500152587891, :x2 368.9510192871094, :y2 707.3500061035156, :width 841, :height 1050.0968921389397}), :page 74}, :content {:text "Symbol.isConcatSpreadable"}, :properties {:color "yellow"}} {:id #uuid "63b2e1b2-385e-4d8c-aaa0-1a9cd9997fec", :page 74, :position {:bounding {:x1 138.27500915527344, :y1 801.1000061035156, :x2 734.3670654296875, :y2 819.5, :width 841, :height 1050.0968921389397}, :rects ({:x1 138.27500915527344, :y1 801.1000061035156, :x2 734.3670654296875, :y2 819.5, :width 841, :height 1050.0968921389397}), :page 74}, :content {:text "数组对象默认情况下会被打平到已有的数组，false 或假值会导致整个对象被追加到数组末尾"}, :properties {:color "yellow"}} {:id #uuid "63b2e1be-0837-46ba-831b-64e18ae16a90", :page 74, :position {:bounding {:x1 0, :y1 796.8000030517578, :x2 763.3717041015625, :y2 841.2624969482422, :width 841, :height 1050.0968921389397}, :rects ({:x1 0, :y1 796.8000030517578, :x2 0, :y2 819.1999969482422, :width 841, :height 1050.0968921389397} {:x1 748.85693359375, :y1 801.0875091552734, :x2 763.3717041015625, :y2 819.4875030517578, :width 841, :height 1050.0968921389397} {:x1 109.0250015258789, :y1 822.8625030517578, :x2 734.096435546875, :y2 841.2624969482422, :width 841, :height 1050.0968921389397}), :page 74}, :content {:text "类数组对象默认情况下会被追加到数组末尾，true 或真值会导致这个类数组对象被打平到数组实例"}, :properties {:color "yellow"}} {:id #uuid "63b2e1d8-dabf-4cee-9f24-52cb3c085e07", :page 75, :position {:bounding {:x1 123.9749984741211, :y1 306.3000030517578, :x2 252.64702606201172, :y2 319.90000915527344, :width 841, :height 1050.0968921389397}, :rects ({:x1 123.9749984741211, :y1 306.3000030517578, :x2 252.64702606201172, :y2 319.90000915527344, :width 841, :height 1050.0968921389397}), :page 75}, :content {:text "Symbol.iterator"}, :properties {:color "yellow"}} {:id #uuid "63b2e278-90d0-43f2-8af2-38243a38b3e6", :page 76, :position {:bounding {:x1 154.5124969482422, :y1 255.01250457763672, :x2 257.4471435546875, :y2 268.61251068115234, :width 841, :height 1050.0968921389397}, :rects ({:x1 154.5124969482422, :y1 255.01250457763672, :x2 257.4471435546875, :y2 268.61251068115234, :width 841, :height 1050.0968921389397}), :page 76}, :content {:text "Symbol.match"}, :properties {:color "yellow"}} {:id #uuid "63b2e291-390a-4201-a6ea-5349d3244fd8", :page 76, :position {:bounding {:x1 209.63931274414062, :y1 297.05001068115234, :x2 485.22882080078125, :y2 315.4500045776367, :width 841, :height 1050.0968921389397}, :rects ({:x1 209.63931274414062, :y1 297.05001068115234, :x2 485.22882080078125, :y2 315.4500045776367, :width 841, :height 1050.0968921389397}), :page 76}, :content {:text "由 String.prototype.match()方法使用"}, :properties {:color "yellow"}} {:id #uuid "63b2e2c1-29f4-4c9a-abb8-02ca7b6f8d33", :page 76, :position {:bounding {:x1 138.27500915527344, :y1 447.5000228881836, :x2 560.7200927734375, :y2 465.89998626708984, :width 841, :height 1050.0968921389397}, :rects ({:x1 138.27500915527344, :y1 447.5000228881836, :x2 560.7200927734375, :y2 465.89998626708984, :width 841, :height 1050.0968921389397}), :page 76}, :content {:text "给这个方法传入非正则表达式值会导致该值被转换为 RegExp 对象"}, :properties {:color "yellow"}} {:id #uuid "63b2e303-fad1-4d25-ba7f-5591e4ab3acf", :page 76, :position {:bounding {:x1 162.625, :y1 860.1625061035156, :x2 282.71295166015625, :y2 873.7625122070312, :width 841, :height 1050.0968921389397}, :rects ({:x1 162.625, :y1 860.1625061035156, :x2 282.71295166015625, :y2 873.7625122070312, :width 841, :height 1050.0968921389397}), :page 76}, :content {:text "Symbol.replace"}, :properties {:color "yellow"}} {:id #uuid "63b2e30c-64e2-4791-a75b-eb1c92f14700", :page 77, :position {:bounding {:x1 132.10000610351562, :y1 612.3000030517578, :x2 243.6186981201172, :y2 625.9000091552734, :width 841, :height 1050.0968921389397}, :rects ({:x1 132.10000610351562, :y1 612.3000030517578, :x2 243.6186981201172, :y2 625.9000091552734, :width 841, :height 1050.0968921389397}), :page 77}, :content {:text "Symbol.search"}, :properties {:color "yellow"}} {:id #uuid "63b2e314-c257-462f-86e2-fd3c1ff6ecc9", :page 78, :position {:bounding {:x1 162.625, :y1 387.84999084472656, :x2 282.71295166015625, :y2 401.4500274658203, :width 841, :height 1050.0968921389397}, :rects ({:x1 162.625, :y1 387.84999084472656, :x2 282.71295166015625, :y2 401.4500274658203, :width 841, :height 1050.0968921389397}), :page 78}, :content {:text "Symbol.species"}, :properties {:color "yellow"}} {:id #uuid "63b2e31c-33fe-4383-9c9c-0e563fed4fd0", :page 78, :position {:bounding {:x1 162.625, :y1 778.1625061035156, :x2 265.5596618652344, :y2 791.7625122070312, :width 841, :height 1050.0968921389397}, :rects ({:x1 162.625, :y1 778.1625061035156, :x2 265.5596618652344, :y2 791.7625122070312, :width 841, :height 1050.0968921389397}), :page 78}, :content {:text "Symbol.split"}, :properties {:color "yellow"}} {:id #uuid "63b2e326-b3f0-4788-8188-c76e467f7669", :page 79, :position {:bounding {:x1 132.10000610351562, :y1 521.5250129699707, :x2 286.5093688964844, :y2 535.1250190734863, :width 841, :height 1050.0968921389397}, :rects ({:x1 132.10000610351562, :y1 521.5250129699707, :x2 286.5093688964844, :y2 535.1250190734863, :width 841, :height 1050.0968921389397}), :page 79}, :content {:text "Symbol.toPrimitive"}, :properties {:color "yellow"}} {:id #uuid "63b2e32d-f7b0-40dd-9feb-656a62b5627e", :page 80, :position {:bounding {:x1 162.625, :y1 204.7375030517578, :x2 317.0343933105469, :y2 218.33750915527344, :width 841.133760511883, :height 1050.3275137111518}, :rects ({:x1 162.625, :y1 204.7375030517578, :x2 317.0343933105469, :y2 218.33750915527344, :width 841.133760511883, :height 1050.3275137111518}), :page 80}, :content {:text "Symbol.toStringTag"}, :properties {:color "yellow"}} {:id #uuid "63b2e33a-5c01-49ca-943d-28de5327e640", :page 80, :position {:bounding {:x1 162.625, :y1 649.1000061035156, :x2 317.0343933105469, :y2 662.7000122070312, :width 841.133760511883, :height 1050.3275137111518}, :rects ({:x1 162.625, :y1 649.1000061035156, :x2 317.0343933105469, :y2 662.7000122070312, :width 841.133760511883, :height 1050.3275137111518}), :page 80}, :content {:text "Symbol.unscopables"}, :properties {:color "yellow"}} {:id #uuid "63b2e41a-3d2c-4482-9200-950b5f94ac6b", :page 81, :position {:bounding {:x1 129.96250915527344, :y1 775.7000122070312, :x2 194.62294006347656, :y2 797.3000183105469, :width 841, :height 1050.0968921389397}, :rects ({:x1 129.96250915527344, :y1 775.7000122070312, :x2 194.62294006347656, :y2 797.3000183105469, :width 841, :height 1050.0968921389397}), :page 81}, :content {:text "操作符"}, :properties {:color "yellow"}} {:id #uuid "63b2e434-f487-4760-9c5e-4ecaff09863a", :page 98, :position {:bounding {:x1 160.5, :y1 543.6000061035156, :x2 203.5579071044922, :y2 565.2000122070312, :width 841, :height 1050.0968921389397}, :rects ({:x1 160.5, :y1 543.6000061035156, :x2 203.5579071044922, :y2 565.2000122070312, :width 841, :height 1050.0968921389397}), :page 98}, :content {:text "语句"}, :properties {:color "yellow"}} {:id #uuid "63b2e447-e5b9-444f-8f5c-d921d3e0620f", :page 105, :position {:bounding {:x1 129.96250915527344, :y1 824.0375061035156, :x2 173.02040100097656, :y2 845.6374969482422, :width 841, :height 1050.0968921389397}, :rects ({:x1 129.96250915527344, :y1 824.0375061035156, :x2 173.02040100097656, :y2 845.6374969482422, :width 841, :height 1050.0968921389397}), :page 105}, :content {:text "函数"}, :properties {:color "yellow"}} {:id #uuid "63b56867-a1cd-41c8-a2a4-ba4bd7a63c5e", :page 81, :position {:bounding {:x1 0, :y1 476.8000030517578, :x2 702.811547845602, :y2 863.5875091552734, :width 806, :height 1006.3948811700183}, :rects ({:x1 0, :y1 476.8000030517578, :x2 0, :y2 499.20001220703125, :width 806, :height 1006.3948811700183} {:x1 0, :y1 492.8000030517578, :x2 0, :y2 515.2000122070312, :width 806, :height 1006.3948811700183} {:x1 243.57500609755516, :y1 804.9250106811523, :x2 702.811547845602, :y2 823.3250198364258, :width 806, :height 1006.3948811700183} {:x1 75.23750457167625, :y1 824.3250122070312, :x2 499.22499999403954, :y2 842.7250213623047, :width 806, :height 1006.3948811700183} {:x1 571.562524408102, :y1 824.3250122070312, :x2 603.897241204977, :y2 842.7250213623047, :width 806, :height 1006.3948811700183} {:x1 687.7375122010708, :y1 824.3250122070312, :x2 701.7375122010708, :y2 842.7250213623047, :width 806, :height 1006.3948811700183} {:x1 499.95000609755516, :y1 826.4000091552734, :x2 573.9488159120083, :y2 839.6625213623047, :width 806, :height 1006.3948811700183} {:x1 608.1624999940395, :y1 826.4000091552734, :x2 690.3738647401333, :y2 839.6625213623047, :width 806, :height 1006.3948811700183} {:x1 75.23750457167625, :y1 845.1875152587891, :x2 229.58574065566063, :y2 863.5875091552734, :width 806, :height 1006.3948811700183}), :page 81}, :content {:text "ECMAScript 中的操作符是独特的，因为它们可用于各种值，包括字符串、数值、布尔值，甚至还有对象。在应用给对象时，操作符通常会调用 valueOf()和/或 toString()方法来取得可以计算的值。"}, :properties {:color "yellow"}} {:id #uuid "63b56880-ea21-4536-81d1-64b24c3bd484", :page 81, :position {:bounding {:x1 116.068254083395, :y1 876.1624984741211, :x2 219.24741515517235, :y2 898.5625, :width 806, :height 1006.3948811700183}, :rects ({:x1 116.068254083395, :y1 876.1624984741211, :x2 116.07176360487938, :y2 898.5625, :width 806, :height 1006.3948811700183} {:x1 132.25000914931297, :y1 877.3875045776367, :x2 219.24741515517235, :y2 894.9875030517578, :width 806, :height 1006.3948811700183}), :page 81}, :content {:text "一元操作符"}, :properties {:color "yellow"}} {:id #uuid "63b5688f-eb0a-402b-8d6c-d2c8489c0952", :page 82, :position {:bounding {:x1 148.08750304579735, :y1 114.53750610351562, :x2 252.09125670790672, :y2 132.9375, :width 806, :height 1006.3948811700183}, :rects ({:x1 148.08750304579735, :y1 114.53750610351562, :x2 252.09125670790672, :y2 132.9375, :width 806, :height 1006.3948811700183}), :page 82}, :content {:text "递增/递减操作符"}, :properties {:color "yellow"}} {:id #uuid "63b5695c-1e36-4518-b9bb-5d43cedd7bee", :page 83, :position {:bounding {:x1 115.32735595107079, :y1 689.4124984741211, :x2 190.90007933974266, :y2 707.8125228881836, :width 806, :height 1006.3948811700183}, :rects ({:x1 115.32735595107079, :y1 689.4124984741211, :x2 190.90007933974266, :y2 707.8125228881836, :width 806, :height 1006.3948811700183}), :page 83}, :content {:text "一元加和减"}, :properties {:color "yellow"}} {:id #uuid "63b56a1d-2843-482b-bd41-8bdca0730fb2", :page 84, :position {:bounding {:x1 161.51250609755516, :y1 751.9375, :x2 231.11042174696922, :y2 769.5375061035156, :width 806, :height 1006.3948811700183}, :rects ({:x1 161.51250609755516, :y1 751.9375, :x2 231.11042174696922, :y2 769.5375061035156, :width 806, :height 1006.3948811700183}), :page 84}, :content {:text "位操作符"}, :properties {:color "yellow"}} {:id #uuid "63b56a37-f75d-4ff2-a0ab-1b4cbf926723", :page 84, :position {:bounding {:x1 0, :y1 784.5875091552734, :x2 733.3699584901333, :y2 899.2000122070312, :width 806, :height 1006.3948811700183}, :rects ({:x1 657.0500122010708, :y1 784.5875091552734, :x2 733.3699584901333, :y2 798.1875, :width 806, :height 1006.3948811700183} {:x1 104.48750457167625, :y1 803.9875030517578, :x2 731.3285156190395, :y2 822.3875122070312, :width 806, :height 1006.3948811700183} {:x1 104.47499999403954, :y1 826.3250122070312, :x2 433.44365844130516, :y2 840.2875061035156, :width 806, :height 1006.3948811700183} {:x1 0, :y1 860.8000183105469, :x2 0, :y2 883.2000122070312, :width 806, :height 1006.3948811700183} {:x1 0, :y1 876.8000183105469, :x2 0, :y2 899.2000122070312, :width 806, :height 1006.3948811700183}), :page 84}, :content {:text "ECMAScript中的所有数值都以 IEEE 754 64 位格式存储，但位操作并不直接应用到 64 位表示，而是先把值转换为32 位整数，再进行位操作，之后再把结果转换为 64 位"}, :properties {:color "yellow"}} {:id #uuid "63b56a43-8c13-41ac-be50-ecc34c72141d", :page 84, :position {:bounding {:x1 132.47499999403954, :y1 866.6000366210938, :x2 396.6040893495083, :y2 885.0000457763672, :width 806, :height 1006.3948811700183}, :rects ({:x1 132.47499999403954, :y1 866.6000366210938, :x2 396.6040893495083, :y2 885.0000457763672, :width 806, :height 1006.3948811700183}), :page 84}, :content {:text "有符号整数使用 32 位的前 31 位表示整数值"}, :properties {:color "yellow"}} {:id #uuid "63b56ada-2d40-4978-ac32-6d46adcd9aed", :page 85, :position {:bounding {:x1 103.52500304579735, :y1 339.48753356933594, :x2 443.5047546327114, :y2 357.8874969482422, :width 806, :height 1006.3948811700183}, :rects ({:x1 103.52500304579735, :y1 339.48753356933594, :x2 443.5047546327114, :y2 357.8874969482422, :width 806, :height 1006.3948811700183}), :page 85}, :content {:text "负值以一种称为二补数（或补码）的二进制编码存储。"}, :properties {:color "yellow"}} {:id #uuid "63b56b2f-fb7e-4790-8596-5730cd210065", :page 85, :position {:bounding {:x1 0, :y1 428.8000030517578, :x2 660.5983520448208, :y2 867.3875122070312, :width 806, :height 1006.3948811700183}, :rects ({:x1 0, :y1 428.8000030517578, :x2 0, :y2 451.2000045776367, :width 806, :height 1006.3948811700183} {:x1 187.37622985243797, :y1 828.8250122070312, :x2 660.5983520448208, :y2 847.2250061035156, :width 806, :height 1006.3948811700183} {:x1 117.22499999403954, :y1 848.9875183105469, :x2 411.8898559510708, :y2 867.3875122070312, :width 806, :height 1006.3948811700183}), :page 85}, :content {:text "无符号整数来说，第 32 位不表示符号，因为只有正值。无符号整数比有符号整数的范围更大，因为符号位被用来表示数值了"}, :properties {:color "yellow"}} {:id #uuid "63b56b7e-3f77-4ca4-a68d-5cc958be6033", :page 86, :position {:bounding {:x1 0, :y1 113.51251220703125, :x2 733.1803832948208, :y2 259.20001220703125, :width 806, :height 1006.3948811700183}, :rects ({:x1 580.3788696229458, :y1 113.51251220703125, :x2 622.6451660096645, :y2 131.91250610351562, :width 806, :height 1006.3948811700183} {:x1 651.0374999940395, :y1 113.51251220703125, :x2 665.257592767477, :y2 131.91250610351562, :width 806, :height 1006.3948811700183} {:x1 624.7000366151333, :y1 115.58749389648438, :x2 655.8000122010708, :y2 128.85000610351562, :width 806, :height 1006.3948811700183} {:x1 667.312524408102, :y1 115.58749389648438, :x2 733.1803832948208, :y2 128.85000610351562, :width 806, :height 1006.3948811700183} {:x1 104.50000151991844, :y1 134.375, :x2 285.77910766005516, :y2 152.77499389648438, :width 806, :height 1006.3948811700183} {:x1 0, :y1 236.80001831054688, :x2 0, :y2 259.20001220703125, :width 806, :height 1006.3948811700183}), :page 86}, :content {:text "特殊值 NaN 和 Infinity在位操作中都会被当成 0 处理"}, :properties {:color "yellow"}} {:id #uuid "63b56c2a-55d6-4c24-9c5f-9e5bd784fb5d", :page 86, :position {:bounding {:x1 216.68992003798485, :y1 221.01249998807907, :x2 336.5939575135708, :y2 239.4125091433525, :width 806, :height 1006.3948811700183}, :rects ({:x1 216.68992003798485, :y1 221.01249998807907, :x2 336.5939575135708, :y2 239.4125091433525, :width 806, :height 1006.3948811700183} {:x1 286.4374938905239, :y1 223.1000091433525, :x2 293.6750122010708, :y2 236.3625060915947, :width 806, :height 1006.3948811700183}), :page 86}, :content {:text "用波浪符（~）表示"}, :properties {:color "yellow"}} {:id #uuid "63b56c36-f313-4f94-809b-b58a60e7207f", :page 86, :position {:bounding {:x1 0, :y1 316.41249388456345, :x2 731.6613403260708, :y2 419.19999998807907, :width 806, :height 1006.3948811700183}, :rects ({:x1 717.6315551698208, :y1 316.41249388456345, :x2 731.6613403260708, :y2 334.81251829862595, :width 806, :height 1006.3948811700183} {:x1 104.50000151991844, :y1 337.2750121951103, :x2 199.26250609755516, :y2 355.6750060915947, :width 806, :height 1006.3948811700183} {:x1 0, :y1 396.8000060915947, :x2 0, :y2 419.19999998807907, :width 806, :height 1006.3948811700183}), :page 86}, :content {:text "对数值取反并减 1"}, :properties {:color "yellow"}} {:id #uuid "63b56d01-cff7-4faf-8f55-8953bcf4647f", :page 86, :position {:bounding {:x1 217.05390319228172, :y1 477.4875030517578, :x2 323.4280944764614, :y2 495.88751220703125, :width 806, :height 1006.3948811700183}, :rects ({:x1 217.05390319228172, :y1 477.4875030517578, :x2 323.4280944764614, :y2 495.88751220703125, :width 806, :height 1006.3948811700183} {:x1 273.0875183045864, :y1 479.57501220703125, :x2 280.32500609755516, :y2 492.83750915527344, :width 806, :height 1006.3948811700183}), :page 86}, :content {:text "用和号（&）表示"}, :properties {:color "yellow"}} {:id #uuid "63b56db9-61e2-45cb-9890-80a782a1f261", :page 86, :position {:bounding {:x1 216.66492614150047, :y1 883.2000122070312, :x2 336.5872741639614, :y2 901.6000061035156, :width 806, :height 1006.3948811700183}, :rects ({:x1 216.66492614150047, :y1 883.2000122070312, :x2 336.5872741639614, :y2 901.6000061035156, :width 806, :height 1006.3948811700183} {:x1 286.4374938905239, :y1 885.2875061035156, :x2 293.6750122010708, :y2 898.5500183105469, :width 806, :height 1006.3948811700183}), :page 86}, :content {:text "用管道符（|）表示"}, :properties {:color "yellow"}} {:id #uuid "63b56ed8-794d-422c-94e9-52f44a343250", :page 87, :position {:bounding {:x1 159.3221374452114, :y1 446.8125, :x2 279.2294860780239, :y2 465.2125244140625, :width 806, :height 1006.3948811700183}, :rects ({:x1 159.3221374452114, :y1 446.8125, :x2 279.2294860780239, :y2 465.2125244140625, :width 806, :height 1006.3948811700183} {:x1 229.15000304579735, :y1 448.88751220703125, :x2 236.38750609755516, :y2 462.1500244140625, :width 806, :height 1006.3948811700183}), :page 87}, :content {:text "用脱字符（^）表示"}, :properties {:color "yellow"}} {:id #uuid "63b56ee6-e3ba-49aa-9c3b-55d67a54e72d", :page 87, :position {:bounding {:x1 172.9051910340786, :y1 852.4375, :x2 327.77190551161766, :y2 870.8375244140625, :width 806, :height 1006.3948811700183}, :rects ({:x1 172.9051910340786, :y1 852.4375, :x2 270.50481566786766, :y2 870.8375244140625, :width 806, :height 1006.3948811700183} {:x1 286.0875183045864, :y1 852.4375, :x2 327.77190551161766, :y2 870.8375244140625, :width 806, :height 1006.3948811700183} {:x1 270.1750122010708, :y1 854.5125122070312, :x2 286.6286559998989, :y2 867.7750244140625, :width 806, :height 1006.3948811700183}), :page 87}, :content {:text "用两个小于号（<<）表示"}, :properties {:color "yellow"}} {:id #uuid "63b56f28-3254-402d-b871-c687c177f12d", :page 88, :position {:bounding {:x1 174.61542662978172, :y1 386.68751525878906, :x2 371.1083923280239, :y2 405.0874786376953, :width 806, :height 1006.3948811700183}, :rects ({:x1 174.61542662978172, :y1 386.68751525878906, :x2 371.1083923280239, :y2 405.0874786376953, :width 806, :height 1006.3948811700183}), :page 88}, :content {:text "左移会保留它所操作数值的符号"}, :properties {:color "yellow"}} {:id #uuid "63b56f44-9259-4950-a317-2c739e2227f8", :page 88, :position {:bounding {:x1 148.06250914931297, :y1 414.5125160217285, :x2 220.15007933974266, :y2 428.112491607666, :width 806, :height 1006.3948811700183}, :rects ({:x1 148.06250914931297, :y1 414.5125160217285, :x2 220.15007933974266, :y2 428.112491607666, :width 806, :height 1006.3948811700183}), :page 88}, :content {:text "有符号右移"}, :properties {:color "yellow"}} {:id #uuid "63b56f50-fe08-4cda-ac42-c64dc84126af", :page 88, :position {:bounding {:x1 202.6362243592739, :y1 431.6000061035156, :x2 735.6375366151333, :y2 450.00001525878906, :width 806, :height 1006.3948811700183}, :rects ({:x1 202.6362243592739, :y1 431.6000061035156, :x2 300.85698851943016, :y2 450.00001525878906, :width 806, :height 1006.3948811700183} {:x1 316.41249999403954, :y1 431.6000061035156, :x2 735.6375366151333, :y2 450.00001525878906, :width 806, :height 1006.3948811700183} {:x1 300.4999938905239, :y1 433.68751525878906, :x2 316.95363768935204, :y2 446.95001220703125, :width 806, :height 1006.3948811700183}), :page 88}, :content {:text "由两个大于号（>>）表示，会将数值的所有 32 位都向右移，同时保留符号（正或负）。"}, :properties {:color "yellow"}} {:id #uuid "63b56fae-3f05-4672-abf9-4cd9f33effba", :page 88, :position {:bounding {:x1 148.08750304579735, :y1 789.1000061035156, :x2 220.17507323622704, :y2 802.7000122070312, :width 806, :height 1006.3948811700183}, :rects ({:x1 148.08750304579735, :y1 789.1000061035156, :x2 220.17507323622704, :y2 802.7000122070312, :width 806, :height 1006.3948811700183}), :page 88}, :content {:text "无符号右移"}, :properties {:color "yellow"}} {:id #uuid "63b56fca-0bcc-4e34-acdc-9397c6764441", :page 88, :position {:bounding {:x1 104.48750457167625, :y1 535.2750244140625, :x2 503.8897796571255, :y2 549.2375183105469, :width 806, :height 1006.3948811700183}, :rects ({:x1 104.48750457167625, :y1 535.2750244140625, :x2 503.8897796571255, :y2 549.2375183105469, :width 806, :height 1006.3948811700183}), :page 88}, :content {:text "ECMAScript 会用符号位的值来填充这些空位，以得到完整的数值"}, :properties {:color "yellow"}} {:id #uuid "63b5700a-7f95-4ede-a927-1fe327cca27f", :page 88, :position {:bounding {:x1 202.62619933485985, :y1 806.2000122070312, :x2 366.66249999403954, :y2 824.6000061035156, :width 806, :height 1006.3948811700183}, :rects ({:x1 202.62619933485985, :y1 806.2000122070312, :x2 329.0667663514614, :y2 824.6000061035156, :width 806, :height 1006.3948811700183} {:x1 352.66249999403954, :y1 806.2000122070312, :x2 366.66249999403954, :y2 824.6000061035156, :width 806, :height 1006.3948811700183} {:x1 328.78749999403954, :y1 808.2749938964844, :x2 353.45375975966454, :y2 821.5375061035156, :width 806, :height 1006.3948811700183}), :page 88}, :content {:text "用 3 个大于号表示（>>>）"}, :properties {:color "yellow"}} {:id #uuid "63b571ab-1933-4e99-bc18-af510e70b1db", :page 89, :position {:bounding {:x1 132.25000914931297, :y1 272.57501220703125, :x2 219.24741515517235, :y2 290.1750183105469, :width 806, :height 1006.3948811700183}, :rects ({:x1 132.25000914931297, :y1 272.57501220703125, :x2 219.24741515517235, :y2 290.1750183105469, :width 806, :height 1006.3948811700183}), :page 89}, :content {:text "布尔操作符"}, :properties {:color "yellow"}} {:id #uuid "63b571c0-0583-4399-939b-23011d3c0b09", :page 89, :position {:bounding {:x1 118.81250151991844, :y1 354.3000183105469, :x2 162.01569518446922, :y2 367.90000915527344, :width 806, :height 1006.3948811700183}, :rects ({:x1 118.81250151991844, :y1 354.3000183105469, :x2 162.01569518446922, :y2 367.90000915527344, :width 806, :height 1006.3948811700183}), :page 89}, :content {:text "逻辑非"}, :properties {:color "yellow"}} {:id #uuid "63b573cd-6484-4c8f-80b5-9a3e911dff55", :page 89, :position {:bounding {:x1 118.81250151991844, :y1 868.6625061035156, :x2 162.01569518446922, :y2 882.2625122070312, :width 806, :height 1006.3948811700183}, :rects ({:x1 118.81250151991844, :y1 868.6625061035156, :x2 162.01569518446922, :y2 882.2625122070312, :width 806, :height 1006.3948811700183}), :page 89}, :content {:text "逻辑与"}, :properties {:color "yellow"}} {:id #uuid "63b5746e-f392-47f8-99c7-87da08d949b9", :page 89, :position {:bounding {:x1 187.41596373915672, :y1 885.8500061035156, :x2 329.2549987733364, :y2 904.25, :width 806, :height 1006.3948811700183}, :rects ({:x1 187.41596373915672, :y1 885.8500061035156, :x2 271.60698851943016, :y2 904.25, :width 806, :height 1006.3948811700183} {:x1 287.1500183045864, :y1 885.8500061035156, :x2 329.2549987733364, :y2 904.25, :width 806, :height 1006.3948811700183} {:x1 271.2375122010708, :y1 887.9375, :x2 287.6911559998989, :y2 901.1999969482422, :width 806, :height 1006.3948811700183}), :page 89}, :content {:text "由两个和号（&&）表示"}, :properties {:color "yellow"}} {:id #uuid "63b574e0-5cca-49af-85d3-7d5d42270248", :page 90, :position {:bounding {:x1 0, :y1 416.0500183105469, :x2 732.7029357850552, :y2 483.20001220703125, :width 806, :height 1006.3948811700183}, :rects ({:x1 132.51250609755516, :y1 416.0500183105469, :x2 732.7029357850552, :y2 434.45001220703125, :width 806, :height 1006.3948811700183} {:x1 104.48750457167625, :y1 436.9250183105469, :x2 188.14991149306297, :y2 455.32501220703125, :width 806, :height 1006.3948811700183} {:x1 0, :y1 460.8000183105469, :x2 0, :y2 483.20001220703125, :width 806, :height 1006.3948811700183}), :page 90}, :content {:text "逻辑与操作符是一种短路操作符，意思就是如果第一个操作数决定了结果，那么永远不会对第二个操作数求值。"}, :properties {:color "yellow"}} {:id #uuid "63b575ca-9c01-4bac-a479-75d1d22dd7f3", :page 90, :position {:bounding {:x1 144.18750914931297, :y1 737.4125061035156, :x2 191.30320128798485, :y2 755.8125, :width 806, :height 1006.3948811700183}, :rects ({:x1 144.18750914931297, :y1 737.4125061035156, :x2 191.30320128798485, :y2 755.8125, :width 806, :height 1006.3948811700183}), :page 90}, :content {:text " 逻辑或"}, :properties {:color "yellow"}} {:id #uuid "63b575e1-8c58-4769-9372-528e7d96dc84", :page 90, :position {:bounding {:x1 216.73255309462547, :y1 755.9750061035156, :x2 372.4732604920864, :y2 774.3875122070312, :width 806, :height 1006.3948811700183}, :rects ({:x1 330.3749938905239, :y1 755.9750061035156, :x2 372.4732604920864, :y2 774.375, :width 806, :height 1006.3948811700183} {:x1 216.73255309462547, :y1 755.9874877929688, :x2 314.9872985780239, :y2 774.3875122070312, :width 806, :height 1006.3948811700183} {:x1 314.4625183045864, :y1 758.0625, :x2 330.9161315858364, :y2 771.3250122070312, :width 806, :height 1006.3948811700183}), :page 90}, :content {:text "由两个管道符（||）表示"}, :properties {:color "yellow"}} {:id #uuid "63b576d2-48cc-47db-854b-0d1112f997d2", :page 91, :position {:bounding {:x1 104.50000151991844, :y1 516.1499872207642, :x2 445.6165710389614, :y2 528.1499872207642, :width 806, :height 1006.3948811700183}, :rects ({:x1 104.50000151991844, :y1 516.1499872207642, :x2 445.6165710389614, :y2 528.1499872207642, :width 806, :height 1006.3948811700183}), :page 91}, :content {:text "let myObject = preferredObject || backupObject;"}, :properties {:color "yellow"}} {:id #uuid "63b578db-a9c5-4434-9165-464e20ca8815", :page 91, :position {:bounding {:x1 132.25000914931297, :y1 637.1750259399414, :x2 219.24741515517235, :y2 654.7750015258789, :width 806, :height 1006.3948811700183}, :rects ({:x1 132.25000914931297, :y1 637.1750259399414, :x2 219.24741515517235, :y2 654.7750015258789, :width 806, :height 1006.3948811700183}), :page 91}, :content {:text "乘性操作符"}, :properties {:color "yellow"}} {:id #uuid "63b579e6-8fe0-4217-9801-72ae12bc4bb6", :page 91, :position {:bounding {:x1 114.91249999403954, :y1 759.25, :x2 190.90007933974266, :y2 777.6500244140625, :width 806, :height 1006.3948811700183}, :rects ({:x1 114.91249999403954, :y1 759.25, :x2 190.90007933974266, :y2 777.6500244140625, :width 806, :height 1006.3948811700183}), :page 91}, :content {:text " 乘法操作符"}, :properties {:color "yellow"}} {:id #uuid "63b579fa-4898-4ccd-a12a-7a71b2b0a432", :page 92, :position {:bounding {:x1 148.07500609755516, :y1 203.92498779296875, :x2 220.16257628798485, :y2 217.5250244140625, :width 806, :height 1006.3948811700183}, :rects ({:x1 148.07500609755516, :y1 203.92498779296875, :x2 220.16257628798485, :y2 217.5250244140625, :width 806, :height 1006.3948811700183}), :page 92}, :content {:text "除法操作符"}, :properties {:color "yellow"}} {:id #uuid "63b57a0f-9f3f-45ad-94e0-5c558632e5c7", :page 92, :position {:bounding {:x1 148.08750304579735, :y1 462.3375015258789, :x2 220.17507323622704, :y2 475.93753814697266, :width 806, :height 1006.3948811700183}, :rects ({:x1 148.08750304579735, :y1 462.3375015258789, :x2 220.17507323622704, :y2 475.93753814697266, :width 806, :height 1006.3948811700183}), :page 92}, :content {:text "取模操作符"}, :properties {:color "yellow"}} {:id #uuid "63b57a1a-5c4f-4511-b005-c8f617d1336c", :page 92, :position {:bounding {:x1 258.8012329041958, :y1 479.5250015258789, :x2 434.5357604920864, :y2 497.9250259399414, :width 806, :height 1006.3948811700183}, :rects ({:x1 258.8012329041958, :y1 479.5250015258789, :x2 434.5357604920864, :y2 497.9250259399414, :width 806, :height 1006.3948811700183} {:x1 384.4875122010708, :y1 481.60001373291016, :x2 391.72499999403954, :y2 494.8625259399414, :width 806, :height 1006.3948811700183}), :page 92}, :content {:text "由一个百分比符号（%）表示"}, :properties {:color "yellow"}} {:id #uuid "63b57adf-beb6-4c01-9746-4320ce30c8bf", :page 92, :position {:bounding {:x1 161.51250609755516, :y1 708.0750122070312, :x2 248.50991210341454, :y2 725.6749877929688, :width 806, :height 1006.3948811700183}, :rects ({:x1 161.51250609755516, :y1 708.0750122070312, :x2 248.50991210341454, :y2 725.6749877929688, :width 806, :height 1006.3948811700183}), :page 92}, :content {:text "指数操作符"}, :properties {:color "yellow"}} {:id #uuid "63b57af8-d0ad-4a66-98f0-086b290dc163", :page 92, :position {:bounding {:x1 523.403833001852, :y1 741.2125396728516, :x2 581.6536498963833, :y2 759.6125335693359, :width 806, :height 1006.3948811700183}, :rects ({:x1 523.403833001852, :y1 741.2125396728516, :x2 565.4930053651333, :y2 759.6125335693359, :width 806, :height 1006.3948811700183} {:x1 565.2000366151333, :y1 743.3000335693359, :x2 581.6536498963833, :y2 756.5625457763672, :width 806, :height 1006.3948811700183}), :page 92}, :content {:text "操作符**"}, :properties {:color "yellow"}} {:id #uuid "63b57aff-38dd-4ce0-8335-f4a0c167564d", :page 92, :position {:bounding {:x1 339.6845642030239, :y1 843.6875305175781, :x2 461.92876586318016, :y2 862.0875549316406, :width 806, :height 1006.3948811700183}, :rects ({:x1 339.6845642030239, :y1 843.6875305175781, :x2 437.9312683045864, :y2 862.0875549316406, :width 806, :height 1006.3948811700183} {:x1 437.26250609755516, :y1 845.7625427246094, :x2 461.92876586318016, :y2 859.0250549316406, :width 806, :height 1006.3948811700183}), :page 92}, :content {:text "指数赋值操作符**="}, :properties {:color "yellow"}} {:id #uuid "63b57b35-eb63-4ec3-843d-1c8a499c46e4", :page 93, :position {:bounding {:x1 132.25000914931297, :y1 174.35000610351562, :x2 219.24741515517235, :y2 191.95001220703125, :width 806, :height 1006.3948811700183}, :rects ({:x1 132.25000914931297, :y1 174.35000610351562, :x2 219.24741515517235, :y2 191.95001220703125, :width 806, :height 1006.3948811700183}), :page 93}, :content {:text "加性操作符"}, :properties {:color "yellow"}} {:id #uuid "63b57b48-7df0-4a5f-ab16-b9f63052fef7", :page 93, :position {:bounding {:x1 118.81250151991844, :y1 277.0374984741211, :x2 190.90007933974266, :y2 290.6375045776367, :width 806, :height 1006.3948811700183}, :rects ({:x1 118.81250151991844, :y1 277.0374984741211, :x2 190.90007933974266, :y2 290.6375045776367, :width 806, :height 1006.3948811700183}), :page 93}, :content {:text "加法操作符"}, :properties {:color "yellow"}} {:id #uuid "63b57bc1-d452-4d08-8f27-b5efa71a3a78", :page 93, :position {:bounding {:x1 121.19999846816063, :y1 424.1750030517578, :x2 417.3124938905239, :y2 442.5749969482422, :width 806, :height 1006.3948811700183}, :rects ({:x1 121.19999846816063, :y1 424.1750030517578, :x2 167.28749999403954, :y2 442.5749969482422, :width 806, :height 1006.3948811700183} {:x1 234.36249694228172, :y1 424.1750030517578, :x2 248.36249694228172, :y2 442.5749969482422, :width 806, :height 1006.3948811700183} {:x1 319.95000609755516, :y1 424.1750030517578, :x2 376.21145018935204, :y2 442.5749969482422, :width 806, :height 1006.3948811700183} {:x1 403.3124938905239, :y1 424.1750030517578, :x2 417.3124938905239, :y2 442.5749969482422, :width 806, :height 1006.3948811700183} {:x1 166.65000304579735, :y1 426.2624969482422, :x2 232.51784667372704, :y2 439.52500915527344, :width 806, :height 1006.3948811700183} {:x1 248.33750304579735, :y1 426.2624969482422, :x2 322.3362670838833, :y2 439.52500915527344, :width 806, :height 1006.3948811700183} {:x1 379.45000609755516, :y1 426.2624969482422, :x2 404.11626586318016, :y2 439.52500915527344, :width 806, :height 1006.3948811700183}), :page 93}, :content {:text "如果是 Infinity 加-Infinity，则返回 NaN；"}, :properties {:color "yellow"}} {:id #uuid "63b57c1b-a0a9-4e12-93c5-f80440b5ce97", :page 93, :position {:bounding {:x1 113.08750304579735, :y1 465.9125061035156, :x2 298.84999999403954, :y2 484.875, :width 806, :height 1006.3948811700183}, :rects ({:x1 212.97499999403954, :y1 465.9125061035156, :x2 269.00994262099266, :y2 484.3125, :width 806, :height 1006.3948811700183} {:x1 284.84999999403954, :y1 465.9125061035156, :x2 298.84999999403954, :y2 484.3125, :width 806, :height 1006.3948811700183} {:x1 113.08750304579735, :y1 466.4750061035156, :x2 197.00000914931297, :y2 484.875, :width 806, :height 1006.3948811700183} {:x1 196.97499999403954, :y1 467.9875030517578, :x2 213.52051696181297, :y2 481.25, :width 806, :height 1006.3948811700183} {:x1 268.84999999403954, :y1 467.9875030517578, :x2 285.30364379286766, :y2 481.25, :width 806, :height 1006.3948811700183}), :page 93}, :content {:text " 如果是-0 加+0，则返回+0；"}, :properties {:color "yellow"}} {:id #uuid "63b57c56-f1e8-4a0c-910f-7bb789cf9d34", :page 93, :position {:bounding {:x1 121.19999846816063, :y1 549.4500122070312, :x2 710.2955184876919, :y2 567.8500061035156, :width 806, :height 1006.3948811700183}, :rects ({:x1 121.19999846816063, :y1 549.4500122070312, :x2 710.2955184876919, :y2 567.8500061035156, :width 806, :height 1006.3948811700183}), :page 93}, :content {:text "如果只有一个操作数是字符串，则将另一个操作数转换为字符串，再将两个字符串拼接在一起。"}, :properties {:color "yellow"}} {:id #uuid "63b57ce7-4317-49d8-b6e8-b9570bdd85e2", :page 94, :position {:bounding {:x1 148.07500609755516, :y1 271.4624938964844, :x2 220.16257628798485, :y2 285.0625, :width 806, :height 1006.3948811700183}, :rects ({:x1 148.07500609755516, :y1 271.4624938964844, :x2 220.16257628798485, :y2 285.0625, :width 806, :height 1006.3948811700183}), :page 94}, :content {:text "减法操作符"}, :properties {:color "yellow"}} {:id #uuid "63b57cfa-16d3-4d38-8906-054d36ecc82a", :page 94, :position {:bounding {:x1 150.46250304579735, :y1 502.1625061035156, :x2 314.5661559998989, :y2 520.5625, :width 806, :height 1006.3948811700183}, :rects ({:x1 150.46250304579735, :y1 502.1625061035156, :x2 192.48871764540672, :y2 520.5625, :width 806, :height 1006.3948811700183} {:x1 212.26250609755516, :y1 502.1625061035156, :x2 226.26250609755516, :y2 520.5625, :width 806, :height 1006.3948811700183} {:x1 242.23749694228172, :y1 502.1625061035156, :x2 298.2724548280239, :y2 520.5625, :width 806, :height 1006.3948811700183} {:x1 192.37500914931297, :y1 504.2375183105469, :x2 215.52500304579735, :y2 517.5, :width 806, :height 1006.3948811700183} {:x1 226.23749694228172, :y1 504.2375183105469, :x2 242.78301391005516, :y2 517.5, :width 806, :height 1006.3948811700183} {:x1 298.1125122010708, :y1 504.2375183105469, :x2 314.5661559998989, :y2 517.5, :width 806, :height 1006.3948811700183}), :page 94}, :content {:text "如果是+0 减-0，则返回-0"}, :properties {:color "yellow"}} {:id #uuid "63b57d14-0d4d-4a87-9272-463165868f47", :page 94, :position {:bounding {:x1 150.46250304579735, :y1 523.0250244140625, :x2 314.5661559998989, :y2 541.4249877929688, :width 806, :height 1006.3948811700183}, :rects ({:x1 150.46250304579735, :y1 523.0250244140625, :x2 192.48871764540672, :y2 541.4249877929688, :width 806, :height 1006.3948811700183} {:x1 212.26250609755516, :y1 523.0250244140625, :x2 226.26250609755516, :y2 541.4249877929688, :width 806, :height 1006.3948811700183} {:x1 242.23749694228172, :y1 523.0250244140625, :x2 298.2724548280239, :y2 541.4249877929688, :width 806, :height 1006.3948811700183} {:x1 192.37500914931297, :y1 525.1000366210938, :x2 215.52500304579735, :y2 538.3624877929688, :width 806, :height 1006.3948811700183} {:x1 226.23749694228172, :y1 525.1000366210938, :x2 242.78301391005516, :y2 538.3624877929688, :width 806, :height 1006.3948811700183} {:x1 298.1125122010708, :y1 525.1000366210938, :x2 314.5661559998989, :y2 537.9000244140625, :width 806, :height 1006.3948811700183}), :page 94}, :content {:text "如果是-0 减-0，则返回+0"}, :properties {:color "yellow"}} {:id #uuid "63b57d27-24e1-4cf9-bc3b-347242195e80", :page 94, :position {:bounding {:x1 150.46250304579735, :y1 418.6125183105469, :x2 450.9999938905239, :y2 437.01251220703125, :width 806, :height 1006.3948811700183}, :rects ({:x1 150.46250304579735, :y1 418.6125183105469, :x2 192.48871764540672, :y2 437.01251220703125, :width 806, :height 1006.3948811700183} {:x1 268.0500122010708, :y1 418.6125183105469, :x2 282.0500122010708, :y2 437.01251220703125, :width 806, :height 1006.3948811700183} {:x1 353.63750609755516, :y1 418.6125183105469, :x2 409.89898070693016, :y2 437.01251220703125, :width 806, :height 1006.3948811700183} {:x1 436.9999938905239, :y1 418.6125183105469, :x2 450.9999938905239, :y2 437.01251220703125, :width 806, :height 1006.3948811700183} {:x1 192.37500914931297, :y1 420.6875, :x2 271.3124938905239, :y2 433.95001220703125, :width 806, :height 1006.3948811700183} {:x1 282.0250183045864, :y1 420.6875, :x2 356.0237670838833, :y2 433.95001220703125, :width 806, :height 1006.3948811700183} {:x1 413.13750609755516, :y1 420.6875, :x2 437.80376586318016, :y2 433.95001220703125, :width 806, :height 1006.3948811700183}), :page 94}, :content {:text "如果是-Infinity 减-Infinity，则返回 NaN。"}, :properties {:color "yellow"}} {:id #uuid "63b57d6f-81a0-452d-874b-df87a4dde944", :page 94, :position {:bounding {:x1 161.51250609755516, :y1 800.7375183105469, :x2 248.50991210341454, :y2 818.3374938964844, :width 806, :height 1006.3948811700183}, :rects ({:x1 161.51250609755516, :y1 800.7375183105469, :x2 248.50991210341454, :y2 818.3374938964844, :width 806, :height 1006.3948811700183}), :page 94}, :content {:text "关系操作符"}, :properties {:color "yellow"}} {:id #uuid "63b57fa3-3c9c-4908-9597-586c2b0c5cce", :page 95, :position {:bounding {:x1 132.25000914931297, :y1 837.0750350952148, :x2 219.24741515517235, :y2 854.6750335693359, :width 806, :height 1006.3948811700183}, :rects ({:x1 132.25000914931297, :y1 837.0750350952148, :x2 219.24741515517235, :y2 854.6750335693359, :width 806, :height 1006.3948811700183}), :page 95}, :content {:text "相等操作符"}, :properties {:color "yellow"}} {:id #uuid "63b58071-56c1-46a8-a015-c4233a933ab6", :page 96, :position {:bounding {:x1 146.12238463759422, :y1 409.06251525878906, :x2 321.38869628310204, :y2 428.02500915527344, :width 806, :height 1006.3948811700183}, :rects ({:x1 279.3625122010708, :y1 409.06251525878906, :x2 321.38869628310204, :y2 427.46250915527344, :width 806, :height 1006.3948811700183} {:x1 146.12238463759422, :y1 409.62501525878906, :x2 200.6145416200161, :y2 428.02500915527344, :width 806, :height 1006.3948811700183} {:x1 203.77500304579735, :y1 411.13751220703125, :x2 282.6249938905239, :y2 424.40000915527344, :width 806, :height 1006.3948811700183}), :page 96}, :content {:text "null 和 undefined 相等。"}, :properties {:color "yellow"}} {:id #uuid "63b58093-dff1-4302-9b29-f4abb2898109", :page 96, :position {:bounding {:x1 210.32500609755516, :y1 662.9875030517578, :x2 584.7990356385708, :y2 674.1875152587891, :width 806, :height 1006.3948811700183}, :rects ({:x1 210.32500609755516, :y1 662.9875030517578, :x2 312.7685180604458, :y2 674.1875152587891, :width 806, :height 1006.3948811700183} {:x1 558.562524408102, :y1 662.9875030517578, :x2 584.7990356385708, :y2 674.1875152587891, :width 806, :height 1006.3948811700183}), :page 96}, :content {:text "NaN != NaN true"}, :properties {:color "yellow"}} {:id #uuid "63b580c7-fd7c-4818-858d-92356f01b507", :page 96, :position {:bounding {:x1 133.76250609755516, :y1 878.8000183105469, :x2 569.8297363221645, :y2 890.7999877929688, :width 806, :height 1006.3948811700183}, :rects ({:x1 133.76250609755516, :y1 878.8000183105469, :x2 569.8297363221645, :y2 890.7999877929688, :width 806, :height 1006.3948811700183}), :page 96}, :content {:text "let result2 = (\"55\" === 55); // false，不相等，因为数据类型不同"}, :properties {:color "yellow"}} {:id #uuid "63b580d6-05f3-4713-a027-146e5ffc7363", :page 97, :position {:bounding {:x1 0, :y1 156.80001068115234, :x2 701.8250366151333, :y2 338.52501678466797, :width 806, :height 1006.3948811700183}, :rects ({:x1 0, :y1 156.80001068115234, :x2 0, :y2 179.20000457763672, :width 806, :height 1006.3948811700183} {:x1 687.8250366151333, :y1 299.2625045776367, :x2 701.8250366151333, :y2 317.6624984741211, :width 806, :height 1006.3948811700183} {:x1 538.1375366151333, :y1 301.33751678466797, :x2 686.1208129823208, :y2 314.5999984741211, :width 806, :height 1006.3948811700183} {:x1 115.01249846816063, :y1 320.12499237060547, :x2 325.4797225892544, :y2 338.52501678466797, :width 806, :height 1006.3948811700183} {:x1 75.22499999403954, :y1 322.2000045776367, :x2 116.33068999648094, :y2 335.46251678466797, :width 806, :height 1006.3948811700183}), :page 97}, :content {:text "null === undefined 是 false，因为它们不是相同的数据类型。"}, :properties {:color "yellow"}} {:id #uuid "63b580dd-4b0a-44b4-acde-7f378162f9e9", :page 97, :position {:bounding {:x1 132.25000914931297, :y1 433.7500228881836, :x2 219.24741515517235, :y2 451.3499984741211, :width 806, :height 1006.3948811700183}, :rects ({:x1 132.25000914931297, :y1 433.7500228881836, :x2 219.24741515517235, :y2 451.3499984741211, :width 806, :height 1006.3948811700183}), :page 97}, :content {:text "条件操作符"}, :properties {:color "yellow"}} {:id #uuid "63b580f3-c054-4223-bc53-f04577b9a8fc", :page 97, :position {:bounding {:x1 125.85797271132469, :y1 657.1750183105469, :x2 229.05991515517235, :y2 679.5750122070312, :width 806, :height 1006.3948811700183}, :rects ({:x1 125.85797271132469, :y1 657.1750183105469, :x2 125.86149749159813, :y2 679.5750122070312, :width 806, :height 1006.3948811700183} {:x1 142.06250914931297, :y1 658.3999938964844, :x2 229.05991515517235, :y2 676, :width 806, :height 1006.3948811700183}), :page 97}, :content {:text "赋值操作符"}, :properties {:color "yellow"}} {:id #uuid "63b580fb-16f2-4874-bb47-01a959304e3c", :page 98, :position {:bounding {:x1 170.00000914931297, :y1 316.5125045776367, :x2 256.9974304139614, :y2 334.11251068115234, :width 806, :height 1006.3948811700183}, :rects ({:x1 170.00000914931297, :y1 316.5125045776367, :x2 256.9974304139614, :y2 334.11251068115234, :width 806, :height 1006.3948811700183}), :page 98}, :content {:text "逗号操作符"}, :properties {:color "yellow"}} {:id #uuid "63b5810f-4e1e-4edd-b792-127271bcf3e5", :page 97, :position {:bounding {:x1 104.50000151991844, :y1 490.8625183105469, :x2 515.6666503846645, :y2 502.8625183105469, :width 806, :height 1006.3948811700183}, :rects ({:x1 104.50000151991844, :y1 490.8625183105469, :x2 515.6666503846645, :y2 502.8625183105469, :width 806, :height 1006.3948811700183}), :page 97}, :content {:text "variable = boolean_expression ? true_value : false_value;"}, :properties {:color "yellow"}} {:id #uuid "63b582cf-eb35-4c15-9337-bf4c081f9d2d", :page 98, :position {:bounding {:x1 0, :y1 396.0625, :x2 732.7154785096645, :y2 451.20001220703125, :width 806, :height 1006.3948811700183}, :rects ({:x1 593.1238647401333, :y1 396.0625, :x2 732.7154785096645, :y2 414.4624938964844, :width 806, :height 1006.3948811700183} {:x1 104.50000151991844, :y1 417.01251220703125, :x2 567.6288162171841, :y2 435.4125061035156, :width 806, :height 1006.3948811700183} {:x1 0, :y1 428.8000183105469, :x2 0, :y2 451.20001220703125, :width 806, :height 1006.3948811700183}), :page 98}, :content {:text "使用逗号操作符来辅助赋值。在赋值时使用逗号操作符分隔值，最终会返回表达式中最后一个值："}, :properties {:color "yellow"}} {:id #uuid "63b58321-da1c-40e8-b506-5e6d7f3339d7", :page 98, :position {:bounding {:x1 161.51250609755516, :y1 638.5000152587891, :x2 221.68647155165672, :y2 655.4750061035156, :width 806, :height 1006.3948811700183}, :rects ({:x1 161.51250609755516, :y1 638.5000152587891, :x2 221.68647155165672, :y2 655.4750061035156, :width 806, :height 1006.3948811700183}), :page 98}, :content {:text "if 语句"}, :properties {:color "yellow"}} {:id #uuid "63b58336-fee9-4ce9-920c-b9e67dce1059", :page 99, :position {:bounding {:x1 132.25000914931297, :y1 306.07501220703125, :x2 253.42397460341454, :y2 323.04998779296875, :width 806, :height 1006.3948811700183}, :rects ({:x1 132.25000914931297, :y1 306.07501220703125, :x2 253.42397460341454, :y2 323.04998779296875, :width 806, :height 1006.3948811700183}), :page 99}, :content {:text "do-while 语句"}, :properties {:color "yellow"}} {:id #uuid "63b5833e-c903-4938-a353-fb73f3789254", :page 99, :position {:bounding {:x1 116.068254083395, :y1 612.875, :x2 222.92397460341454, :y2 635.2749938964844, :width 806, :height 1006.3948811700183}, :rects ({:x1 116.068254083395, :y1 612.875, :x2 116.07176360487938, :y2 635.2749938964844, :width 806, :height 1006.3948811700183} {:x1 132.25000914931297, :y1 614.7124938964844, :x2 222.92397460341454, :y2 631.6875, :width 806, :height 1006.3948811700183}), :page 99}, :content {:text "while 语句"}, :properties {:color "yellow"}} {:id #uuid "63b58346-c7ce-4857-930a-7dded1639c4f", :page 99, :position {:bounding {:x1 132.25000914931297, :y1 835.7375183105469, :x2 202.59896239638329, :y2 852.7124938964844, :width 806, :height 1006.3948811700183}, :rects ({:x1 132.25000914931297, :y1 835.7375183105469, :x2 202.59896239638329, :y2 852.7124938964844, :width 806, :height 1006.3948811700183}), :page 99}, :content {:text "for 语句"}, :properties {:color "yellow"}} {:id #uuid "63b58352-12a2-4b13-9251-ede479c39ec8", :page 100, :position {:bounding {:x1 161.51250609755516, :y1 691.9875183105469, :x2 262.36147460341454, :y2 708.9624938964844, :width 806, :height 1006.3948811700183}, :rects ({:x1 161.51250609755516, :y1 691.9875183105469, :x2 262.36147460341454, :y2 708.9624938964844, :width 806, :height 1006.3948811700183}), :page 100}, :content {:text "for-in 语句"}, :properties {:color "yellow"}} {:id #uuid "63b58361-8f28-463a-ab1f-2a525e5353f0", :page 101, :position {:bounding {:x1 116.068254083395, :y1 169.0625, :x2 233.09897765517235, :y2 191.46249389648438, :width 806, :height 1006.3948811700183}, :rects ({:x1 116.068254083395, :y1 169.0625, :x2 116.07176360487938, :y2 191.46249389648438, :width 806, :height 1006.3948811700183} {:x1 132.25000914931297, :y1 170.89999389648438, :x2 233.09897765517235, :y2 187.875, :width 806, :height 1006.3948811700183}), :page 101}, :content {:text "for-of 语句"}, :properties {:color "yellow"}} {:id #uuid "63b5836c-f673-4414-9de3-9309ff40a6b9", :page 101, :position {:bounding {:x1 132.25000914931297, :y1 542.3125, :x2 201.84792479872704, :y2 559.9125061035156, :width 806, :height 1006.3948811700183}, :rects ({:x1 132.25000914931297, :y1 542.3125, :x2 201.84792479872704, :y2 559.9125061035156, :width 806, :height 1006.3948811700183}), :page 101}, :content {:text "标签语句"}, :properties {:color "yellow"}} {:id #uuid "63b58376-a637-4872-805c-61cf3504bc11", :page 101, :position {:bounding {:x1 132.25000914931297, :y1 753.7875061035156, :x2 331.4114929139614, :y2 771.3875122070312, :width 806, :height 1006.3948811700183}, :rects ({:x1 132.25000914931297, :y1 753.7875061035156, :x2 331.4114929139614, :y2 771.3875122070312, :width 806, :height 1006.3948811700183}), :page 101}, :content {:text "break 和 continue 语句"}, :properties {:color "yellow"}} {:id #uuid "63b58387-dd7e-4b5c-bd34-19956c9b66d4", :page 103, :position {:bounding {:x1 132.25000914931297, :y1 353.2875061035156, :x2 212.76148375868797, :y2 370.26251220703125, :width 806, :height 1006.3948811700183}, :rects ({:x1 132.25000914931297, :y1 353.2875061035156, :x2 212.76148375868797, :y2 370.26251220703125, :width 806, :height 1006.3948811700183}), :page 103}, :content {:text "with 语句"}, :properties {:color "yellow"}} {:id #uuid "63b58395-70fc-4d6c-b5df-6e394204a48b", :page 103, :position {:bounding {:x1 142.06250914931297, :y1 806.9125061035156, :x2 242.91147765517235, :y2 823.8875122070312, :width 806, :height 1006.3948811700183}, :rects ({:x1 142.06250914931297, :y1 806.9125061035156, :x2 242.91147765517235, :y2 823.8875122070312, :width 806, :height 1006.3948811700183}), :page 103}, :content {:text "switch 语句"}, :properties {:color "yellow"}} {:id #uuid "63ba22a7-2d98-405a-860f-8ace3b57b7f2", :page 101, :position {:bounding {:x1 146.65000301599503, :y1 150.50001525878906, :x2 633.859216272831, :y2 170.50001525878906, :width 900.9999999999999, :height 1125.014625228519}, :rects ({:x1 146.65000301599503, :y1 150.50001525878906, :x2 633.859216272831, :y2 170.50001525878906, :width 900.9999999999999, :height 1125.014625228519} {:x1 150.6124969124794, :y1 152.53749084472656, :x2 211.4249969124794, :y2 167.3625030517578, :width 900.9999999999999, :height 1125.014625228519} {:x1 353.11251217126846, :y1 152.53749084472656, :x2 396.13750606775284, :y2 167.3625030517578, :width 900.9999999999999, :height 1125.014625228519} {:x1 412.8124938607216, :y1 152.53749084472656, :x2 487.30562740564346, :y2 167.3625030517578, :width 900.9999999999999, :height 1125.014625228519}), :page 101}, :content {:text " for-in 循环要迭代的变量是 null 或 undefined，则不执行循环体。"}, :properties {:color "yellow"}} {:id #uuid "63ba2626-24a8-4a18-b487-1c2ffac39fa4", :page 102, :position {:bounding {:x1 146.46250301599503, :y1 571.4749870300293, :x2 809.5304809212685, :y2 591.4749870300293, :width 900.9999999999999, :height 1125.014625228519}, :rects ({:x1 146.46250301599503, :y1 571.4749870300293, :x2 809.5304809212685, :y2 591.4749870300293, :width 900.9999999999999, :height 1125.014625228519} {:x1 190.93750911951065, :y1 572.2750358581543, :x2 191.39768368005753, :y2 587.0999870300293, :width 900.9999999999999, :height 1125.014625228519} {:x1 214.95000606775284, :y1 572.2750358581543, :x2 293.5624938607216, :y2 587.0999870300293, :width 900.9999999999999, :height 1125.014625228519}), :page 102}, :content {:text "break 和 continue 都可以与标签语句一起使用，返回代码中特定的位置。这通常是在嵌套循环中"}, :properties {:color "yellow"}} {:id #uuid "63ba2fb8-5815-483f-8c79-07b7ec2e4123", :page 106, :position {:bounding {:x1 0, :y1 416.12501525878906, :x2 817.3395019173622, :y2 467.20001220703125, :width 900.9999999999999, :height 1125.014625228519}, :rects ({:x1 148.15000301599503, :y1 416.12501525878906, :x2 817.3395019173622, :y2 436.12501525878906, :width 900.9999999999999, :height 1125.014625228519} {:x1 694.3750243782997, :y1 417.6000061035156, :x2 748.5550780892372, :y2 432.4250030517578, :width 900.9999999999999, :height 1125.014625228519} {:x1 116.81250149011612, :y1 438.88751220703125, :x2 367.5957046151161, :y2 458.88751220703125, :width 900.9999999999999, :height 1125.014625228519} {:x1 0, :y1 444.8000030517578, :x2 0, :y2 467.20001220703125, :width 900.9999999999999, :height 1125.014625228519}), :page 106}, :content {:text "ECMAScript 中的函数不需要指定是否返回值。任何函数在任何时间都可以使用 return 语句来返回函数的值，用法是后跟要返回的值"}, :properties {:color "yellow"}} {:id #uuid "63bc00e6-7457-464c-b735-9fce29da28e7", :page 108, :position {:bounding {:x1 136.46331173181534, :y1 474.8250045776367, :x2 302.37944942712784, :y2 501.2249984741211, :width 816.7013888888889, :height 1019.7569444444445}, :rects ({:x1 136.46331173181534, :y1 474.8250045776367, :x2 136.4663329720497, :y2 501.2249984741211, :width 816.7013888888889, :height 1019.7569444444445} {:x1 155.8499999642372, :y1 476.62499237060547, :x2 302.37944942712784, :y2 497.42501068115234, :width 816.7013888888889, :height 1019.7569444444445}), :page 108}, :content {:text "原始值与引用值"}, :properties {:color "yellow"}} {:id #uuid "63bc00fb-de43-412c-93f2-e5c74c7f8346", :page 108, :position {:bounding {:x1 0, :y1 412.8000030517578, :x2 759.2886962890625, :y2 566.5, :width 837.0000000000001, :height 1045.1023765996345}, :rects ({:x1 0, :y1 412.8000030517578, :x2 0, :y2 435.20001220703125, :width 837.0000000000001, :height 1045.1023765996345} {:x1 566.8375244140625, :y1 527.0625, :x2 759.2886962890625, :y2 545.4624938964844, :width 837.0000000000001, :height 1045.1023765996345} {:x1 108.51250457763672, :y1 548.1000061035156, :x2 195.92294311523438, :y2 566.5, :width 837.0000000000001, :height 1045.1023765996345}), :page 108}, :content {:text "原始值（primitive value）就是最简单的数据"}, :properties {:color "yellow"}} {:id #uuid "63bc0102-b67e-4721-964a-0707147bb228", :page 108, :position {:bounding {:x1 210.2375030517578, :y1 548.7375183105469, :x2 532.3438720703125, :y2 563.9375, :width 837.0000000000001, :height 1045.1023765996345}, :rects ({:x1 210.2375030517578, :y1 548.7375183105469, :x2 532.3438720703125, :y2 563.9375, :width 837.0000000000001, :height 1045.1023765996345}), :page 108}, :content {:text "引用值（reference value）则是由多个值构成的对象"}, :properties {:color "yellow"}} {:id #uuid "63bc0123-30e5-4902-b42e-b18b1be1fb87", :page 108, :position {:bounding {:x1 459.0375061035156, :y1 635.5, :x2 686.5555419921875, :y2 653.9000244140625, :width 837.0000000000001, :height 1045.1023765996345}, :rects ({:x1 459.0375061035156, :y1 635.5, :x2 686.5555419921875, :y2 653.9000244140625, :width 837.0000000000001, :height 1045.1023765996345}), :page 108}, :content {:text "JavaScript 不允许直接访问内存位置"}, :properties {:color "yellow"}} {:id #uuid "63bc0133-d23b-4dcf-8537-4ac727b24273", :page 108, :position {:bounding {:x1 0, :y1 508.8000030517578, :x2 759.1929321289062, :y2 696.7000122070312, :width 837.0000000000001, :height 1045.1023765996345}, :rects ({:x1 0, :y1 508.8000030517578, :x2 0, :y2 531.1999969482422, :width 837.0000000000001, :height 1045.1023765996345} {:x1 327.25042724609375, :y1 656.625, :x2 759.1929321289062, :y2 675.0249938964844, :width 837.0000000000001, :height 1045.1023765996345} {:x1 108.5250015258789, :y1 678.2999877929688, :x2 602.3798828125, :y2 696.7000122070312, :width 837.0000000000001, :height 1045.1023765996345}), :page 108}, :content {:text "。在操作对象时，实际上操作的是对该对象的引用（reference）而非实际的对象本身。为此，保存引用值的变量是按引用（by reference）访问的。"}, :properties {:color "yellow"}} {:id #uuid "63bc0183-6944-43e0-9cd5-de3cadea3c20", :page 108, :position {:bounding {:x1 0, :y1 540.8000030517578, :x2 708.4995727539062, :y2 758.75, :width 837.0000000000001, :height 1045.1023765996345}, :rects ({:x1 0, :y1 540.8000030517578, :x2 0, :y2 563.1999969482422, :width 837.0000000000001, :height 1045.1023765996345} {:x1 195.72500610351562, :y1 719.5, :x2 708.4995727539062, :y2 737.8999938964844, :width 837.0000000000001, :height 1045.1023765996345} {:x1 152.125, :y1 740.3500061035156, :x2 268.6473083496094, :y2 758.75, :width 837.0000000000001, :height 1045.1023765996345}), :page 108}, :content {:text "在很多语言中，字符串是使用对象表示的，因此被认为是引用类型。ECMAScript打破了这个惯例。"}, :properties {:color "yellow"}} {:id #uuid "63bc018d-50be-4577-917f-7c0f3b8aa5d3", :page 108, :position {:bounding {:x1 167.72500610351562, :y1 790.2374877929688, :x2 241.3079071044922, :y2 808.6375122070312, :width 837.0000000000001, :height 1045.1023765996345}, :rects ({:x1 167.72500610351562, :y1 790.2374877929688, :x2 241.3079071044922, :y2 808.6375122070312, :width 837.0000000000001, :height 1045.1023765996345}), :page 108}, :content {:text "动态属性"}, :properties {:color "yellow"}} {:id #uuid "63bc01c8-546e-4484-8811-6bcbb696e597", :page 109, :position {:bounding {:x1 107.23750305175781, :y1 161.3125, :x2 471.4638214111328, :y2 179.71249389648438, :width 837.0000000000001, :height 1045.1023765996345}, :rects ({:x1 107.23750305175781, :y1 161.3125, :x2 471.4638214111328, :y2 179.71249389648438, :width 837.0000000000001, :height 1045.1023765996345}), :page 109}, :content {:text "原始值不能有属性，尽管尝试给原始值添加属性不会报错"}, :properties {:color "yellow"}} {:id #uuid "63bc01e8-bef1-4167-bf71-30ab4f9cb180", :page 109, :position {:bounding {:x1 0, :y1 140.79998779296875, :x2 728.8125, :y2 321.0874938964844, :width 837.0000000000001, :height 1045.1023765996345}, :rects ({:x1 0, :y1 140.79998779296875, :x2 0, :y2 163.20001220703125, :width 837.0000000000001, :height 1045.1023765996345} {:x1 150.80484008789062, :y1 281.0249938964844, :x2 728.8125, :y2 299.4250183105469, :width 837.0000000000001, :height 1045.1023765996345} {:x1 78.125, :y1 302.6875305175781, :x2 281.0445251464844, :y2 321.0874938964844, :width 837.0000000000001, :height 1045.1023765996345}), :page 109}, :content {:text "原始类型的初始化可以只使用原始字面量形式。如果使用的是 new 关键字，则 JavaScript 会创建一个 Object 类型的实例，"}, :properties {:color "yellow"}} {:id #uuid "63bc0206-c2f8-4455-99ba-ac8b79767fdb", :page 110, :position {:bounding {:x1 0, :y1 117.9625244140625, :x2 760.6508331298828, :y2 275.2000427246094, :width 837.0000000000001, :height 1045.1023765996345}, :rects ({:x1 137.6125030517578, :y1 117.9625244140625, :x2 760.6508331298828, :y2 136.36251831054688, :width 837.0000000000001, :height 1045.1023765996345} {:x1 108.51250457763672, :y1 139.63751220703125, :x2 760.5505294799805, :y2 158.03750610351562, :width 837.0000000000001, :height 1045.1023765996345} {:x1 108.51250457763672, :y1 161.3125, :x2 225.0763702392578, :y2 179.7125244140625, :width 837.0000000000001, :height 1045.1023765996345} {:x1 0, :y1 236.80001831054688, :x2 0, :y2 259.2000427246094, :width 837.0000000000001, :height 1045.1023765996345} {:x1 0, :y1 252.80001831054688, :x2 0, :y2 275.2000427246094, :width 837.0000000000001, :height 1045.1023765996345}), :page 110}, :content {:text "在把引用值从一个变量赋给另一个变量时，存储在变量中的值也会被复制到新变量所在的位置。区别在于，这里复制的值实际上是一个指针，它指向存储在堆内存中的对象。操作完成后，两个变量实际上指向同一个对象"}, :properties {:color "yellow"}} {:id #uuid "63bc0240-8ab0-4374-85ab-e6712dd90fcf", :page 111, :position {:bounding {:x1 0, :y1 92.79998779296875, :x2 728.9503784179688, :y2 253.06253051757812, :width 837.0000000000001, :height 1045.1023765996345}, :rects ({:x1 0, :y1 92.79998779296875, :x2 0, :y2 115.19998168945312, :width 837.0000000000001, :height 1045.1023765996345} {:x1 474.2458190917969, :y1 212.98751831054688, :x2 728.9503784179688, :y2 231.38748168945312, :width 837.0000000000001, :height 1045.1023765996345} {:x1 78.125, :y1 234.66250610351562, :x2 252.4713134765625, :y2 253.06253051757812, :width 837.0000000000001, :height 1045.1023765996345}), :page 111}, :content {:text "参数 num 和变量 count 互不干扰，它们只不过碰巧保存了一样的值"}, :properties {:color "yellow"}} {:id #uuid "63bc0253-1c15-4505-9b70-fc727b7942ec", :page 111, :position {:bounding {:x1 0, :y1 268.8000030517578, :x2 729.3214111328125, :y2 474.31251525878906, :width 837.0000000000001, :height 1045.1023765996345}, :rects ({:x1 0, :y1 268.8000030517578, :x2 0, :y2 291.1999969482422, :width 837.0000000000001, :height 1045.1023765996345} {:x1 613.8397827148438, :y1 434.16249084472656, :x2 729.3214111328125, :y2 452.56251525878906, :width 837.0000000000001, :height 1045.1023765996345} {:x1 78.125, :y1 455.91249084472656, :x2 381.3662109375, :y2 474.31251525878906, :width 837.0000000000001, :height 1045.1023765996345}), :page 111}, :content {:text "果就是，即使对象是按值传进函数的，obj 也会通过引用访问对象"}, :properties {:color "yellow"}} {:id #uuid "63bc025c-b408-416c-b4e2-83c2a9e5c353", :page 111, :position {:bounding {:x1 238.37351989746094, :y1 477.5874786376953, :x2 561.8912353515625, :y2 495.9875030517578, :width 837.0000000000001, :height 1045.1023765996345}, :rects ({:x1 238.37351989746094, :y1 477.5874786376953, :x2 561.8912353515625, :y2 495.9875030517578, :width 837.0000000000001, :height 1045.1023765996345}), :page 111}, :content {:text "因为 obj 指向的对象保存在全局作用域的堆内存上"}, :properties {:color "yellow"}} {:id #uuid "63bc02c7-95ed-43d9-8469-16103eaf13b3", :page 111, :position {:bounding {:x1 0, :y1 508.8000183105469, :x2 728.8671264648438, :y2 767.9249877929688, :width 837.0000000000001, :height 1045.1023765996345}, :rects ({:x1 0, :y1 508.8000183105469, :x2 0, :y2 531.2000122070312, :width 837.0000000000001, :height 1045.1023765996345} {:x1 371.1717224121094, :y1 727.8624877929688, :x2 728.8671264648438, :y2 746.2625122070312, :width 837.0000000000001, :height 1045.1023765996345} {:x1 78.125, :y1 749.5250244140625, :x2 328.5486755371094, :y2 767.9249877929688, :width 837.0000000000001, :height 1045.1023765996345}), :page 111}, :content {:text "如果 person 是按引用传递的，那么 person 应该自动将指针改为指向 name 为\"Greg\"的对象。"}, :properties {:color "yellow"}} {:id #uuid "63bc02ca-9e82-45bc-97cb-83f9bd6953d6", :page 111, :position {:bounding {:x1 149.84280395507812, :y1 834.9875183105469, :x2 434.3392028808594, :y2 850.1875305175781, :width 837.0000000000001, :height 1045.1023765996345}, :rects ({:x1 149.84280395507812, :y1 834.9875183105469, :x2 152.15225219726562, :y2 850.1875305175781, :width 837.0000000000001, :height 1045.1023765996345} {:x1 165.33750915527344, :y1 834.9875183105469, :x2 434.3392028808594, :y2 850.1875305175781, :width 837.0000000000001, :height 1045.1023765996345}), :page 111}, :content {:text " ECMAScript 中函数的参数就是局部变量。"}, :properties {:color "yellow"}} {:id #uuid "63bc0329-7793-46b6-88a8-74bacb1af594", :page 109, :position {:bounding {:x1 137.33750915527344, :y1 466.4250030517578, :x2 192.5309295654297, :y2 484.82501220703125, :width 837.0000000000001, :height 1045.1023765996345}, :rects ({:x1 137.33750915527344, :y1 466.4250030517578, :x2 192.5309295654297, :y2 484.82501220703125, :width 837.0000000000001, :height 1045.1023765996345}), :page 109}, :content {:text "复制值"}, :properties {:color "yellow"}} {:id #uuid "63bc0334-9135-46fa-823d-50197cc6db07", :page 110, :position {:bounding {:x1 167.72500610351562, :y1 660.5125122070312, :x2 241.3079071044922, :y2 678.9125061035156, :width 837.0000000000001, :height 1045.1023765996345}, :rects ({:x1 167.72500610351562, :y1 660.5125122070312, :x2 241.3079071044922, :y2 678.9125061035156, :width 837.0000000000001, :height 1045.1023765996345}), :page 110}, :content {:text "传递参数"}, :properties {:color "yellow"}} {:id #uuid "63bc0347-abea-4a3a-9996-d4c660f72ea8", :page 110, :position {:bounding {:x1 137.6125030517578, :y1 696.4500274658203, :x2 439.2023010253906, :y2 711.6500091552734, :width 837.0000000000001, :height 1045.1023765996345}, :rects ({:x1 137.6125030517578, :y1 696.4500274658203, :x2 439.2023010253906, :y2 711.6500091552734, :width 837.0000000000001, :height 1045.1023765996345}), :page 110}, :content {:text "ECMAScript 中所有函数的参数都是按值传递的"}, :properties {:color "yellow"}} {:id #uuid "63bc0350-2c24-4ed9-b206-9e7d7062f6e3", :page 111, :position {:bounding {:x1 137.33750915527344, :y1 889.3125, :x2 210.92041015625, :y2 907.7124938964844, :width 837.0000000000001, :height 1045.1023765996345}, :rects ({:x1 137.33750915527344, :y1 889.3125, :x2 210.92041015625, :y2 907.7124938964844, :width 837.0000000000001, :height 1045.1023765996345}), :page 111}, :content {:text "确定类型"}, :properties {:color "yellow"}} {:id #uuid "63bc0411-ef6d-4a96-ad36-6206d2d6837e", :page 112, :position {:bounding {:x1 0, :y1 538.362512588501, :x2 759.1124877929688, :y2 627.2000370025635, :width 837.0000000000001, :height 1045.1023765996345}, :rects ({:x1 389.4093933105469, :y1 538.362512588501, :x2 759.1124877929688, :y2 556.7625370025635, :width 837.0000000000001, :height 1045.1023765996345} {:x1 108.51250457763672, :y1 560.1250247955322, :x2 239.54833221435547, :y2 578.5249881744385, :width 837.0000000000001, :height 1045.1023765996345} {:x1 0, :y1 604.800012588501, :x2 0, :y2 627.2000370025635, :width 837.0000000000001, :height 1045.1023765996345}), :page 112}, :content {:text "如果用 instanceof 检测原始值，则始终会返回 false，因为原始值不是对象"}, :properties {:color "yellow"}} {:id #uuid "63bc0428-bec7-4538-b864-d457a1e4311f", :page 112, :position {:bounding {:x1 195.7375030517578, :y1 603.4125061035156, :x2 538.8710327148438, :y2 617.1875, :width 837.0000000000001, :height 1045.1023765996345}, :rects ({:x1 195.7375030517578, :y1 603.4125061035156, :x2 538.8710327148438, :y2 617.1875, :width 837.0000000000001, :height 1045.1023765996345}), :page 112}, :content {:text "typeof 操作符在用于检测函数时也会返回\"function\""}, :properties {:color "yellow"}} {:id #uuid "63bc0438-ea70-4f0e-845a-aef946d8a7e7", :page 112, :position {:bounding {:x1 0, :y1 683.8875122070312, :x2 715.5980834960938, :y2 723.2124938964844, :width 837.0000000000001, :height 1045.1023765996345}, :rects ({:x1 450.7060241699219, :y1 683.8875122070312, :x2 715.5980834960938, :y2 702.2875061035156, :width 837.0000000000001, :height 1045.1023765996345} {:x1 0, :y1 700.8000183105469, :x2 0, :y2 723.2000122070312, :width 837.0000000000001, :height 1045.1023765996345} {:x1 152.125, :y1 704.8125, :x2 261.8625183105469, :y2 723.2124938964844, :width 837.0000000000001, :height 1045.1023765996345}), :page 112}, :content {:text "在 IE 和 Firefox 中，typeof 对正则表达式返回\"object\"。"}, :properties {:color "yellow"}} {:id #uuid "63bc0452-9e02-4750-acf8-a591f04e3eca", :page 112, :position {:bounding {:x1 159.7375030517578, :y1 761.3625183105469, :x2 352.6698913574219, :y2 782.9624938964844, :width 837.0000000000001, :height 1045.1023765996345}, :rects ({:x1 159.7375030517578, :y1 761.3625183105469, :x2 352.6698913574219, :y2 782.9624938964844, :width 837.0000000000001, :height 1045.1023765996345}), :page 112}, :content {:text "执行上下文与作用域"}, :properties {:color "yellow"}} {:id #uuid "63bc04a4-645c-4661-bfc8-e33a0a0edfaa", :page 112, :position {:bounding {:x1 0, :y1 764.8000183105469, :x2 759.2875366210938, :y2 863.875, :width 837.0000000000001, :height 1045.1023765996345}, :rects ({:x1 0, :y1 764.8000183105469, :x2 0, :y2 787.2000122070312, :width 837.0000000000001, :height 1045.1023765996345} {:x1 401.379638671875, :y1 823.7999877929688, :x2 759.2875366210938, :y2 842.2000122070312, :width 837.0000000000001, :height 1045.1023765996345} {:x1 108.5, :y1 845.4750366210938, :x2 499.77520751953125, :y2 863.875, :width 837.0000000000001, :height 1045.1023765996345}), :page 112}, :content {:text "每个上下文都有一个关联的变量对象（variable object），而这个上下文中定义的所有变量和函数都存在于这个对象上。"}, :properties {:color "yellow"}} {:id #uuid "63bc05c8-1af4-423b-8be8-d1ddf1ccde6b", :page 112, :position {:bounding {:x1 137.60000610351562, :y1 888.9125061035156, :x2 323.5096740722656, :y2 907.3125, :width 837.0000000000001, :height 1045.1023765996345}, :rects ({:x1 137.60000610351562, :y1 888.9125061035156, :x2 323.5096740722656, :y2 907.3125, :width 837.0000000000001, :height 1045.1023765996345}), :page 112}, :content {:text "全局上下文是最外层的上下文"}, :properties {:color "yellow"}} {:id #uuid "63bc0746-f5a1-46b3-a025-1e6d825d0d3b", :page 113, :position {:bounding {:x1 107.2249984741211, :y1 161.3125, :x2 311.1469039916992, :y2 179.7125244140625, :width 837.0000000000001, :height 1045.1023765996345}, :rects ({:x1 107.2249984741211, :y1 161.3125, :x2 311.1469039916992, :y2 179.7125244140625, :width 837.0000000000001, :height 1045.1023765996345}), :page 113}, :content {:text "每个函数调用都有自己的上下文"}, :properties {:color "yellow"}} {:id #uuid "63bc079d-1d56-456c-9361-ebf32137318c", :page 113, :position {:bounding {:x1 107.2249984741211, :y1 226.41253662109375, :x2 606.9625244140625, :y2 244.8125, :width 837.0000000000001, :height 1045.1023765996345}, :rects ({:x1 107.2249984741211, :y1 226.41253662109375, :x2 606.9625244140625, :y2 244.8125, :width 837.0000000000001, :height 1045.1023765996345}), :page 113}, :content {:text "上下文中的代码在执行的时候，会创建变量对象的一个作用域链（scope chain）"}, :properties {:color "yellow"}} {:id #uuid "63bc07af-6caa-4ed9-ac8f-1d50b0b85dd9", :page 113, :position {:bounding {:x1 0, :y1 124.80000305175781, :x2 729.2318725585938, :y2 309.9125061035156, :width 837.0000000000001, :height 1045.1023765996345}, :rects ({:x1 0, :y1 124.80000305175781, :x2 0, :y2 147.20000457763672, :width 837.0000000000001, :height 1045.1023765996345} {:x1 165.5148162841797, :y1 269.7624969482422, :x2 729.2318725585938, :y2 288.1625061035156, :width 837.0000000000001, :height 1045.1023765996345} {:x1 78.0999984741211, :y1 291.51251220703125, :x2 469.51055908203125, :y2 309.9125061035156, :width 837.0000000000001, :height 1045.1023765996345}), :page 113}, :content {:text "如果上下文是函数，则其活动对象（activation object）用作变量对象。活动对象最初只有一个定义变量：arguments。（全局上下文中没有这个变量。）"}, :properties {:color "yellow"}} {:id #uuid "63bc07c4-cb75-47f4-8b43-1d688ef70add", :page 113, :position {:bounding {:x1 0, :y1 156.8000030517578, :x2 730.1630249023438, :y2 353.2250061035156, :width 837.0000000000001, :height 1045.1023765996345}, :rects ({:x1 0, :y1 156.8000030517578, :x2 0, :y2 179.1999969482422, :width 837.0000000000001, :height 1045.1023765996345} {:x1 556.2821044921875, :y1 313.1625061035156, :x2 730.1630249023438, :y2 331.5625, :width 837.0000000000001, :height 1045.1023765996345} {:x1 78.125, :y1 334.82501220703125, :x2 296.6136474609375, :y2 353.2250061035156, :width 837.0000000000001, :height 1045.1023765996345}), :page 113}, :content {:text "全局上下文的变量对象始终是作用域链的最后一个变量对象。"}, :properties {:color "yellow"}} {:id #uuid "63bc0863-6127-4217-ae8f-1a0f1858c348", :page 113, :position {:bounding {:x1 0, :y1 396.8000030517578, :x2 729.7572021484375, :y2 657.3500366210938, :width 837.0000000000001, :height 1045.1023765996345}, :rects ({:x1 0, :y1 396.8000030517578, :x2 0, :y2 419.20001220703125, :width 837.0000000000001, :height 1045.1023765996345} {:x1 513.9537963867188, :y1 615.2125244140625, :x2 729.7572021484375, :y2 633.6125183105469, :width 837.0000000000001, :height 1045.1023765996345} {:x1 78.125, :y1 638.9500122070312, :x2 367.08782958984375, :y2 657.3500366210938, :width 837.0000000000001, :height 1045.1023765996345}), :page 113}, :content {:text "这个函数内部之所以能够访问变量 color，就是因为可以在作用域链中找到它。"}, :properties {:color "yellow"}} {:id #uuid "63bc088e-11af-43a8-8ca1-222f83f972da", :page 114, :position {:bounding {:x1 0, :y1 117.96249389648438, :x2 759.1929321289062, :y2 259.1999816894531, :width 837.0000000000001, :height 1045.1023765996345}, :rects ({:x1 314.5488586425781, :y1 117.96249389648438, :x2 759.1929321289062, :y2 136.36248779296875, :width 837.0000000000001, :height 1045.1023765996345} {:x1 108.51250457763672, :y1 139.63751220703125, :x2 165.857421875, :y2 158.03750610351562, :width 837.0000000000001, :height 1045.1023765996345} {:x1 0, :y1 236.80001831054688, :x2 0, :y2 259.1999816894531, :width 837.0000000000001, :height 1045.1023765996345}), :page 114}, :content {:text "全局上下文、changeColor()的局部上下文和 swapColors()的局部上下文。"}, :properties {:color "yellow"}} {:id #uuid "63bc089b-b1a8-4924-89a3-720a4041840f", :page 114, :position {:bounding {:x1 0, :y1 183.06253051757812, :x2 759.8417358398438, :y2 307.1999816894531, :width 837.0000000000001, :height 1045.1023765996345}, :rects ({:x1 656.9008178710938, :y1 183.06253051757812, :x2 759.8417358398438, :y2 201.46249389648438, :width 837.0000000000001, :height 1045.1023765996345} {:x1 108.51250457763672, :y1 206.80001831054688, :x2 470.88238525390625, :y2 225.20004272460938, :width 837.0000000000001, :height 1045.1023765996345} {:x1 0, :y1 284.8000183105469, :x2 0, :y2 307.1999816894531, :width 837.0000000000001, :height 1045.1023765996345}), :page 114}, :content {:text "。全局上下文和 changeColor()的局部上下文都无法访问到 tempColor"}, :properties {:color "yellow"}} {:id #uuid "63bc08c4-f2cf-4318-8519-82f41fba50e2", :page 114, :position {:bounding {:x1 0, :y1 348.80001068115234, :x2 760.5597534179688, :y2 537.3000106811523, :width 837.0000000000001, :height 1045.1023765996345}, :rects ({:x1 0, :y1 348.80001068115234, :x2 0, :y2 371.2000045776367, :width 837.0000000000001, :height 1045.1023765996345} {:x1 731.4217529296875, :y1 497.23751068115234, :x2 760.5597534179688, :y2 515.6375350952148, :width 837.0000000000001, :height 1045.1023765996345} {:x1 108.5, :y1 518.8999862670898, :x2 383.80633544921875, :y2 537.3000106811523, :width 837.0000000000001, :height 1045.1023765996345}), :page 114}, :content {:text "但外部上下文无法访问内部上下文中的任何东西"}, :properties {:color "yellow"}} {:id #uuid "63bc08d5-5485-4359-9a24-1f7e7d232c03", :page 114, :position {:bounding {:x1 167.72500610351562, :y1 744.4249877929688, :x2 278.099365234375, :y2 762.8250122070312, :width 837.0000000000001, :height 1045.1023765996345}, :rects ({:x1 167.72500610351562, :y1 744.4249877929688, :x2 278.099365234375, :y2 762.8250122070312, :width 837.0000000000001, :height 1045.1023765996345}), :page 114}, :content {:text "作用域链增强"}, :properties {:color "yellow"}} {:id #uuid "63bc0913-b2b2-4f86-991f-2483259306bd", :page 114, :position {:bounding {:x1 282.4042663574219, :y1 801.4000396728516, :x2 615.7196655273438, :y2 819.8000411987305, :width 837.0000000000001, :height 1045.1023765996345}, :rects ({:x1 282.4042663574219, :y1 801.4000396728516, :x2 615.7196655273438, :y2 819.8000411987305, :width 837.0000000000001, :height 1045.1023765996345}), :page 114}, :content {:text "某些语句会导致在作用域链前端临时添加一个上下文"}, :properties {:color "yellow"}} {:id #uuid "63bc0923-246e-4534-a835-5b45d1adb370", :page 114, :position {:bounding {:x1 156.25, :y1 846.9000396728516, :x2 337.70001220703125, :y2 862.1000366210938, :width 837.0000000000001, :height 1045.1023765996345}, :rects ({:x1 156.25, :y1 846.9000396728516, :x2 337.70001220703125, :y2 862.1000366210938, :width 837.0000000000001, :height 1045.1023765996345}), :page 114}, :content {:text "try/catch 语句的 catch 块"}, :properties {:color "yellow"}} {:id #uuid "63bc0929-a5cc-4993-9d2e-13125171579a", :page 114, :position {:bounding {:x1 151.1750030517578, :y1 867.0750427246094, :x2 222.52444458007812, :y2 885.4750518798828, :width 837.0000000000001, :height 1045.1023765996345}, :rects ({:x1 151.1750030517578, :y1 867.0750427246094, :x2 222.52444458007812, :y2 885.4750518798828, :width 837.0000000000001, :height 1045.1023765996345}), :page 114}, :content {:text " with 语句"}, :properties {:color "yellow"}} {:id #uuid "63bc097b-86b5-4f3e-8ebe-9735bc15f303", :page 115, :position {:bounding {:x1 475.9375, :y1 254.72500610351562, :x2 714.2706298828125, :y2 268.5000305175781, :width 837.0000000000001, :height 1045.1023765996345}, :rects ({:x1 475.9375, :y1 254.72500610351562, :x2 714.2706298828125, :y2 268.5000305175781, :width 837.0000000000001, :height 1045.1023765996345}), :page 115}, :content {:text "location 会被添加到作用域链前端"}, :properties {:color "yellow"}} {:id #uuid "63bc098c-0f66-4e9b-9c2e-7d34d2f7b94b", :page 115, :position {:bounding {:x1 0, :y1 140.8000030517578, :x2 728.915771484375, :y2 316.54998779296875, :width 837.0000000000001, :height 1045.1023765996345}, :rects ({:x1 0, :y1 140.8000030517578, :x2 0, :y2 163.1999969482422, :width 837.0000000000001, :height 1045.1023765996345} {:x1 364.75, :y1 276.4750061035156, :x2 728.915771484375, :y2 294.875, :width 837.0000000000001, :height 1045.1023765996345} {:x1 78.125, :y1 298.1499938964844, :x2 373.1000061035156, :y2 316.54998779296875, :width 837.0000000000001, :height 1045.1023765996345}), :page 115}, :content {:text "with 语句中的代码引用变量 href 时，实际上引用的是 location.href，也就是自己变量对象的属性"}, :properties {:color "yellow"}} {:id #uuid "63bc0a34-2963-402d-ab4c-3ed9c11c6c84", :page 115, :position {:bounding {:x1 120.53702545166016, :y1 492.6125030517578, :x2 210.92041015625, :y2 515.8125152587891, :width 837.0000000000001, :height 1045.1023765996345}, :rects ({:x1 120.53702545166016, :y1 492.6125030517578, :x2 120.54054260253906, :y2 515.8125152587891, :width 837.0000000000001, :height 1045.1023765996345} {:x1 137.33750915527344, :y1 493.7875213623047, :x2 210.92041015625, :y2 512.1875152587891, :width 837.0000000000001, :height 1045.1023765996345}), :page 115}, :content {:text "变量声明"}, :properties {:color "yellow"}} {:id #uuid "63bc0a47-6c43-4097-9714-6dc2cfded1b8", :page 115, :position {:bounding {:x1 0, :y1 300.80001068115234, :x2 729.5149536132812, :y2 590.9125213623047, :width 837.0000000000001, :height 1045.1023765996345}, :rects ({:x1 0, :y1 300.80001068115234, :x2 0, :y2 323.20001220703125, :width 837.0000000000001, :height 1045.1023765996345} {:x1 179.83750915527344, :y1 551.4000091552734, :x2 729.5149536132812, :y2 569.8000030517578, :width 837.0000000000001, :height 1045.1023765996345} {:x1 78.125, :y1 572.5125274658203, :x2 150.9296417236328, :y2 590.9125213623047, :width 837.0000000000001, :height 1045.1023765996345}), :page 115}, :content {:text "ES6 不仅增加了 let 和 const 两个关键字，而且还让这两个关键字压倒性地超越 var成为首选。"}, :properties {:color "yellow"}} {:id #uuid "63bc0ad4-7a11-41bc-9bea-5bd8effd83e5", :page 115, :position {:bounding {:x1 107.2249984741211, :y1 619.0625152587891, :x2 499.93492126464844, :y2 637.4625091552734, :width 837.0000000000001, :height 1045.1023765996345}, :rects ({:x1 107.2249984741211, :y1 619.0625152587891, :x2 499.93492126464844, :y2 637.4625091552734, :width 837.0000000000001, :height 1045.1023765996345}), :page 115}, :content {:text "在使用 var 声明变量时，变量会被自动添加到最接近的上下文"}, :properties {:color "yellow"}} {:id #uuid "63bc0b02-d799-471d-9f4b-659f64cc4686", :page 115, :position {:bounding {:x1 0, :y1 364.7999954223633, :x2 754.0245116949081, :y2 696.7875061035156, :width 855.9999999999999, :height 1068.8263254113344}, :rects ({:x1 0, :y1 364.7999954223633, :x2 0, :y2 387.1999969482422, :width 855.9999999999999, :height 1068.8263254113344} {:x1 532.8729614019394, :y1 655.4250030517578, :x2 754.0245116949081, :y2 674.625, :width 855.9999999999999, :height 1068.8263254113344} {:x1 79.89999997615814, :y1 677.5875091552734, :x2 318.3863891363144, :y2 696.7875061035156, :width 855.9999999999999, :height 1068.8263254113344}), :page 115}, :content {:text "如果变量未经声明就被初始化了，那么它就会自动被添加到全局上下文"}, :properties {:color "yellow"}} {:id #uuid "63bc0be4-bdca-4f6e-9e89-c813c1010c42", :page 116, :position {:bounding {:x1 0, :y1 268.67501068115234, :x2 766.480520606041, :y2 339.2000198364258, :width 855.9999999999999, :height 1068.8263254113344}, :rects ({:x1 172.95000302791595, :y1 268.67501068115234, :x2 766.480520606041, :y2 287.87500762939453, :width 855.9999999999999, :height 1068.8263254113344} {:x1 139.14999997615814, :y1 270.73751068115234, :x2 165.47080075740814, :y2 284.8250045776367, :width 855.9999999999999, :height 1068.8263254113344} {:x1 103.56249845027924, :y1 290.8375015258789, :x2 188.43874204158783, :y2 310.0374984741211, :width 855.9999999999999, :height 1068.8263254113344} {:x1 0, :y1 316.80001068115234, :x2 0, :y2 339.2000198364258, :width 855.9999999999999, :height 1068.8263254113344}), :page 116}, :content {:text "var 声明会被拿到函数或全局作用域的顶部，位于作用域中所有代码之前。这个现象叫作“提升”（hoisting）。"}, :properties {:color "yellow"}} {:id #uuid "63bc0c2d-e78e-445e-be5a-8893dcf9e022", :page 117, :position {:bounding {:x1 108.06249845027924, :y1 344.8249816894531, :x2 517.2828124761581, :y2 364.0249938964844, :width 855.9999999999999, :height 1068.8263254113344}, :rects ({:x1 139.05000913143158, :y1 344.8249816894531, :x2 154.37689816951752, :y2 364.0249938964844, :width 855.9999999999999, :height 1068.8263254113344} {:x1 189.37500607967377, :y1 344.8249816894531, :x2 517.2828124761581, :y2 364.0249938964844, :width 855.9999999999999, :height 1068.8263254113344} {:x1 108.06249845027924, :y1 346.8874816894531, :x2 134.25891721248627, :y2 360.9750061035156, :width 855.9999999999999, :height 1068.8263254113344} {:x1 158.48750913143158, :y1 346.8874816894531, :x2 191.07500302791595, :y2 360.9750061035156, :width 855.9999999999999, :height 1068.8263254113344}), :page 117}, :content {:text "let 与 var 的另一个不同之处是在同一作用域内不能声明两次"}, :properties {:color "yellow"}} {:id #uuid "63bc0c8d-0699-4505-85da-64170ce49791", :page 117, :position {:bounding {:x1 154.40859067440033, :y1 780.5, :x2 467.39980161190033, :y2 799.7000122070312, :width 855.9999999999999, :height 1068.8263254113344}, :rects ({:x1 154.40859067440033, :y1 780.5, :x2 467.39980161190033, :y2 799.7000122070312, :width 855.9999999999999, :height 1068.8263254113344}), :page 117}, :content {:text "在其生命周期的任何时候都不能再重新赋予新值"}, :properties {:color "yellow"}} {:id #uuid "63bc0cdb-1f30-426e-b3b6-31d840880b9e", :page 118, :position {:bounding {:x1 0, :y1 330.4625015258789, :x2 776.8205932378769, :y2 451.19998931884766, :width 855.9999999999999, :height 1068.8263254113344}, :rects ({:x1 470.7845824956894, :y1 330.4625015258789, :x2 578.4499877691269, :y2 349.66251373291016, :width 855.9999999999999, :height 1068.8263254113344} {:x1 627.7749999761581, :y1 330.4625015258789, :x2 776.8205932378769, :y2 349.66251373291016, :width 855.9999999999999, :height 1068.8263254113344} {:x1 579.2250121831894, :y1 332.5250015258789, :x2 622.9825195074081, :y2 346.6124954223633, :width 855.9999999999999, :height 1068.8263254113344} {:x1 110.98750150203705, :y1 352.62500762939453, :x2 200.4054321050644, :y2 371.8250198364258, :width 855.9999999999999, :height 1068.8263254113344} {:x1 0, :y1 428.8000259399414, :x2 0, :y2 451.19998931884766, :width 855.9999999999999, :height 1068.8263254113344}), :page 118}, :content {:text "，赋值为对象的 const 变量不能再被重新赋值为其他引用值"}, :properties {:color "yellow"}} {:id #uuid "63bc0db2-6a64-4939-a798-94f1043416b7", :page 119, :position {:bounding {:x1 132.28749692440033, :y1 837.1125335693359, :x2 220.02939450740814, :y2 858.7125396728516, :width 855.9999999999999, :height 1068.8263254113344}, :rects ({:x1 132.28749692440033, :y1 837.1125335693359, :x2 220.02939450740814, :y2 858.7125396728516, :width 855.9999999999999, :height 1068.8263254113344}), :page 119}, :content {:text "垃圾回收"}, :properties {:color "yellow"}} {:id #uuid "63bc0dc5-d9c7-411d-b66a-55ab13e4625a", :page 120, :position {:bounding {:x1 171.53749692440033, :y1 291.7375183105469, :x2 246.81030881404877, :y2 310.13751220703125, :width 855.9999999999999, :height 1068.8263254113344}, :rects ({:x1 171.53749692440033, :y1 291.7375183105469, :x2 246.81030881404877, :y2 310.13751220703125, :width 855.9999999999999, :height 1068.8263254113344}), :page 120}, :content {:text "标记清理"}, :properties {:color "yellow"}} {:id #uuid "63bc0f52-6311-4d99-9bba-e863b361e33e", :page 120, :position {:bounding {:x1 0, :y1 476.79998779296875, :x2 776.7411254644394, :y2 523.7625122070312, :width 855.9999999999999, :height 1068.8263254113344}, :rects ({:x1 0, :y1 476.79998779296875, :x2 0, :y2 499.20001220703125, :width 855.9999999999999, :height 1068.8263254113344} {:x1 140.75000607967377, :y1 482.4000244140625, :x2 776.7411254644394, :y2 501.60003662109375, :width 855.9999999999999, :height 1068.8263254113344} {:x1 110.99999845027924, :y1 504.5625, :x2 629.9047836065292, :y2 523.7625122070312, :width 855.9999999999999, :height 1068.8263254113344}), :page 120}, :content {:text "垃圾回收程序运行的时候，会标记内存中存储的所有变量（记住，标记方法有很多种）。然后，它会将所有在上下文中的变量，以及被在上下文中的变量引用的变量的标记去掉。"}, :properties {:color "yellow"}} {:id #uuid "63bc0f5e-7bef-4c35-91f6-d02818ac434d", :page 120, :position {:bounding {:x1 171.53749692440033, :y1 631.3500213623047, :x2 246.81030881404877, :y2 649.7500152587891, :width 855.9999999999999, :height 1068.8263254113344}, :rects ({:x1 171.53749692440033, :y1 631.3500213623047, :x2 246.81030881404877, :y2 649.7500152587891, :width 855.9999999999999, :height 1068.8263254113344}), :page 120}, :content {:text "引用计数"}, :properties {:color "yellow"}} {:id #uuid "63bc1137-3920-4f59-b512-d471262495f2", :page 120, :position {:bounding {:x1 0, :y1 604.8000030517578, :x2 776.9361938238144, :y2 730.2250213623047, :width 855.9999999999999, :height 1068.8263254113344}, :rects ({:x1 0, :y1 604.8000030517578, :x2 0, :y2 627.2000274658203, :width 855.9999999999999, :height 1068.8263254113344} {:x1 568.3040527105331, :y1 688.8500213623047, :x2 776.9361938238144, :y2 708.0500335693359, :width 855.9999999999999, :height 1068.8263254113344} {:x1 110.98750150203705, :y1 711.0250091552734, :x2 242.92500913143158, :y2 730.2250213623047, :width 855.9999999999999, :height 1068.8263254113344}), :page 120}, :content {:text "如果同一个值又被赋给另一个变量，那么引用数加 1"}, :properties {:color "yellow"}} {:id #uuid "63bc1140-2c06-4469-b08e-bf62922610a3", :page 120, :position {:bounding {:x1 317.42978513240814, :y1 711.0250091552734, :x2 731.7375243902206, :y2 730.2250213623047, :width 855.9999999999999, :height 1068.8263254113344}, :rects ({:x1 317.42978513240814, :y1 711.0250091552734, :x2 731.7375243902206, :y2 730.2250213623047, :width 855.9999999999999, :height 1068.8263254113344}), :page 120}, :content {:text "如果保存对该值引用的变量被其他值给覆盖了，那么引用数减 1"}, :properties {:color "yellow"}} {:id #uuid "63bc115c-f35c-42d7-a1e4-8e43fa7d53bf", :page 120, :position {:bounding {:x1 0, :y1 668.8000259399414, :x2 773.2894653081894, :y2 819.5750274658203, :width 855.9999999999999, :height 1068.8263254113344}, :rects ({:x1 0, :y1 668.8000259399414, :x2 0, :y2 691.2000274658203, :width 855.9999999999999, :height 1068.8263254113344} {:x1 702.9122680425644, :y1 777.6000213623047, :x2 773.2894653081894, :y2 796.8000335693359, :width 855.9999999999999, :height 1068.8263254113344} {:x1 110.96249997615814, :y1 800.3750305175781, :x2 541.5000365972519, :y2 819.5750274658203, :width 855.9999999999999, :height 1068.8263254113344}), :page 120}, :content {:text "所谓循环引用，就是对象 A 有一个指针指向对象 B，而对象 B 也引用了对象 A"}, :properties {:color "yellow"}} {:id #uuid "63bc11cf-c53c-4d11-81be-01171fafb985", :page 121, :position {:bounding {:x1 0, :y1 268.8000183105469, :x2 745.3426269292831, :y2 499.9875183105469, :width 855.9999999999999, :height 1068.8263254113344}, :rects ({:x1 0, :y1 268.8000183105469, :x2 0, :y2 291.20001220703125, :width 855.9999999999999, :height 1068.8263254113344} {:x1 109.64999997615814, :y1 458.625, :x2 745.3426269292831, :y2 477.82501220703125, :width 855.9999999999999, :height 1068.8263254113344} {:x1 79.87499845027924, :y1 480.7875061035156, :x2 154.4033569097519, :y2 499.9875183105469, :width 855.9999999999999, :height 1068.8263254113344}), :page 121}, :content {:text "为避免类似的循环引用问题，应该在确保不使用的情况下切断原生 JavaScript 对象与 DOM 元素之间的连接。"}, :properties {:color "yellow"}} {:id #uuid "63bc11d8-86fd-4c8e-82e8-83f8ab1dc595", :page 121, :position {:bounding {:x1 140.46249997615814, :y1 710.8875122070312, :x2 178.10515439510345, :y2 729.2875061035156, :width 855.9999999999999, :height 1068.8263254113344}, :rects ({:x1 140.46249997615814, :y1 710.8875122070312, :x2 178.10515439510345, :y2 729.2875061035156, :width 855.9999999999999, :height 1068.8263254113344}), :page 121}, :content {:text "性能"}, :properties {:color "yellow"}} {:id #uuid "63bc1231-86f5-4e72-8ad3-d132f0d86743", :page 121, :position {:bounding {:x1 0, :y1 428.8000011444092, :x2 746.9793990850449, :y2 787.5874938964844, :width 855.9999999999999, :height 1068.8263254113344}, :rects ({:x1 0, :y1 428.8000011444092, :x2 0, :y2 451.20000076293945, :width 855.9999999999999, :height 1068.8263254113344} {:x1 109.66250455379486, :y1 746.2250061035156, :x2 746.9793990850449, :y2 765.4250183105469, :width 855.9999999999999, :height 1068.8263254113344} {:x1 79.89999997615814, :y1 768.3875122070312, :x2 199.15193784236908, :y2 787.5874938964844, :width 855.9999999999999, :height 1068.8263254113344}), :page 121}, :content {:text "垃圾回收程序会周期性运行，如果内存中分配了很多变量，则可能造成性能损失，因此垃圾回收的时间调度很重要。"}, :properties {:color "yellow"}} {:id #uuid "63bc127a-7518-4648-b954-a8b05c39fe44", :page 121, :position {:bounding {:x1 0, :y1 524.8000030517578, :x2 746.4758666753769, :y2 920.75, :width 855.9999999999999, :height 1068.8263254113344}, :rects ({:x1 0, :y1 524.8000030517578, :x2 0, :y2 547.1999969482422, :width 855.9999999999999, :height 1068.8263254113344} {:x1 92.80444180965424, :y1 879.2875061035156, :x2 746.4758666753769, :y2 898.4875183105469, :width 855.9999999999999, :height 1068.8263254113344} {:x1 79.91250455379486, :y1 901.5500183105469, :x2 124.5533355474472, :y2 920.75, :width 855.9999999999999, :height 1068.8263254113344}), :page 121}, :content {:text "一次完整的垃圾回收之后，V8 的堆增长策略会根据活跃对象的数量外加一些余量来确定何时再次垃圾回收"}, :properties {:color "yellow"}} {:id #uuid "63bc1292-b061-4e55-99f8-d4fe3ef100a3", :page 122, :position {:bounding {:x1 0, :y1 165.63751220703125, :x2 777.7290405035019, :y2 291.20001220703125, :width 855.9999999999999, :height 1068.8263254113344}, :rects ({:x1 140.73750913143158, :y1 165.63751220703125, :x2 777.7290405035019, :y2 184.8375244140625, :width 855.9999999999999, :height 1068.8263254113344} {:x1 110.97500455379486, :y1 187.27499389648438, :x2 230.16341245174408, :y2 206.47500610351562, :width 855.9999999999999, :height 1068.8263254113344} {:x1 0, :y1 268.79998779296875, :x2 0, :y2 291.20001220703125, :width 855.9999999999999, :height 1068.8263254113344}), :page 122}, :content {:text "IE7 发布后，JavaScript 引擎的垃圾回收程序被调优为动态改变分配变量、字面量或数组槽位等会触发垃圾回收的阈值"}, :properties {:color "yellow"}} {:id #uuid "63bc1371-87ef-49b5-b7d7-7db45049d022", :page 122, :position {:bounding {:x1 154.3477691411972, :y1 371.2875061035156, :x2 246.81030881404877, :y2 395.2875061035156, :width 855.9999999999999, :height 1068.8263254113344}, :rects ({:x1 154.3477691411972, :y1 371.2875061035156, :x2 154.35127866268158, :y2 395.2875061035156, :width 855.9999999999999, :height 1068.8263254113344} {:x1 171.53749692440033, :y1 373.23751068115234, :x2 246.81030881404877, :y2 391.63751220703125, :width 855.9999999999999, :height 1068.8263254113344}), :page 122}, :content {:text "内存管理"}, :properties {:color "yellow"}} {:id #uuid "63bc1386-0ce9-4e25-9402-5312e820eda5", :page 122, :position {:bounding {:x1 0, :y1 476.8000030517578, :x2 777.0930541753769, :y2 582.9875183105469, :width 855.9999999999999, :height 1068.8263254113344}, :rects ({:x1 0, :y1 476.8000030517578, :x2 0, :y2 499.20001220703125, :width 855.9999999999999, :height 1068.8263254113344} {:x1 0, :y1 492.8000030517578, :x2 0, :y2 515.2000122070312, :width 855.9999999999999, :height 1068.8263254113344} {:x1 508.762518286705, :y1 519.4875183105469, :x2 777.0930541753769, :y2 538.6875, :width 855.9999999999999, :height 1068.8263254113344} {:x1 568.2375243902206, :y1 541.625, :x2 776.8808959722519, :y2 560.8250122070312, :width 855.9999999999999, :height 1068.8263254113344} {:x1 110.98750150203705, :y1 541.6500244140625, :x2 528.2743362188339, :y2 560.8500061035156, :width 855.9999999999999, :height 1068.8263254113344} {:x1 534.3500121831894, :y1 543.6875, :x2 569.3855346441269, :y2 557.7750244140625, :width 855.9999999999999, :height 1068.8263254113344} {:x1 110.97500455379486, :y1 563.7875061035156, :x2 181.02901303768158, :y2 582.9875183105469, :width 855.9999999999999, :height 1068.8263254113344}), :page 122}, :content {:text "优化内存占用的最佳手段就是保证在执行代码时只保存必要的数据。如果数据不再必要，那么把它设置为 null，从而释放其引用。这也可以叫作解除引用"}, :properties {:color "yellow"}} {:id #uuid "63bc1433-5260-4691-989f-15529ed2a735", :page 122, :position {:bounding {:x1 0, :y1 716.8000183105469, :x2 777.1588500738144, :y2 891.8999938964844, :width 855.9999999999999, :height 1068.8263254113344}, :rects ({:x1 0, :y1 716.8000183105469, :x2 0, :y2 739.2000122070312, :width 855.9999999999999, :height 1068.8263254113344} {:x1 334.46387326717377, :y1 850.5375061035156, :x2 353.12500607967377, :y2 869.7375183105469, :width 855.9999999999999, :height 1068.8263254113344} {:x1 464.200018286705, :y1 850.5375061035156, :x2 777.1588500738144, :y2 869.7375183105469, :width 855.9999999999999, :height 1068.8263254113344} {:x1 355.200018286705, :y1 852.6000061035156, :x2 460.0724548101425, :y2 866.6875305175781, :width 855.9999999999999, :height 1068.8263254113344} {:x1 110.97500455379486, :y1 872.7000427246094, :x2 304.7126144170761, :y2 891.8999938964844, :width 855.9999999999999, :height 1068.8263254113344}), :page 122}, :content {:text "但 globalPerson 是一个全局变量，应该在不再需要时手动解除其引用，最后一行就是这么做的"}, :properties {:color "yellow"}} {:id #uuid "63bc1436-4560-44ea-8fa9-a7454704f510", :page 122, :position {:bounding {:x1 0, :y1 748.8000183105469, :x2 778.1561645269394, :y2 936.3125305175781, :width 855.9999999999999, :height 1068.8263254113344}, :rects ({:x1 0, :y1 748.8000183105469, :x2 0, :y2 771.2000122070312, :width 855.9999999999999, :height 1068.8263254113344} {:x1 585.4392455816269, :y1 894.8625183105469, :x2 778.1561645269394, :y2 914.0625305175781, :width 855.9999999999999, :height 1068.8263254113344} {:x1 110.98750150203705, :y1 917.1125183105469, :x2 528.2743362188339, :y2 936.3125305175781, :width 855.9999999999999, :height 1068.8263254113344}), :page 122}, :content {:text "解除引用的关键在于确保相关的值已经不在上下文里了，因此它在下次垃圾回收时会被回收。"}, :properties {:color "yellow"}} {:id #uuid "63bc1496-38a9-4e29-b833-e60c51387f89", :page 122, :position {:bounding {:x1 0, :y1 684.8000183105469, :x2 776.4281371831894, :y2 847.5750427246094, :width 855.9999999999999, :height 1068.8263254113344}, :rects ({:x1 0, :y1 684.8000183105469, :x2 0, :y2 707.2000122070312, :width 855.9999999999999, :height 1068.8263254113344} {:x1 590.7803100347519, :y1 806.1250305175781, :x2 605.5787719488144, :y2 825.3250427246094, :width 855.9999999999999, :height 1068.8263254113344} {:x1 701.9499877691269, :y1 806.1250305175781, :x2 776.4281371831894, :y2 825.3250427246094, :width 855.9999999999999, :height 1068.8263254113344} {:x1 604.6750243902206, :y1 808.1875305175781, :x2 704.9624999761581, :y2 822.2749938964844, :width 855.9999999999999, :height 1068.8263254113344} {:x1 110.98750150203705, :y1 828.3750305175781, :x2 244.60039365291595, :y2 847.5750427246094, :width 855.9999999999999, :height 1068.8263254113344} {:x1 349.46249997615814, :y1 828.3750305175781, :x2 364.33749997615814, :y2 847.5750427246094, :width 855.9999999999999, :height 1068.8263254113344} {:x1 461.1124938726425, :y1 828.3750305175781, :x2 476.33701169490814, :y2 847.5750427246094, :width 855.9999999999999, :height 1068.8263254113344} {:x1 598.0000365972519, :y1 828.3750305175781, :x2 761.9035400152206, :y2 847.5750427246094, :width 855.9999999999999, :height 1068.8263254113344} {:x1 247.96249997615814, :y1 830.4375305175781, :x2 352.83493649959564, :y2 844.5249938964844, :width 855.9999999999999, :height 1068.8263254113344} {:x1 363.83749997615814, :y1 830.4375305175781, :x2 459.98789060115814, :y2 844.5249938964844, :width 855.9999999999999, :height 1068.8263254113344} {:x1 479.700018286705, :y1 830.4375305175781, :x2 601.9298461675644, :y2 844.5249938964844, :width 855.9999999999999, :height 1068.8263254113344}), :page 122}, :content {:text "，localPerson 作为函数值被返回，并被赋值给 globalPerson。localPerson 在 createPerson()执行完成超出上下文后会"}, :properties {:color "green"}} {:id #uuid "63bc15e5-dfca-4a4e-95b5-31706aa5c48d", :page 123, :position {:bounding {:x1 126.18749845027924, :y1 171.3624973297119, :x2 236.60890805721283, :y2 186.56250953674316, :width 855.9999999999999, :height 1068.8263254113344}, :rects ({:x1 126.18749845027924, :y1 171.3624973297119, :x2 236.60890805721283, :y2 186.56250953674316, :width 855.9999999999999, :height 1068.8263254113344}), :page 123}, :content {:text "隐藏类和删除操作"}, :properties {:color "yellow"}} {:id #uuid "63bc160b-4f6d-46fd-869a-e6e99031f8a5", :page 123, :position {:bounding {:x1 0, :y1 620.7999992370605, :x2 745.7311156988144, :y2 977.9125061035156, :width 855.9999999999999, :height 1068.8263254113344}, :rects ({:x1 0, :y1 620.7999992370605, :x2 0, :y2 643.2000007629395, :width 855.9999999999999, :height 1068.8263254113344} {:x1 303.5004333257675, :y1 936.5375061035156, :x2 527.1133788824081, :y2 955.7375183105469, :width 855.9999999999999, :height 1068.8263254113344} {:x1 566.9250243902206, :y1 936.5375061035156, :x2 745.7311156988144, :y2 955.7375183105469, :width 855.9999999999999, :height 1068.8263254113344} {:x1 533.1250365972519, :y1 938.6000061035156, :x2 568.0586303472519, :y2 952.6875, :width 855.9999999999999, :height 1068.8263254113344} {:x1 79.89999997615814, :y1 958.7124938964844, :x2 512.1374877691269, :y2 977.9125061035156, :width 855.9999999999999, :height 1068.8263254113344}), :page 123}, :content {:text "最佳实践是把不想要的属性设置为 null。这样可以保持隐藏类不变和继续共享，同时也能达到删除引用值供垃圾回收程序回收的效果"}, :properties {:color "yellow"}} {:id #uuid "63bc165a-b480-45c0-a458-5a3e3ff096b1", :page 124, :position {:bounding {:x1 140.75000607967377, :y1 354.7749938964844, :x2 528.2497924566269, :y2 373.9750061035156, :width 855.9999999999999, :height 1068.8263254113344}, :rects ({:x1 140.75000607967377, :y1 354.7749938964844, :x2 528.2497924566269, :y2 373.9750061035156, :width 855.9999999999999, :height 1068.8263254113344}), :page 124}, :content {:text "意外声明全局变量是最常见但也最容易修复的内存泄漏问题"}, :properties {:color "yellow"}} {:id #uuid "63bc1676-162a-4c17-a2c9-ce3fca2948dc", :page 124, :position {:bounding {:x1 140.75000607967377, :y1 544.7249984741211, :x2 751.8617004156113, :y2 563.9250106811523, :width 855.9999999999999, :height 1068.8263254113344}, :rects ({:x1 140.75000607967377, :y1 544.7249984741211, :x2 751.8617004156113, :y2 563.9250106811523, :width 855.9999999999999, :height 1068.8263254113344}), :page 124}, :content {:text "定时器也可能会悄悄地导致内存泄漏。下面的代码中，定时器的回调通过闭包引用了外部变量"}, :properties {:color "yellow"}} {:id #uuid "63bc1782-8e34-468e-a63e-a1e014cae268", :page 124, :position {:bounding {:x1 140.73750913143158, :y1 683.0374984741211, :x2 492.460760474205, :y2 702.2375106811523, :width 855.9999999999999, :height 1068.8263254113344}, :rects ({:x1 140.73750913143158, :y1 683.0374984741211, :x2 492.460760474205, :y2 702.2375106811523, :width 855.9999999999999, :height 1068.8263254113344}), :page 124}, :content {:text "使用 JavaScript 闭包很容易在不知不觉间造成内存泄漏"}, :properties {:color "yellow"}} {:id #uuid "63bc17c1-c32e-42ed-bc4c-f36e4f02be04", :page 125, :position {:bounding {:x1 0, :y1 12.79998779296875, :x2 747.0685790777206, :y2 162.06253051757812, :width 855.9999999999999, :height 1068.8263254113344}, :rects ({:x1 0, :y1 12.79998779296875, :x2 0, :y2 35.20001220703125, :width 855.9999999999999, :height 1068.8263254113344} {:x1 554.3516601324081, :y1 120.69998168945312, :x2 747.0685790777206, :y2 139.89999389648438, :width 855.9999999999999, :height 1068.8263254113344} {:x1 79.89999997615814, :y1 142.86251831054688, :x2 643.2782348394394, :y2 162.06253051757812, :width 855.9999999999999, :height 1068.8263254113344}), :page 125}, :content {:text "如果有很多对象被初始化，然后一下子又都超出了作用域，那么浏览器就会采用更激进的方式调度垃圾回收程序运行"}, :properties {:color "yellow"}} {:id #uuid "63bc17e3-4c7e-4cfb-ba38-bb854d518fef", :page 125, :position {:bounding {:x1 0, :y1 220.8000030517578, :x2 747.0686248540878, :y2 418.87501525878906, :width 855.9999999999999, :height 1068.8263254113344}, :rects ({:x1 0, :y1 220.8000030517578, :x2 0, :y2 243.1999969482422, :width 855.9999999999999, :height 1068.8263254113344} {:x1 243.06178891658783, :y1 377.4250030517578, :x2 747.0686248540878, :y2 396.62501525878906, :width 855.9999999999999, :height 1068.8263254113344} {:x1 79.89999997615814, :y1 399.6750030517578, :x2 109.66055142879486, :y2 418.87501525878906, :width 855.9999999999999, :height 1068.8263254113344}), :page 125}, :content {:text "不要动态创建矢量对象，比如可以修改上面的函数，让它使用一个已有的矢量对象"}, :properties {:color "yellow"}} {:id #uuid "63bc1808-e17f-4aa7-80ed-fd865338a7ed", :page 125, :position {:bounding {:x1 0, :y1 364.8000183105469, :x2 753.2131713628769, :y2 594.1625061035156, :width 855.9999999999999, :height 1068.8263254113344}, :rects ({:x1 0, :y1 364.8000183105469, :x2 0, :y2 387.20001220703125, :width 855.9999999999999, :height 1068.8263254113344} {:x1 109.66250455379486, :y1 552.8000183105469, :x2 753.2131713628769, :y2 572, :width 855.9999999999999, :height 1068.8263254113344} {:x1 79.89999997615814, :y1 574.9624938964844, :x2 488.80332028865814, :y2 594.1625061035156, :width 855.9999999999999, :height 1068.8263254113344}), :page 125}, :content {:text "一个策略是使用对象池。在初始化的某一时刻，可以创建一个对象池，用来管理一组可回收的对象。应用程序可以向这个对象池请求一个对象、设置其属性、使用它"}, :properties {:color "yellow"}} {:id #uuid "63bc1853-a0b0-4d79-9872-cb88dbb70e15", :page 126, :position {:bounding {:x1 200.41078794002533, :y1 310.6499938964844, :x2 722.1050018072128, :y2 329.85003662109375, :width 855.9999999999999, :height 1068.8263254113344}, :rects ({:x1 200.41078794002533, :y1 310.6499938964844, :x2 722.1050018072128, :y2 329.85003662109375, :width 855.9999999999999, :height 1068.8263254113344}), :page 126}, :content {:text "可以在初始化时就创建一个大小够用的数组，从而避免上述先删除再创建的操作"}, :properties {:color "yellow"}} {:id #uuid "63bc1876-9120-4818-a83b-7ce170667e05", :page 126, :position {:bounding {:x1 163.36250913143158, :y1 476.08750915527344, :x2 207.18962705135345, :y2 497.68751525878906, :width 855.9999999999999, :height 1068.8263254113344}, :rects ({:x1 163.36250913143158, :y1 476.08750915527344, :x2 207.18962705135345, :y2 497.68751525878906, :width 855.9999999999999, :height 1068.8263254113344}), :page 126}, :content {:text "小结"}, :properties {:color "yellow"}} {:id #uuid "63bd5ef7-47b4-4519-a0ef-25e198499ea7", :page 128, :position {:bounding {:x1 0, :y1 332.8000183105469, :x2 827.4251098632812, :y2 465.00001525878906, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 0, :y1 332.8000183105469, :x2 0, :y2 355.2000198364258, :width 911.6666666666666, :height 1138.3333333333333} {:x1 498.21258544921875, :y1 421.4000244140625, :x2 827.4251098632812, :y2 441.4000244140625, :width 911.6666666666666, :height 1138.3333333333333} {:x1 118.19999694824219, :y1 445.00001525878906, :x2 423.84226989746094, :y2 465.00001525878906, :width 911.6666666666666, :height 1138.3333333333333}), :page 128}, :content {:text "在 ECMAScript 中，引用类型是把数据和功能组织到一起的结构，经常被人错误地称作“类”"}, :properties {:color "yellow"}} {:id #uuid "63bd5f3f-a101-4b6b-86e8-9b427b2a5bdc", :page 128, :position {:bounding {:x1 0, :y1 364.8000183105469, :x2 828.1057739257812, :y2 512.2125244140625, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 0, :y1 364.8000183105469, :x2 0, :y2 387.2000274658203, :width 911.6666666666666, :height 1138.3333333333333} {:x1 700.9190063476562, :y1 468.6000213623047, :x2 828.1057739257812, :y2 488.6000213623047, :width 911.6666666666666, :height 1138.3333333333333} {:x1 118.19999694824219, :y1 492.2125244140625, :x2 562.1099853515625, :y2 512.2125244140625, :width 911.6666666666666, :height 1138.3333333333333}), :page 128}, :content {:text "引用类型有时候也被称为对象定义，因为它们描述了自己的对象应有的属性和方法"}, :properties {:color "yellow"}} {:id #uuid "63bd5f4d-d314-4341-92a2-14522ea031c0", :page 128, :position {:bounding {:x1 152.33433532714844, :y1 852.9000244140625, :x2 228.14846801757812, :y2 883.3000183105469, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 152.33433532714844, :y1 852.9000244140625, :x2 152.33738708496094, :y2 883.3000183105469, :width 911.6666666666666, :height 1138.3333333333333} {:x1 174.10000610351562, :y1 856.0500183105469, :x2 228.14846801757812, :y2 878.4500122070312, :width 911.6666666666666, :height 1138.3333333333333}), :page 128}, :content {:text "Date"}, :properties {:color "yellow"}} {:id #uuid "63bd5f86-b6db-444c-a06c-c050c6b857ed", :page 129, :position {:bounding {:x1 398.8880920410156, :y1 128.6999969482422, :x2 636.5294799804688, :y2 148.6999969482422, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 398.8880920410156, :y1 128.6999969482422, :x2 636.5294799804688, :y2 148.6999969482422, :width 911.6666666666666, :height 1138.3333333333333}), :page 129}, :content {:text "创建的对象将保存当前日期和时间"}, :properties {:color "yellow"}} {:id #uuid "63bd6093-8db6-4e00-a459-c80320068578", :page 130, :position {:bounding {:x1 182.6999969482422, :y1 511.31251525878906, :x2 282.8625183105469, :y2 531.3125152587891, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 182.6999969482422, :y1 511.31251525878906, :x2 282.8625183105469, :y2 531.3125152587891, :width 911.6666666666666, :height 1138.3333333333333}), :page 130}, :content {:text "继承的方法"}, :properties {:color "yellow"}} {:id #uuid "63bd60af-148b-4768-b597-494f86b19a41", :page 130, :position {:bounding {:x1 0, :y1 524.8000030517578, :x2 827.1526489257812, :y2 616.4124908447266, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 0, :y1 524.8000030517578, :x2 0, :y2 547.1999969482422, :width 911.6666666666666, :height 1138.3333333333333} {:x1 464.20001220703125, :y1 574.0500030517578, :x2 827.1526489257812, :y2 594.0500030517578, :width 911.6666666666666, :height 1138.3333333333333} {:x1 464.20001220703125, :y1 574.8499908447266, :x2 507.8375244140625, :y2 589.8499908447266, :width 911.6666666666666, :height 1138.3333333333333} {:x1 556.2000122070312, :y1 574.8499908447266, :x2 691.8754272460938, :y2 589.8499908447266, :width 911.6666666666666, :height 1138.3333333333333} {:x1 118.1875, :y1 596.4124908447266, :x2 356.1204833984375, :y2 616.4124908447266, :width 911.6666666666666, :height 1138.3333333333333}), :page 130}, :content {:text "Date 类型的 toLocaleString()方法返回与浏览器运行的本地环境一致的日期和时间"}, :properties {:color "yellow"}} {:id #uuid "63bd60ba-2f68-4c3f-ba46-d3d95815cab6", :page 130, :position {:bounding {:x1 0, :y1 556.8000030517578, :x2 827.1926879882812, :y2 663.6125030517578, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 0, :y1 556.8000030517578, :x2 0, :y2 579.1999969482422, :width 911.6666666666666, :height 1138.3333333333333} {:x1 483.3999938964844, :y1 621.2500152587891, :x2 827.1926879882812, :y2 636.4499969482422, :width 911.6666666666666, :height 1138.3333333333333} {:x1 118.1875, :y1 643.6125030517578, :x2 426.5760803222656, :y2 663.6125030517578, :width 911.6666666666666, :height 1138.3333333333333}), :page 130}, :content {:text "toString()方法通常返回带时区信息的日期和时间，而时间也是以 24 小时制（0~23）表示的"}, :properties {:color "yellow"}} {:id #uuid "63bd60c7-b957-485d-b16d-683440657ca6", :page 130, :position {:bounding {:x1 148.1999969482422, :y1 823.5500183105469, :x2 828.7753295898438, :y2 838.75, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 148.1999969482422, :y1 823.5500183105469, :x2 828.7753295898438, :y2 838.75, :width 911.6666666666666, :height 1138.3333333333333}), :page 130}, :content {:text "Date 类型的 valueOf()方法根本就不返回字符串，这个方法被重写后返回的是日期的毫秒表示。"}, :properties {:color "yellow"}} {:id #uuid "63bd6104-68a8-4f04-a2eb-43c7b50922bc", :page 131, :position {:bounding {:x1 149.60000610351562, :y1 130.11248779296875, :x2 289.82501220703125, :y2 150.11248779296875, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 149.60000610351562, :y1 130.11248779296875, :x2 289.82501220703125, :y2 150.11248779296875, :width 911.6666666666666, :height 1138.3333333333333}), :page 131}, :content {:text "日期格式化方法"}, :properties {:color "yellow"}} {:id #uuid "63bd6117-1e9b-4b45-9bd3-5a798016310b", :page 131, :position {:bounding {:x1 149.60000610351562, :y1 459.55000019073486, :x2 315.3999938964844, :y2 485.1500062942505, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 189.60000610351562, :y1 459.55000019073486, :x2 197.5500030517578, :y2 485.1500062942505, :width 911.6666666666666, :height 1138.3333333333333} {:x1 149.60000610351562, :y1 461.41251850128174, :x2 315.3999938964844, :y2 481.41251850128174, :width 911.6666666666666, :height 1138.3333333333333}), :page 131}, :content {:text "日期/时间组件方法"}, :properties {:color "yellow"}} {:id #uuid "63bd6164-4c6b-47d6-950b-0837a7cdab5d", :page 132, :position {:bounding {:x1 174.10000610351562, :y1 553.4499969482422, :x2 255.24603271484375, :y2 575.8500213623047, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 174.10000610351562, :y1 553.4499969482422, :x2 255.24603271484375, :y2 575.8500213623047, :width 911.6666666666666, :height 1138.3333333333333}), :page 132}, :content {:text "RegExp"}, :properties {:color "yellow"}} {:id #uuid "63bd6233-647d-450b-a7c0-f113e829543f", :page 132, :position {:bounding {:x1 149.90000915527344, :y1 1023.2000427246094, :x2 609.26318359375, :y2 1043.2000427246094, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 149.90000915527344, :y1 1023.2000427246094, :x2 609.26318359375, :y2 1043.2000427246094, :width 911.6666666666666, :height 1138.3333333333333}), :page 132}, :content {:text "与其他语言中的正则表达式类似，所有元字符在模式中也必须转义"}, :properties {:color "yellow"}} {:id #uuid "63bd629a-232c-4b78-aa1d-0d2b6834b66f", :page 133, :position {:bounding {:x1 0, :y1 236.80001068115234, :x2 793.8576049804688, :y2 502.2999954223633, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 0, :y1 236.80001068115234, :x2 0, :y2 259.2000045776367, :width 911.6666666666666, :height 1138.3333333333333} {:x1 495.29754638671875, :y1 458.6124954223633, :x2 793.8576049804688, :y2 478.6124954223633, :width 911.6666666666666, :height 1138.3333333333333} {:x1 656, :y1 460.6500015258789, :x2 717.6375122070312, :y2 475.6500015258789, :width 911.6666666666666, :height 1138.3333333333333} {:x1 85.0875015258789, :y1 482.2999954223633, :x2 511.0049514770508, :y2 502.2999954223633, :width 911.6666666666666, :height 1138.3333333333333}), :page 133}, :content {:text "正则表达式也可以使用 RegExp 构造函数来创建，它接收两个参数：模式字符串和（可选的）标记字符串"}, :properties {:color "yellow"}} {:id #uuid "63bd62d4-33c8-458c-ae9e-638849f676e7", :page 133, :position {:bounding {:x1 0, :y1 364.8000030517578, :x2 794.7130126953125, :y2 689.0125122070312, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 0, :y1 364.8000030517578, :x2 0, :y2 387.1999969482422, :width 911.6666666666666, :height 1138.3333333333333} {:x1 620.8406372070312, :y1 645.3999938964844, :x2 794.7130126953125, :y2 665.3999938964844, :width 911.6666666666666, :height 1138.3333333333333} {:x1 85.0875015258789, :y1 669.0125122070312, :x2 244.2477798461914, :y2 689.0125122070312, :width 911.6666666666666, :height 1138.3333333333333}), :page 133}, :content {:text "所有元字符都必须二次转义，包括转义字符序列"}, :properties {:color "yellow"}} {:id #uuid "63bd62fe-148a-497b-8776-72675bf24cf4", :page 133, :position {:bounding {:x1 164.28753662109375, :y1 877.4000396728516, :x2 734.2178344726562, :y2 897.4000396728516, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 164.28753662109375, :y1 877.4000396728516, :x2 734.2178344726562, :y2 897.4000396728516, :width 911.6666666666666, :height 1138.3333333333333} {:x1 199.8000030517578, :y1 879.4500427246094, :x2 261.4375, :y2 894.4500427246094, :width 911.6666666666666, :height 1138.3333333333333}), :page 133}, :content {:text "使用 RegExp 也可以基于已有的正则表达式实例，并可选择性地修改它们的标记："}, :properties {:color "yellow"}} {:id #uuid "63bd6322-68b0-413f-8dc6-150213da96b7", :page 134, :position {:bounding {:x1 164.38299560546875, :y1 128.25000953674316, :x2 337.5375061035156, :y2 153.85000038146973, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 164.38299560546875, :y1 128.25000953674316, :x2 164.3865203857422, :y2 153.85000038146973, :width 911.6666666666666, :height 1138.3333333333333} {:x1 182.6999969482422, :y1 130.7999973297119, :x2 337.5375061035156, :y2 150.00000953674316, :width 911.6666666666666, :height 1138.3333333333333}), :page 134}, :content {:text "RegExp 实例属性"}, :properties {:color "yellow"}} {:id #uuid "63bd6403-0f59-4930-ab58-1ebaaaff423f", :page 134, :position {:bounding {:x1 182.6999969482422, :y1 869.1000366210938, :x2 337.5375061035156, :y2 888.2999877929688, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 182.6999969482422, :y1 869.1000366210938, :x2 337.5375061035156, :y2 888.2999877929688, :width 911.6666666666666, :height 1138.3333333333333}), :page 134}, :content {:text "RegExp 实例方法"}, :properties {:color "yellow"}} {:id #uuid "63bd6413-93f2-4196-bc7e-a75296d50d5b", :page 134, :position {:bounding {:x1 0, :y1 764.8000030517578, :x2 827.75, :y2 949.8125, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 0, :y1 764.8000030517578, :x2 0, :y2 787.1999969482422, :width 911.6666666666666, :height 1138.3333333333333} {:x1 148.1999969482422, :y1 907.4500122070312, :x2 827.75, :y2 927.4500122070312, :width 911.6666666666666, :height 1138.3333333333333} {:x1 202.1999969482422, :y1 908.25, :x2 202.6710968017578, :y2 923.25, :width 911.6666666666666, :height 1138.3333333333333} {:x1 337.3999938964844, :y1 908.25, :x2 388.25, :y2 923.25, :width 911.6666666666666, :height 1138.3333333333333} {:x1 118.19999694824219, :y1 929.8125, :x2 228.62612915039062, :y2 949.8125, :width 911.6666666666666, :height 1138.3333333333333}), :page 134}, :content {:text "RegExp 实例的主要方法是 exec()，主要用于配合捕获组使用。这个方法只接收一个参数，即要应用模式的字符串"}, :properties {:color "yellow"}} {:id #uuid "63bd6493-fbf9-4cd8-ae2c-df77963b1134", :page 135, :position {:bounding {:x1 0, :y1 204.7999973297119, :x2 794.4777221679688, :y2 415.1000003814697, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 0, :y1 204.7999973297119, :x2 0, :y2 227.20000648498535, :width 911.6666666666666, :height 1138.3333333333333} {:x1 116.80000305175781, :y1 371.4125003814697, :x2 794.4777221679688, :y2 391.4125003814697, :width 911.6666666666666, :height 1138.3333333333333} {:x1 391.3999938964844, :y1 373.45000648498535, :x2 442.348876953125, :y2 388.45000648498535, :width 911.6666666666666, :height 1138.3333333333333} {:x1 85.0999984741211, :y1 395.1000003814697, :x2 650.0676879882812, :y2 415.1000003814697, :width 911.6666666666666, :height 1138.3333333333333} {:x1 358.1000061035156, :y1 397.1500186920166, :x2 409.04888916015625, :y2 412.1500186920166, :width 911.6666666666666, :height 1138.3333333333333}), :page 135}, :content {:text "如果模式设置了全局标记，则每次调用 exec()方法会返回一个匹配的信息。如果没有设置全局标记，则无论对同一个字符串调用多少次 exec()，也只会返回第一个匹配的信息。"}, :properties {:color "yellow"}} {:id #uuid "63bd64f1-5131-4966-951e-701a7454ae2e", :page 135, :position {:bounding {:x1 116.78750610351562, :y1 669.0125122070312, :x2 762.66015625, :y2 689.0125122070312, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 116.78750610351562, :y1 669.0125122070312, :x2 762.66015625, :y2 689.0125122070312, :width 911.6666666666666, :height 1138.3333333333333}), :page 135}, :content {:text "如果在这个模式上设置了 g 标记，则每次调用 exec()都会在字符串中向前搜索下一个匹配项"}, :properties {:color "yellow"}} {:id #uuid "63bd653b-f1c2-4e6c-a8dd-6c6eb5d130bd", :page 135, :position {:bounding {:x1 0, :y1 684.8000183105469, :x2 794.34521484375, :y2 1026.3125305175781, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 0, :y1 684.8000183105469, :x2 0, :y2 707.2000122070312, :width 911.6666666666666, :height 1138.3333333333333} {:x1 116.80000305175781, :y1 982.7000427246094, :x2 794.34521484375, :y2 1002.7000427246094, :width 911.6666666666666, :height 1138.3333333333333} {:x1 407.3000183105469, :y1 984.7500305175781, :x2 458.1499938964844, :y2 999.7500305175781, :width 911.6666666666666, :height 1138.3333333333333} {:x1 85.0999984741211, :y1 1006.3125305175781, :x2 180.25552368164062, :y2 1026.3125305175781, :width 911.6666666666666, :height 1138.3333333333333}), :page 135}, :content {:text "这次模式设置了全局标记，因此每次调用 exec()都会返回字符串中的下一个匹配项，直到搜索到字符串末尾。"}, :properties {:color "yellow"}} {:id #uuid "63bd6544-7206-4ca6-8ec2-f059e9d0cebe", :page 136, :position {:bounding {:x1 149.90000915527344, :y1 128.6999969482422, :x2 780.4119873046875, :y2 148.6999969482422, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 149.90000915527344, :y1 128.6999969482422, :x2 780.4119873046875, :y2 148.6999969482422, :width 911.6666666666666, :height 1138.3333333333333} {:x1 327.8999938964844, :y1 130.75, :x2 335.4375, :y2 145.75, :width 911.6666666666666, :height 1138.3333333333333} {:x1 433, :y1 130.75, :x2 483.8500061035156, :y2 145.75, :width 911.6666666666666, :height 1138.3333333333333} {:x1 554.2999877929688, :y1 130.75, :x2 635.7711181640625, :y2 145.75, :width 911.6666666666666, :height 1138.3333333333333}), :page 136}, :content {:text "如果模式设置了粘附标记 y，则每次调用 exec()就只会在 lastIndex 的位置上寻找匹配项"}, :properties {:color "yellow"}} {:id #uuid "63bd65d2-047d-4cc0-80d4-47a579c66cdb", :page 134, :position {:bounding {:x1 0, :y1 796.7999877929688, :x2 826.9325561523438, :y2 997.1000061035156, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 0, :y1 796.7999877929688, :x2 0, :y2 819.2000122070312, :width 911.6666666666666, :height 1138.3333333333333} {:x1 428.144287109375, :y1 953.3999938964844, :x2 826.9325561523438, :y2 973.3999938964844, :width 911.6666666666666, :height 1138.3333333333333} {:x1 584.7000122070312, :y1 955.4499816894531, :x2 630.2705688476562, :y2 970.4499816894531, :width 911.6666666666666, :height 1138.3333333333333} {:x1 654.1000366210938, :y1 955.4499816894531, :x2 696.4703369140625, :y2 970.4499816894531, :width 911.6666666666666, :height 1138.3333333333333} {:x1 714, :y1 955.4499816894531, :x2 759.4711303710938, :y2 970.4499816894531, :width 911.6666666666666, :height 1138.3333333333333} {:x1 118.1875, :y1 977.1000061035156, :x2 468.78326416015625, :y2 997.1000061035156, :width 911.6666666666666, :height 1138.3333333333333} {:x1 292.3000183105469, :y1 979.1499938964844, :x2 344.9375, :y2 994.1499938964844, :width 911.6666666666666, :height 1138.3333333333333}), :page 134}, :content {:text "包含两个额外的属性：index 和 input。index 是字符串中匹配模式的起始位置，input 是要查找的字符串"}, :properties {:color "yellow"}} {:id #uuid "63bd66bf-f9fc-4bb2-af99-799ec906130e", :page 136, :position {:bounding {:x1 0, :y1 505.7000198364258, :x2 827.63525390625, :y2 563.2000198364258, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 149.90000915527344, :y1 505.7000198364258, :x2 827.63525390625, :y2 525.7000198364258, :width 911.6666666666666, :height 1138.3333333333333} {:x1 345.3999938964844, :y1 507.75000762939453, :x2 396.25, :y2 522.7500076293945, :width 911.6666666666666, :height 1138.3333333333333} {:x1 118.19999694824219, :y1 529.3125076293945, :x2 331.85113525390625, :y2 549.3125076293945, :width 911.6666666666666, :height 1138.3333333333333} {:x1 153.8000030517578, :y1 531.3500137329102, :x2 187.70469665527344, :y2 546.3500137329102, :width 911.6666666666666, :height 1138.3333333333333} {:x1 271, :y1 531.3500137329102, :x2 313.3703308105469, :y2 546.3500137329102, :width 911.6666666666666, :height 1138.3333333333333} {:x1 0, :y1 540.7999954223633, :x2 0, :y2 563.2000198364258, :width 911.6666666666666, :height 1138.3333333333333}), :page 136}, :content {:text "正则表达式的另一个方法是 test()，接收一个字符串参数。如果输入的文本与模式匹配，则参数返回 true，否则返回 false。"}, :properties {:color "yellow"}} {:id #uuid "63bd6711-b721-4cfc-a8a9-b231049b9142", :page 136, :position {:bounding {:x1 213.1875, :y1 908.5, :x2 583.4725952148438, :y2 928.5, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 213.1875, :y1 908.5, :x2 583.4725952148438, :y2 928.5, :width 911.6666666666666, :height 1138.3333333333333} {:x1 312.20001220703125, :y1 910.5500183105469, :x2 388.4750061035156, :y2 925.5500183105469, :width 911.6666666666666, :height 1138.3333333333333}), :page 136}, :content {:text "正则表达式的 valueOf()方法返回正则表达式本身。"}, :properties {:color "yellow"}} {:id #uuid "63bd6718-34dd-4f80-b598-767393920bf7", :page 136, :position {:bounding {:x1 182.6999969482422, :y1 969.7000122070312, :x2 377.6000061035156, :y2 988.8999938964844, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 182.6999969482422, :y1 969.7000122070312, :x2 377.6000061035156, :y2 988.8999938964844, :width 911.6666666666666, :height 1138.3333333333333}), :page 136}, :content {:text "RegExp 构造函数属性"}, :properties {:color "yellow"}} {:id #uuid "63bd676b-e44a-4767-bc65-921e9b42ef9a", :page 137, :position {:bounding {:x1 116.78750610351562, :y1 705.3125457763672, :x2 589.9609985351562, :y2 725.3125457763672, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 116.78750610351562, :y1 705.3125457763672, :x2 589.9609985351562, :y2 725.3125457763672, :width 911.6666666666666, :height 1138.3333333333333}), :page 137}, :content {:text "这些属性名也可以替换成简写形式，只不过要使用中括号语法来访问"}, :properties {:color "yellow"}} {:id #uuid "63bd67aa-2dfc-4afd-8127-b63ef6d2147d", :page 137, :position {:bounding {:x1 0, :y1 652.8000335693359, :x2 790.114501953125, :y2 1027.3375396728516, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 0, :y1 652.8000335693359, :x2 0, :y2 675.2000274658203, :width 911.6666666666666, :height 1138.3333333333333} {:x1 115.10000610351562, :y1 988.5500335693359, :x2 790.114501953125, :y2 1008.5500335693359, :width 911.6666666666666, :height 1138.3333333333333} {:x1 169.10000610351562, :y1 989.3500366210938, :x2 169.5710906982422, :y2 1004.3500366210938, :width 911.6666666666666, :height 1138.3333333333333} {:x1 730.7000122070312, :y1 989.3500366210938, :x2 790.114501953125, :y2 1004.3500366210938, :width 911.6666666666666, :height 1138.3333333333333} {:x1 85.0999984741211, :y1 1012.1375427246094, :x2 501.4276123046875, :y2 1027.3375396728516, :width 911.6666666666666, :height 1138.3333333333333}), :page 137}, :content {:text "RegExp 还有其他几个构造函数属性，可以存储最多 9 个捕获组的匹配项。这些属性通过 RegExp.$1~RegExp.$9 来访问，分别包含第 1~9 个捕获组的匹配项"}, :properties {:color "yellow"}} {:id #uuid "63bd67b1-e6ba-4a10-8fa7-8f975400506b", :page 138, :position {:bounding {:x1 182.6999969482422, :y1 428.01251220703125, :x2 262.8374938964844, :y2 448.01251220703125, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 182.6999969482422, :y1 428.01251220703125, :x2 262.8374938964844, :y2 448.01251220703125, :width 911.6666666666666, :height 1138.3333333333333}), :page 138}, :content {:text "模式局限"}, :properties {:color "yellow"}} {:id #uuid "63bd67ba-0a2b-482f-9fd5-09c6cb182d81", :page 138, :position {:bounding {:x1 152.32606506347656, :y1 718, :x2 337.4664001464844, :y2 748.3999938964844, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 152.32606506347656, :y1 718, :x2 152.32908630371094, :y2 748.3999938964844, :width 911.6666666666666, :height 1138.3333333333333} {:x1 173.97500610351562, :y1 720.4500122070312, :x2 337.4664001464844, :y2 743.6499938964844, :width 911.6666666666666, :height 1138.3333333333333}), :page 138}, :content {:text "原始值包装类型"}, :properties {:color "yellow"}} {:id #uuid "63bd6801-621f-408e-959e-d557cbabc10e", :page 139, :position {:bounding {:x1 116.80000305175781, :y1 307.4125061035156, :x2 545.0353546142578, :y2 327.4125061035156, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 116.80000305175781, :y1 307.4125061035156, :x2 545.0353546142578, :y2 327.4125061035156, :width 911.6666666666666, :height 1138.3333333333333}), :page 139}, :content {:text "引用类型与原始值包装类型的主要区别在于对象的生命周期。"}, :properties {:color "yellow"}} {:id #uuid "63bd6999-8a01-481c-a537-94228c590cb1", :page 139, :position {:bounding {:x1 116.80000305175781, :y1 509.7125244140625, :x2 651.9848022460938, :y2 529.7125244140625, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 116.80000305175781, :y1 509.7125244140625, :x2 651.9848022460938, :y2 529.7125244140625, :width 911.6666666666666, :height 1138.3333333333333} {:x1 231.60000610351562, :y1 511.75, :x2 290.9156188964844, :y2 526.75, :width 911.6666666666666, :height 1138.3333333333333} {:x1 309.5, :y1 511.75, :x2 363.9710998535156, :y2 526.75, :width 911.6666666666666, :height 1138.3333333333333} {:x1 387.8000183105469, :y1 511.75, :x2 449.3374938964844, :y2 526.75, :width 911.6666666666666, :height 1138.3333333333333}), :page 139}, :content {:text "可以显式地使用 Boolean、Number 和 String 构造函数创建原始值包装对象"}, :properties {:color "yellow"}} {:id #uuid "63bd69ac-334b-4451-ba98-a72577a750df", :page 139, :position {:bounding {:x1 0, :y1 332.8000183105469, :x2 794.9029693603516, :y2 624.2125244140625, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 0, :y1 332.8000183105469, :x2 0, :y2 355.20001220703125, :width 911.6666666666666, :height 1138.3333333333333} {:x1 164.1999969482422, :y1 581.8500366210938, :x2 794.9029693603516, :y2 601.8500366210938, :width 911.6666666666666, :height 1138.3333333333333} {:x1 164.1999969482422, :y1 582.6500244140625, :x2 218.87527465820312, :y2 597.6500244140625, :width 911.6666666666666, :height 1138.3333333333333} {:x1 85.0999984741211, :y1 604.2125244140625, :x2 116.81303405761719, :y2 624.2125244140625, :width 911.6666666666666, :height 1138.3333333333333}), :page 139}, :content {:text "Object 构造函数作为一个工厂方法，能够根据传入值的类型返回相应原始值包装类型的实例。"}, :properties {:color "yellow"}} {:id #uuid "63bd6a04-7d24-4003-accd-e6665b5d00da", :page 139, :position {:bounding {:x1 164.27503967285156, :y1 719.8125457763672, :x2 707.2264404296875, :y2 739.8125457763672, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 164.27503967285156, :y1 719.8125457763672, :x2 707.2264404296875, :y2 739.8125457763672, :width 911.6666666666666, :height 1138.3333333333333} {:x1 199.8000030517578, :y1 721.8500366210938, :x2 234.4375, :y2 736.8500366210938, :width 911.6666666666666, :height 1138.3333333333333}), :page 139}, :content {:text "使用 new 调用原始值包装类型的构造函数，与调用同名的转型函数并不一样。"}, :properties {:color "yellow"}} {:id #uuid "63bd6a0a-dc55-457c-a315-ec5d89622289", :page 139, :position {:bounding {:x1 149.60000610351562, :y1 946.0000305175781, :x2 230.39450073242188, :y2 965.2000427246094, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 149.60000610351562, :y1 946.0000305175781, :x2 230.39450073242188, :y2 965.2000427246094, :width 911.6666666666666, :height 1138.3333333333333}), :page 139}, :content {:text "Boolean"}, :properties {:color "yellow"}} {:id #uuid "63bd6a63-8c6b-4643-aad1-f703c2c085ae", :page 140, :position {:bounding {:x1 149.90000915527344, :y1 586.7000122070312, :x2 728.704833984375, :y2 606.7000122070312, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 149.90000915527344, :y1 586.7000122070312, :x2 728.704833984375, :y2 606.7000122070312, :width 911.6666666666666, :height 1138.3333333333333} {:x1 280.5, :y1 588.75, :x2 351.0375061035156, :y2 603.75, :width 911.6666666666666, :height 1138.3333333333333}), :page 140}, :content {:text "理解原始布尔值和 Boolean 对象之间的区别非常重要，强烈建议永远不要使用后者"}, :properties {:color "yellow"}} {:id #uuid "63bd6a6d-d599-49b1-8609-bafbd724df91", :page 140, :position {:bounding {:x1 0, :y1 129.95000457763672, :x2 826.9376220703125, :y2 259.1999969482422, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 148.1999969482422, :y1 129.95000457763672, :x2 826.9376220703125, :y2 149.95000457763672, :width 911.6666666666666, :height 1138.3333333333333} {:x1 211.1999969482422, :y1 130.75, :x2 211.6710968017578, :y2 145.75, :width 911.6666666666666, :height 1138.3333333333333} {:x1 314.6000061035156, :y1 130.75, :x2 390.973876953125, :y2 145.75, :width 911.6666666666666, :height 1138.3333333333333} {:x1 555.2000122070312, :y1 130.75, :x2 598.7374877929688, :y2 145.75, :width 911.6666666666666, :height 1138.3333333333333} {:x1 615.5, :y1 130.75, :x2 657.8703002929688, :y2 145.75, :width 911.6666666666666, :height 1138.3333333333333} {:x1 673.5, :y1 130.75, :x2 758.3395385742188, :y2 145.75, :width 911.6666666666666, :height 1138.3333333333333} {:x1 118.19999694824219, :y1 152.3125, :x2 472.76129150390625, :y2 172.3125, :width 911.6666666666666, :height 1138.3333333333333} {:x1 324, :y1 154.3499984741211, :x2 374.8500061035156, :y2 169.3499984741211, :width 911.6666666666666, :height 1138.3333333333333} {:x1 393.8000183105469, :y1 154.3499984741211, :x2 453.2145080566406, :y2 169.3499984741211, :width 911.6666666666666, :height 1138.3333333333333} {:x1 0, :y1 236.8000030517578, :x2 0, :y2 259.1999969482422, :width 911.6666666666666, :height 1138.3333333333333}), :page 140}, :content {:text "Boolean 的实例会重写 valueOf()方法，返回一个原始值 true 或 false。toString()方法被调用时也会被覆盖，返回字符串\"true\"或\"false\"。"}, :properties {:color "yellow"}} {:id #uuid "63bd6a7f-15d7-4cc9-a596-b05d2dc03968", :page 140, :position {:bounding {:x1 182.6999969482422, :y1 626.1000366210938, :x2 251.96371459960938, :y2 645.2999877929688, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 182.6999969482422, :y1 626.1000366210938, :x2 251.96371459960938, :y2 645.2999877929688, :width 911.6666666666666, :height 1138.3333333333333}), :page 140}, :content {:text "Number"}, :properties {:color "yellow"}} {:id #uuid "63bd6ab1-7547-48a2-95b1-24b1c095c160", :page 140, :position {:bounding {:x1 151.3000030517578, :y1 713.2124938964844, :x2 426.19488525390625, :y2 726.5125427246094, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 151.3000030517578, :y1 713.2124938964844, :x2 426.19488525390625, :y2 726.5125427246094, :width 911.6666666666666, :height 1138.3333333333333}), :page 140}, :content {:text "let numberObject = new Number(10);"}, :properties {:color "yellow"}} {:id #uuid "63bd6ad1-9fc0-4c28-8865-0c0f13009161", :page 140, :position {:bounding {:x1 0, :y1 668.8000411987305, :x2 821.7406616210938, :y2 805.2000427246094, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 0, :y1 668.8000411987305, :x2 0, :y2 691.2000350952148, :width 911.6666666666666, :height 1138.3333333333333} {:x1 737, :y1 762.8500366210938, :x2 821.7406616210938, :y2 782.8500366210938, :width 911.6666666666666, :height 1138.3333333333333} {:x1 737, :y1 763.6500396728516, :x2 821.7406616210938, :y2 778.6500396728516, :width 911.6666666666666, :height 1138.3333333333333} {:x1 118.19999694824219, :y1 785.2000427246094, :x2 625.7853240966797, :y2 805.2000427246094, :width 911.6666666666666, :height 1138.3333333333333}), :page 140}, :content {:text "toString()方法可选地接收一个表示基数的参数，并返回相应基数形式的数值字符串"}, :properties {:color "yellow"}} {:id #uuid "63bd6ae1-44bb-4335-9d78-b47a74738552", :page 140, :position {:bounding {:x1 148.1999969482422, :y1 941.8499984741211, :x2 530.5050048828125, :y2 957.0500030517578, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 148.1999969482422, :y1 941.8499984741211, :x2 530.5050048828125, :y2 957.0500030517578, :width 911.6666666666666, :height 1138.3333333333333}), :page 140}, :content {:text "toFixed()方法返回包含指定小数点位数的数值字符串"}, :properties {:color "yellow"}} {:id #uuid "63bd6af4-65ff-4413-9c42-0a6fe884b999", :page 141, :position {:bounding {:x1 180.10000610351562, :y1 266.84999084472656, :x2 540.5159301757812, :y2 282.0500030517578, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 180.10000610351562, :y1 266.84999084472656, :x2 540.5159301757812, :y2 282.0500030517578, :width 911.6666666666666, :height 1138.3333333333333}), :page 141}, :content {:text "toFixed()方法可以表示有 0~20 个小数位的数值。"}, :properties {:color "yellow"}} {:id #uuid "63bd6b15-8aa3-48dd-9365-541dfb537a39", :page 141, :position {:bounding {:x1 0, :y1 124.80000114440918, :x2 794.3352661132812, :y2 375.8000183105469, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 0, :y1 124.80000114440918, :x2 0, :y2 147.20000076293945, :width 911.6666666666666, :height 1138.3333333333333} {:x1 342.3999938964844, :y1 333.3500061035156, :x2 794.3352661132812, :y2 348.5500030517578, :width 911.6666666666666, :height 1138.3333333333333} {:x1 85.0999984741211, :y1 355.8000183105469, :x2 211.9314727783203, :y2 375.8000183105469, :width 911.6666666666666, :height 1138.3333333333333}), :page 141}, :content {:text "toExponential()，返回以科学记数法（也称为指数记数法）表示的数值字符串。"}, :properties {:color "yellow"}} {:id #uuid "63bd6b32-7871-46d2-a66b-bc35154e7ab8", :page 141, :position {:bounding {:x1 360, :y1 357.0500183105469, :x2 780.627685546875, :y2 377.0500183105469, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 360, :y1 357.0500183105469, :x2 780.627685546875, :y2 377.0500183105469, :width 911.6666666666666, :height 1138.3333333333333} {:x1 360, :y1 357.8500061035156, :x2 487.2098388671875, :y2 372.8500061035156, :width 911.6666666666666, :height 1138.3333333333333}), :page 141}, :content {:text "toExponential()也接收一个参数，表示结果中小数的位数"}, :properties {:color "yellow"}} {:id #uuid "63bd6b4b-d86b-472c-8c8e-b310d49c3326", :page 141, :position {:bounding {:x1 0, :y1 236.8000030517578, :x2 794.7817077636719, :y2 538.6125183105469, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 0, :y1 236.8000030517578, :x2 0, :y2 259.1999969482422, :width 911.6666666666666, :height 1138.3333333333333} {:x1 115.10000610351562, :y1 496.25, :x2 794.7817077636719, :y2 511.45001220703125, :width 911.6666666666666, :height 1138.3333333333333} {:x1 85.0875015258789, :y1 518.6125183105469, :x2 132.67660522460938, :y2 538.6125183105469, :width 911.6666666666666, :height 1138.3333333333333}), :page 141}, :content {:text "toPrecision()方法会根据情况返回最合理的输出结果，可能是固定长度，也可能是科学记数法形式。"}, :properties {:color "yellow"}} {:id #uuid "63bd6b52-baf1-4730-8eaa-ffe807fe5cf9", :page 141, :position {:bounding {:x1 196.1078643798828, :y1 518.6125183105469, :x2 599.5988159179688, :y2 538.6125183105469, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 196.1078643798828, :y1 518.6125183105469, :x2 599.5988159179688, :y2 538.6125183105469, :width 911.6666666666666, :height 1138.3333333333333}), :page 141}, :content {:text "接收一个参数，表示结果中数字的总位数（不包含指数）。"}, :properties {:color "yellow"}} {:id #uuid "63bd6b60-9df9-4832-862d-f7c178454770", :page 141, :position {:bounding {:x1 180.10000610351562, :y1 759.3500061035156, :x2 557.6351318359375, :y2 774.5500183105469, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 180.10000610351562, :y1 759.3500061035156, :x2 557.6351318359375, :y2 774.5500183105469, :width 911.6666666666666, :height 1138.3333333333333}), :page 141}, :content {:text "toPrecision()方法可以表示带 1~21 个小数位的数值"}, :properties {:color "yellow"}} {:id #uuid "63bd6b8a-6d5e-4c3d-9338-974ee41a26b5", :page 141, :position {:bounding {:x1 0, :y1 460.8000183105469, :x2 788.0203247070312, :y2 891.900016784668, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 0, :y1 460.8000183105469, :x2 0, :y2 483.20001220703125, :width 911.6666666666666, :height 1138.3333333333333} {:x1 417.85894775390625, :y1 848.2000122070312, :x2 788.0203247070312, :y2 868.2000122070312, :width 911.6666666666666, :height 1138.3333333333333} {:x1 616.4000244140625, :y1 850.2500152587891, :x2 678.0375366210938, :y2 865.2500152587891, :width 911.6666666666666, :height 1138.3333333333333} {:x1 694.7999877929688, :y1 850.2500152587891, :x2 788.0203247070312, :y2 865.2500152587891, :width 911.6666666666666, :height 1138.3333333333333} {:x1 85.0999984741211, :y1 871.900016784668, :x2 259.5699691772461, :y2 891.900016784668, :width 911.6666666666666, :height 1138.3333333333333}), :page 141}, :content {:text "处理原始数值和引用数值时，typeof 和 instacnceof操作符会返回不同的结果"}, :properties {:color "yellow"}} {:id #uuid "63bd6b97-f89a-4c3d-b542-00cf173a604d", :page 142, :position {:bounding {:x1 149.90000915527344, :y1 149.85000610351562, :x2 674.7845458984375, :y2 165.85000610351562, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 149.90000915527344, :y1 149.85000610351562, :x2 674.7845458984375, :y2 165.85000610351562, :width 911.6666666666666, :height 1138.3333333333333}), :page 142}, :content {:text "ES6 新增了 Number.isInteger()方法，用于辨别一个数值是否保存为整数"}, :properties {:color "yellow"}} {:id #uuid "63bd6ba9-591b-4b1c-9e94-f8be14b6ff20", :page 142, :position {:bounding {:x1 151.3000030517578, :y1 216.51251220703125, :x2 504.33807373046875, :y2 229.8125, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 151.3000030517578, :y1 216.51251220703125, :x2 504.33807373046875, :y2 229.8125, :width 911.6666666666666, :height 1138.3333333333333}), :page 142}, :content {:text "console.log(Number.isInteger(1.00)); // true"}, :properties {:color "yellow"}} {:id #uuid "63bd6bcd-c4c1-45e8-8f07-e167a57da4bd", :page 142, :position {:bounding {:x1 0, :y1 257.64999771118164, :x2 828.0699310302734, :y2 355.20000076293945, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 157.490966796875, :y1 257.64999771118164, :x2 828.0699310302734, :y2 273.6500129699707, :width 911.6666666666666, :height 1138.3333333333333} {:x1 408.6000061035156, :y1 278.7750129699707, :x2 419.9877624511719, :y2 289.1750068664551, :width 911.6666666666666, :height 1138.3333333333333} {:x1 707.2999877929688, :y1 278.7750129699707, :x2 718.687744140625, :y2 289.1750068664551, :width 911.6666666666666, :height 1138.3333333333333} {:x1 376.20001220703125, :y1 280.70000076293945, :x2 408.63751220703125, :y2 300.70000076293945, :width 911.6666666666666, :height 1138.3333333333333} {:x1 683.6000366210938, :y1 280.70000076293945, :x2 707.3375244140625, :y2 300.70000076293945, :width 911.6666666666666, :height 1138.3333333333333} {:x1 720.6000366210938, :y1 280.70000076293945, :x2 764.05517578125, :y2 300.70000076293945, :width 911.6666666666666, :height 1138.3333333333333} {:x1 118.1875, :y1 280.7125129699707, :x2 364.5910339355469, :y2 300.7125129699707, :width 911.6666666666666, :height 1138.3333333333333} {:x1 421.88751220703125, :y1 281.2500190734863, :x2 671.9910888671875, :y2 297.2500190734863, :width 911.6666666666666, :height 1138.3333333333333} {:x1 169.60000610351562, :y1 282.7500190734863, :x2 364.5910339355469, :y2 297.7500190734863, :width 911.6666666666666, :height 1138.3333333333333} {:x1 0, :y1 332.8000068664551, :x2 0, :y2 355.20000076293945, :width 911.6666666666666, :height 1138.3333333333333}), :page 142}, :content {:text "EEE 754 数值格式有一个特殊的数值范围，在这个范围内二进制值可以表示一个整数值。这个数值范围从 Number.MIN_SAFE_INTEGER（253 + 1）到 Number.MAX_SAFE_INTEGER（253  1）。"}, :properties {:color "yellow"}} {:id #uuid "63bd6bd7-f3ca-4a6a-a949-0ffa19c877f6", :page 142, :position {:bounding {:x1 165.76524353027344, :y1 328.0000190734863, :x2 716.0000610351562, :y2 348.01250076293945, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 668.5, :y1 328.0000190734863, :x2 716.0000610351562, :y2 348.0000190734863, :width 911.6666666666666, :height 1138.3333333333333} {:x1 165.76524353027344, :y1 328.01250076293945, :x2 656.9254760742188, :y2 348.01250076293945, :width 911.6666666666666, :height 1138.3333333333333} {:x1 470.3999938964844, :y1 330.0500068664551, :x2 656.9254760742188, :y2 345.0500068664551, :width 911.6666666666666, :height 1138.3333333333333}), :page 142}, :content {:text "为了鉴别整数是否在这个范围内，可以使用 Number.isSafeInteger()方法："}, :properties {:color "yellow"}} {:id #uuid "63bd6bde-64c7-40df-8ba0-f7cd7dec0499", :page 142, :position {:bounding {:x1 182.6999969482422, :y1 459.5999946594238, :x2 251.96371459960938, :y2 478.8000068664551, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 182.6999969482422, :y1 459.5999946594238, :x2 251.96371459960938, :y2 478.8000068664551, :width 911.6666666666666, :height 1138.3333333333333}), :page 142}, :content {:text "String"}, :properties {:color "yellow"}} {:id #uuid "63bd6bec-9d16-452b-bce3-5ddf99a15753", :page 142, :position {:bounding {:x1 149.90000915527344, :y1 618.8000183105469, :x2 623.554931640625, :y2 638.8000183105469, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 149.90000915527344, :y1 618.8000183105469, :x2 623.554931640625, :y2 638.8000183105469, :width 911.6666666666666, :height 1138.3333333333333} {:x1 185.5, :y1 620.8500061035156, :x2 247.03750610351562, :y2 635.8500061035156, :width 911.6666666666666, :height 1138.3333333333333} {:x1 343, :y1 620.8500061035156, :x2 404.5375061035156, :y2 635.8500061035156, :width 911.6666666666666, :height 1138.3333333333333}), :page 142}, :content {:text "每个 String 对象都有一个 length 属性，表示字符串中字符的数量"}, :properties {:color "yellow"}} {:id #uuid "63bd6c20-254d-42d7-8326-db85580185cc", :page 142, :position {:bounding {:x1 169.6743621826172, :y1 764.1125183105469, :x2 276.1790466308594, :y2 784.1125183105469, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 169.6743621826172, :y1 764.1125183105469, :x2 276.1790466308594, :y2 784.1125183105469, :width 911.6666666666666, :height 1138.3333333333333}), :page 142}, :content {:text "avaScript 字符"}, :properties {:color "yellow"}} {:id #uuid "63bd6c28-715e-482f-9088-c5745b3b26dd", :page 142, :position {:bounding {:x1 488.75421142578125, :y1 785.2000122070312, :x2 795.4937744140625, :y2 805.2000122070312, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 488.75421142578125, :y1 785.2000122070312, :x2 795.4937744140625, :y2 805.2000122070312, :width 911.6666666666666, :height 1138.3333333333333}), :page 142}, :content {:text "对多数字符来说，每 16 位码元对应一个字符"}, :properties {:color "yellow"}} {:id #uuid "63bd6c28-27e5-45e0-b681-509202c480ec", :page 142, :position {:bounding {:x1 488.75421142578125, :y1 785.2000122070312, :x2 795.4937744140625, :y2 805.2000122070312, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 488.75421142578125, :y1 785.2000122070312, :x2 795.4937744140625, :y2 805.2000122070312, :width 911.6666666666666, :height 1138.3333333333333}), :page 142}, :content {:text nil}, :properties {:color "yellow"}} {:id #uuid "63bd6c2f-aead-4706-b12c-96aaeba6f4c4", :page 142, :position {:bounding {:x1 197.5869903564453, :y1 893.0000305175781, :x2 684.3098754882812, :y2 913.0000305175781, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 197.5869903564453, :y1 893.0000305175781, :x2 684.3098754882812, :y2 913.0000305175781, :width 911.6666666666666, :height 1138.3333333333333} {:x1 197.60000610351562, :y1 895.0500183105469, :x2 265.49420166015625, :y2 910.0500183105469, :width 911.6666666666666, :height 1138.3333333333333}), :page 142}, :content {:text "charAt()方法返回给定索引位置的字符，由传给方法的整数参数指定"}, :properties {:color "yellow"}} {:id #uuid "63bd6c3e-7be3-402a-8ec4-8621a88b3a21", :page 143, :position {:bounding {:x1 152.40000915527344, :y1 280.95001220703125, :x2 496.1414794921875, :y2 296.1499938964844, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 152.40000915527344, :y1 280.95001220703125, :x2 496.1414794921875, :y2 296.1499938964844, :width 911.6666666666666, :height 1138.3333333333333}), :page 143}, :content {:text "charCodeAt()方法可以查看指定码元的字符编码"}, :properties {:color "yellow"}} {:id #uuid "63bd6c5a-415c-4b44-b3f0-e20168a19697", :page 143, :position {:bounding {:x1 115.10000610351562, :y1 452.1500244140625, :x2 619.8826293945312, :y2 467.35003662109375, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 115.10000610351562, :y1 452.1500244140625, :x2 619.8826293945312, :y2 467.35003662109375, :width 911.6666666666666, :height 1138.3333333333333}), :page 143}, :content {:text "fromCharCode()方法用于根据给定的 UTF-16 码元创建字符串中的字符"}, :properties {:color "yellow"}} {:id #uuid "63bd6c61-2370-4f51-a2c1-0024d751bad6", :page 143, :position {:bounding {:x1 0, :y1 204.80001068115234, :x2 794.365234375, :y2 494.5125045776367, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 0, :y1 204.80001068115234, :x2 0, :y2 227.20000457763672, :width 911.6666666666666, :height 1138.3333333333333} {:x1 730.9067993164062, :y1 450.90001678466797, :x2 794.365234375, :y2 470.90001678466797, :width 911.6666666666666, :height 1138.3333333333333} {:x1 85.0875015258789, :y1 474.5125045776367, :x2 497.45716094970703, :y2 494.5125045776367, :width 911.6666666666666, :height 1138.3333333333333}), :page 143}, :content {:text "接受任意多个数值，并返回将所有数值对应的字符拼接起来的字符串"}, :properties {:color "yellow"}} {:id #uuid "63bd6caf-6935-46b9-b6de-a0d5b1433de4", :page 143, :position {:bounding {:x1 0, :y1 492.80003356933594, :x2 793.7875366210938, :y2 902.9250335693359, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 0, :y1 492.80003356933594, :x2 0, :y2 515.2000274658203, :width 911.6666666666666, :height 1138.3333333333333} {:x1 0, :y1 508.80003356933594, :x2 0, :y2 531.2000274658203, :width 911.6666666666666, :height 1138.3333333333333} {:x1 762.1124877929688, :y1 835.7125396728516, :x2 793.7875366210938, :y2 855.7125396728516, :width 911.6666666666666, :height 1138.3333333333333} {:x1 85.0999984741211, :y1 859.3250350952148, :x2 793.7410278320312, :y2 879.3250427246094, :width 911.6666666666666, :height 1138.3333333333333} {:x1 85.0999984741211, :y1 882.9250335693359, :x2 393.125, :y2 902.9250335693359, :width 911.6666666666666, :height 1138.3333333333333}), :page 143}, :content {:text "为了表示更多的字符，Unicode 采用了一个策略，即每个字符使用另外 16 位去选择一个增补平面。这种每个字符使用两个 16 位码元的策略称为代理对。"}, :properties {:color "yellow"}} {:id #uuid "63bd6cd9-655f-4508-b7d1-ef8dd8b1299c", :page 144, :position {:bounding {:x1 0, :y1 346.3500061035156, :x2 827.5429077148438, :y2 419.1999816894531, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 274.3000183105469, :y1 346.3500061035156, :x2 827.5429077148438, :y2 361.5500183105469, :width 911.6666666666666, :height 1138.3333333333333} {:x1 118.1875, :y1 368.7124938964844, :x2 281.3593444824219, :y2 388.7124938964844, :width 911.6666666666666, :height 1138.3333333333333} {:x1 0, :y1 396.8000183105469, :x2 0, :y2 419.1999816894531, :width 911.6666666666666, :height 1138.3333333333333}), :page 144}, :content {:text "fromCharCode()方法仍然返回正确的结果，因为它实际上是基于提供的二进制表示直接组合成字符串"}, :properties {:color "yellow"}} {:id #uuid "63bd6cef-29c4-49eb-aaa3-2b5bb42ff382", :page 144, :position {:bounding {:x1 0, :y1 440.75, :x2 827.2701416015625, :y2 483.20001220703125, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 465.1000061035156, :y1 440.75, :x2 827.2701416015625, :y2 460.75, :width 911.6666666666666, :height 1138.3333333333333} {:x1 0, :y1 460.79998779296875, :x2 0, :y2 483.20001220703125, :width 911.6666666666666, :height 1138.3333333333333} {:x1 118.19999694824219, :y1 463.20001220703125, :x2 321.51251220703125, :y2 483.20001220703125, :width 911.6666666666666, :height 1138.3333333333333}), :page 144}, :content {:text "codePointAt()接收 16 位码元的索引并返回该索引位置上的码点（code point）。"}, :properties {:color "yellow"}} {:id #uuid "63bd6d4a-a946-4bef-a116-48050f3413ff", :page 144, :position {:bounding {:x1 0, :y1 668.8000411987305, :x2 835.2374877929688, :y2 785.5125045776367, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 0, :y1 668.8000411987305, :x2 0, :y2 691.2000045776367, :width 911.6666666666666, :height 1138.3333333333333} {:x1 693.9000244140625, :y1 741.900016784668, :x2 835.2374877929688, :y2 761.900016784668, :width 911.6666666666666, :height 1138.3333333333333} {:x1 696.7999877929688, :y1 743.9500045776367, :x2 812.9765625, :y2 758.9500045776367, :width 911.6666666666666, :height 1138.3333333333333} {:x1 118.1875, :y1 765.5125045776367, :x2 562.3132934570312, :y2 785.5125045776367, :width 911.6666666666666, :height 1138.3333333333333}), :page 144}, :content {:text " fromCodePoint()。这个方法接收任意数量的码点，返回对应字符拼接起来的字符串"}, :properties {:color "yellow"}} {:id #uuid "63bd6d53-05af-46b3-95ed-22115f33b894", :page 144, :position {:bounding {:x1 167.5, :y1 841.25, :x2 297.779052734375, :y2 856.4500122070312, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 167.5, :y1 841.25, :x2 297.779052734375, :y2 856.4500122070312, :width 911.6666666666666, :height 1138.3333333333333}), :page 144}, :content {:text "normalize()方法"}, :properties {:color "yellow"}} {:id #uuid "63bd6d86-c8c8-415a-8b58-6376112a0160", :page 144, :position {:bounding {:x1 0, :y1 748.8000030517578, :x2 827.2301025390625, :y2 904.6999969482422, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 0, :y1 748.8000030517578, :x2 0, :y2 771.2000045776367, :width 911.6666666666666, :height 1138.3333333333333} {:x1 435.4725036621094, :y1 861.1000061035156, :x2 827.2301025390625, :y2 881.1000061035156, :width 911.6666666666666, :height 1138.3333333333333} {:x1 118.19999694824219, :y1 884.6999969482422, :x2 213.31407165527344, :y2 904.6999969482422, :width 911.6666666666666, :height 1138.3333333333333}), :page 144}, :content {:text "有的字符既可以通过一个 BMP 字符表示，也可以通过一个代理对表示"}, :properties {:color "yellow"}} {:id #uuid "63bd6dbb-dcb2-48fd-bf49-a1bbfee2bbed", :page 145, :position {:bounding {:x1 116.80000305175781, :y1 128.70001220703125, :x2 402.25404357910156, :y2 148.70001220703125, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 116.80000305175781, :y1 128.70001220703125, :x2 402.25404357910156, :y2 148.70001220703125, :width 911.6666666666666, :height 1138.3333333333333}), :page 145}, :content {:text "比较操作符不在乎字符看起来是什么样的"}, :properties {:color "yellow"}} {:id #uuid "63bd6dc4-9925-415b-850b-fb7a3efbc526", :page 145, :position {:bounding {:x1 238.48751831054688, :y1 308.4499969482422, :x2 443.6058044433594, :y2 324.4499969482422, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 238.48751831054688, :y1 308.4499969482422, :x2 443.6058044433594, :y2 324.4499969482422, :width 911.6666666666666, :height 1138.3333333333333}), :page 145}, :content {:text "Unicode 提供了 4 种规范化形式"}, :properties {:color "yellow"}} {:id #uuid "63bd6dcb-36b0-4ed3-ae50-66e66593a256", :page 145, :position {:bounding {:x1 0, :y1 156.8000030517578, :x2 801.9000244140625, :y2 375.6625213623047, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 0, :y1 156.8000030517578, :x2 0, :y2 179.1999969482422, :width 911.6666666666666, :height 1138.3333333333333} {:x1 252.886962890625, :y1 331.5124969482422, :x2 801.9000244140625, :y2 351.5124969482422, :width 911.6666666666666, :height 1138.3333333333333} {:x1 85.0625, :y1 355.6625213623047, :x2 567.3136596679688, :y2 375.6625213623047, :width 911.6666666666666, :height 1138.3333333333333}), :page 145}, :content {:text "这 4 种规范化形式是：NFD（Normalization Form D）、NFC（Normalization Form C）、 NFKD（Normalization Form KD）和 NFKC（Normalization Form KC）。"}, :properties {:color "yellow"}} {:id #uuid "63bd6dfc-9983-4888-af4f-eb90fa30c196", :page 145, :position {:bounding {:x1 116.80000305175781, :y1 490.20001220703125, :x2 742.7579956054688, :y2 510.20001220703125, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 116.80000305175781, :y1 490.20001220703125, :x2 742.7579956054688, :y2 510.20001220703125, :width 911.6666666666666, :height 1138.3333333333333} {:x1 294.8000183105469, :y1 492.25, :x2 388.11920166015625, :y2 507.25, :width 911.6666666666666, :height 1138.3333333333333}), :page 145}, :content {:text "通过比较字符串与其调用 normalize()的返回值，就可以知道该字符串是否已经规范化了"}, :properties {:color "yellow"}} {:id #uuid "63bd6e09-9c6c-42d9-8ef7-292fedfc5629", :page 145, :position {:bounding {:x1 134.40000915527344, :y1 1010.1499938964844, :x2 244.02731323242188, :y2 1026.1499938964844, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 134.40000915527344, :y1 1010.1499938964844, :x2 244.02731323242188, :y2 1026.1499938964844, :width 911.6666666666666, :height 1138.3333333333333}), :page 145}, :content {:text "字符串操作方法"}, :properties {:color "yellow"}} {:id #uuid "63bd6e17-7faa-4cee-9dd3-b65cd9f72d1c", :page 145, :position {:bounding {:x1 421.3000183105469, :y1 1031.8500137329102, :x2 794.3818359375, :y2 1047.0500106811523, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 421.3000183105469, :y1 1031.8500137329102, :x2 794.3818359375, :y2 1047.0500106811523, :width 911.6666666666666, :height 1138.3333333333333}), :page 145}, :content {:text "concat()，用于将一个或多个字符串拼接成一个新字"}, :properties {:color "yellow"}} {:id #uuid "63bd6e65-1ff3-464a-bab5-f859c16878c2", :page 146, :position {:bounding {:x1 316.8504333496094, :y1 268.1999969482422, :x2 819.27978515625, :y2 288.1999969482422, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 316.8504333496094, :y1 268.1999969482422, :x2 819.27978515625, :y2 288.1999969482422, :width 911.6666666666666, :height 1138.3333333333333} {:x1 326, :y1 270.25001525878906, :x2 393.7953186035156, :y2 285.25001525878906, :width 911.6666666666666, :height 1138.3333333333333}), :page 146}, :content {:text "。concat()方法可以接收任意多个参数，因此可以一次性拼接多个字符串"}, :properties {:color "yellow"}} {:id #uuid "63bd7722-a298-465e-8c99-c8742c9f5a1d", :page 146, :position {:bounding {:x1 539.7999877929688, :y1 479.74999237060547, :x2 596.2938842773438, :y2 494.9500045776367, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 539.7999877929688, :y1 479.74999237060547, :x2 596.2938842773438, :y2 494.9500045776367, :width 911.6666666666666, :height 1138.3333333333333}), :page 146}, :content {:text "slice()"}, :properties {:color "yellow"}} {:id #uuid "63bd7728-e259-483f-945d-c140d6e087a7", :page 146, :position {:bounding {:x1 614.6000366210938, :y1 479.74999237060547, :x2 679.2018432617188, :y2 499.74999237060547, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 614.6000366210938, :y1 479.74999237060547, :x2 679.2018432617188, :y2 499.74999237060547, :width 911.6666666666666, :height 1138.3333333333333}), :page 146}, :content {:text "substr()"}, :properties {:color "yellow"}} {:id #uuid "63bd772e-1e5b-489f-ba2c-583b1abce325", :page 146, :position {:bounding {:x1 698.5, :y1 478.49999237060547, :x2 791.3157958984375, :y2 498.49999237060547, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 698.5, :y1 478.49999237060547, :x2 791.3157958984375, :y2 498.49999237060547, :width 911.6666666666666, :height 1138.3333333333333} {:x1 702.7000122070312, :y1 480.55001068115234, :x2 791.3157958984375, :y2 495.55001068115234, :width 911.6666666666666, :height 1138.3333333333333}), :page 146}, :content {:text " substring()"}, :properties {:color "yellow"}} {:id #uuid "63bd79d1-5d12-4a4a-87ff-ee0c2f4b8035", :page 147, :position {:bounding {:x1 134.40000915527344, :y1 324.34999084472656, :x2 244.02731323242188, :y2 340.34999084472656, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 134.40000915527344, :y1 324.34999084472656, :x2 244.02731323242188, :y2 340.34999084472656, :width 911.6666666666666, :height 1138.3333333333333}), :page 147}, :content {:text "字符串位置方法"}, :properties {:color "yellow"}} {:id #uuid "63bd79e0-2ef0-48e7-85cb-2071f9ad997f", :page 147, :position {:bounding {:x1 229.90719604492188, :y1 344.81251525878906, :x2 641.7243041992188, :y2 364.81251525878906, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 229.90719604492188, :y1 344.81251525878906, :x2 641.7243041992188, :y2 364.81251525878906, :width 911.6666666666666, :height 1138.3333333333333} {:x1 423, :y1 346.84999084472656, :x2 500.58013916015625, :y2 361.84999084472656, :width 911.6666666666666, :height 1138.3333333333333} {:x1 529.7000122070312, :y1 346.84999084472656, :x2 641.7243041992188, :y2 361.84999084472656, :width 911.6666666666666, :height 1138.3333333333333}), :page 147}, :content {:text "在字符串中定位子字符串：indexOf()和 lastIndexOf()"}, :properties {:color "yellow"}} {:id #uuid "63bd7a0c-7d13-4289-85f5-faf46e8c0ab7", :page 147, :position {:bounding {:x1 0, :y1 172.8000030517578, :x2 793.5758056640625, :y2 412.11253356933594, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 0, :y1 172.8000030517578, :x2 0, :y2 195.1999969482422, :width 911.6666666666666, :height 1138.3333333333333} {:x1 678.7999877929688, :y1 369.75001525878906, :x2 793.5758056640625, :y2 384.9499969482422, :width 911.6666666666666, :height 1138.3333333333333} {:x1 85.0999984741211, :y1 392.11253356933594, :x2 715.0555419921875, :y2 412.11253356933594, :width 911.6666666666666, :height 1138.3333333333333} {:x1 341.8999938964844, :y1 394.15000915527344, :x2 454.023193359375, :y2 409.15000915527344, :width 911.6666666666666, :height 1138.3333333333333}), :page 147}, :content {:text "indexOf()方法从字符串开头开始查找子字符串，而 lastIndexOf()方法从字符串末尾开始查找子字符串"}, :properties {:color "yellow"}} {:id #uuid "63bd7a4a-a98d-427f-b2c5-50c70171490b", :page 147, :position {:bounding {:x1 0, :y1 300.8000030517578, :x2 793.9651489257812, :y2 614.4125213623047, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 0, :y1 300.8000030517578, :x2 0, :y2 323.1999969482422, :width 911.6666666666666, :height 1138.3333333333333} {:x1 0, :y1 316.8000030517578, :x2 0, :y2 339.1999969482422, :width 911.6666666666666, :height 1138.3333333333333} {:x1 337.2643127441406, :y1 547.1999969482422, :x2 793.8326416015625, :y2 567.1999969482422, :width 911.6666666666666, :height 1138.3333333333333} {:x1 649.2999877929688, :y1 549.2499847412109, :x2 725.6738891601562, :y2 564.2499847412109, :width 911.6666666666666, :height 1138.3333333333333} {:x1 85.0875015258789, :y1 570.8124847412109, :x2 793.9651489257812, :y2 590.8124847412109, :width 911.6666666666666, :height 1138.3333333333333} {:x1 548.7000122070312, :y1 572.8500213623047, :x2 658.7667846679688, :y2 587.8500213623047, :width 911.6666666666666, :height 1138.3333333333333} {:x1 85.0999984741211, :y1 594.4125213623047, :x2 592.6892013549805, :y2 614.4125213623047, :width 911.6666666666666, :height 1138.3333333333333}), :page 147}, :content {:text "二个参数，表示开始搜索的位置。这意味着，indexOf()会从这个参数指定的位置开始向字符串末尾搜索，忽略该位置之前的字符；lastIndexOf()则会从这个参数指定的位置开始向字符串开头搜索，忽略该位置之后直到字符串末尾的字符"}, :properties {:color "yellow"}} {:id #uuid "63bd7ae4-32ac-4452-b895-abdc557b3015", :page 147, :position {:bounding {:x1 0, :y1 428.80003356933594, :x2 794.2198486328125, :y2 765.9500427246094, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 0, :y1 428.80003356933594, :x2 0, :y2 451.20003509521484, :width 911.6666666666666, :height 1138.3333333333333} {:x1 568.5383911132812, :y1 725.9000396728516, :x2 794.2198486328125, :y2 745.9000396728516, :width 911.6666666666666, :height 1138.3333333333333} {:x1 85.0999984741211, :y1 750.7500457763672, :x2 620.1348266601562, :y2 765.9500427246094, :width 911.6666666666666, :height 1138.3333333333333}), :page 147}, :content {:text "这样使用第二个参数并循环调用 indexOf()或 lastIndexOf()，就可以在字符串中找到所有的目标子字符串"}, :properties {:color "yellow"}} {:id #uuid "63bd7af0-4b4f-44ca-a540-2fd9b9e58f06", :page 148, :position {:bounding {:x1 167.5, :y1 128.74996948242188, :x2 277.1272888183594, :y2 144.74996948242188, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 167.5, :y1 128.74996948242188, :x2 277.1272888183594, :y2 144.74996948242188, :width 911.6666666666666, :height 1138.3333333333333}), :page 148}, :content {:text "字符串包含方法"}, :properties {:color "yellow"}} {:id #uuid "63bd7bc6-c59b-455f-8c14-d6bb897aa3ba", :page 148, :position {:bounding {:x1 167.5, :y1 733.8500061035156, :x2 252.779052734375, :y2 749.0500183105469, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 167.5, :y1 733.8500061035156, :x2 252.779052734375, :y2 749.0500183105469, :width 911.6666666666666, :height 1138.3333333333333}), :page 148}, :content {:text "trim()方法"}, :properties {:color "yellow"}} {:id #uuid "63bd7bcd-7768-42df-aebd-5a6d82d3e905", :page 148, :position {:bounding {:x1 167.5, :y1 931.8500366210938, :x2 270.779052734375, :y2 947.050048828125, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 167.5, :y1 931.8500366210938, :x2 270.779052734375, :y2 947.050048828125, :width 911.6666666666666, :height 1138.3333333333333}), :page 148}, :content {:text "repeat()方法"}, :properties {:color "yellow"}} {:id #uuid "63bd7ca6-4499-49e6-88f4-deb48f02348b", :page 149, :position {:bounding {:x1 130.45535278320312, :y1 128.19998168945312, :x2 347.47906494140625, :y2 148.19998168945312, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 130.45535278320312, :y1 128.19998168945312, :x2 240.61865234375, :y2 148.19998168945312, :width 911.6666666666666, :height 1138.3333333333333} {:x1 134.40000915527344, :y1 130.24996948242188, :x2 347.47906494140625, :y2 145.24996948242188, :width 911.6666666666666, :height 1138.3333333333333}), :page 149}, :content {:text "padStart()和 padEnd()方法"}, :properties {:color "yellow"}} {:id #uuid "63bd7cac-89a6-4023-8e8a-0d27def4de0e", :page 149, :position {:bounding {:x1 134.40000915527344, :y1 521.8500232696533, :x2 259.6668395996094, :y2 537.8500232696533, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 134.40000915527344, :y1 521.8500232696533, :x2 259.6668395996094, :y2 537.8500232696533, :width 911.6666666666666, :height 1138.3333333333333}), :page 149}, :content {:text "字符串迭代与解构"}, :properties {:color "yellow"}} {:id #uuid "63bd7cb2-d62d-406d-a6de-c00467ca637d", :page 149, :position {:bounding {:x1 143.1875, :y1 1007.25, :x2 268.36053466796875, :y2 1023.25, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 143.1875, :y1 1007.25, :x2 268.36053466796875, :y2 1023.25, :width 911.6666666666666, :height 1138.3333333333333}), :page 149}, :content {:text "字符串大小写转换"}, :properties {:color "yellow"}} {:id #uuid "63bd7cba-5169-4e17-9405-d279b72e1d3d", :page 150, :position {:bounding {:x1 175.08750915527344, :y1 392.9625129699707, :x2 316.08770751953125, :y2 408.9625129699707, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 175.08750915527344, :y1 392.9625129699707, :x2 316.08770751953125, :y2 408.9625129699707, :width 911.6666666666666, :height 1138.3333333333333}), :page 150}, :content {:text "字符串模式匹配方法"}, :properties {:color "yellow"}} {:id #uuid "63bd7cc4-786d-4f47-8d66-db2d6d8e1140", :page 152, :position {:bounding {:x1 176.3000030517578, :y1 377.8500061035156, :x2 342.5790710449219, :y2 393.0500030517578, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 176.3000030517578, :y1 377.8500061035156, :x2 342.5790710449219, :y2 393.0500030517578, :width 911.6666666666666, :height 1138.3333333333333}), :page 152}, :content {:text "localeCompare()方法"}, :properties {:color "yellow"}} {:id #uuid "63bd7ccb-ad4c-4763-acd7-dee7d5cbbe20", :page 153, :position {:bounding {:x1 139.47422790527344, :y1 158.41249084472656, :x2 221.06655883789062, :y2 178.41249084472656, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 139.47422790527344, :y1 158.41249084472656, :x2 221.06655883789062, :y2 178.41249084472656, :width 911.6666666666666, :height 1138.3333333333333}), :page 153}, :content {:text "HTML 方法"}, :properties {:color "yellow"}} {:id #uuid "63bd7cd1-3ee4-40e1-808d-9d20f3a6b150", :page 153, :position {:bounding {:x1 140.8874969482422, :y1 588.6500091552734, :x2 280.9442138671875, :y2 611.8499908447266, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 140.8874969482422, :y1 588.6500091552734, :x2 280.9442138671875, :y2 611.8499908447266, :width 911.6666666666666, :height 1138.3333333333333}), :page 153}, :content {:text "单例内置对象"}, :properties {:color "yellow"}} {:id #uuid "63be2ae9-fdc7-46d9-94f3-7d54480829c2", :page 148, :position {:bounding {:x1 641.0124877989292, :y1 138.1125087738037, :x2 734.4587768614292, :y2 156.51251792907715, :width 831.9999999999999, :height 1038.8592321755025}, :rects ({:x1 641.0124877989292, :y1 138.1125087738037, :x2 734.4587768614292, :y2 156.51251792907715, :width 831.9999999999999, :height 1038.8592321755025}), :page 148}, :content {:text "startsWith("}, :properties {:color "yellow"}} {:id #uuid "63be2b4d-1e65-472b-8577-8c5e54fd809a", :page 148, :position {:bounding {:x1 107.86250153183937, :y1 159.64999961853027, :x2 192.72585144639015, :y2 173.2500057220459, :width 831.9999999999999, :height 1038.8592321755025}, :rects ({:x1 107.86250153183937, :y1 159.64999961853027, :x2 192.72585144639015, :y2 173.2500057220459, :width 831.9999999999999, :height 1038.8592321755025}), :page 148}, :content {:text "endsWith()"}, :properties {:color "yellow"}} {:id #uuid "63be2b52-3344-4fcf-b748-b76e00a30b7e", :page 148, :position {:bounding {:x1 210.07500305771828, :y1 159.64999961853027, :x2 294.9383606016636, :y2 173.2500057220459, :width 831.9999999999999, :height 1038.8592321755025}, :rects ({:x1 210.07500305771828, :y1 159.64999961853027, :x2 294.9383606016636, :y2 173.2500057220459, :width 831.9999999999999, :height 1038.8592321755025}), :page 148}, :content {:text "includes()"}, :properties {:color "yellow"}} {:id #uuid "63be2c17-349a-426d-aa45-6ea7a5fdd7d6", :page 148, :position {:bounding {:x1 0, :y1 796.8000183105469, :x2 755.388647466898, :y2 908.2749938964844, :width 831.9999999999999, :height 1038.8592321755025}, :rects ({:x1 0, :y1 796.8000183105469, :x2 0, :y2 819.2000122070312, :width 831.9999999999999, :height 1038.8592321755025} {:x1 682.8853515684605, :y1 868.3250122070312, :x2 755.388647466898, :y2 886.7250061035156, :width 831.9999999999999, :height 1038.8592321755025} {:x1 107.86250153183937, :y1 889.875, :x2 426.511335760355, :y2 908.2749938964844, :width 831.9999999999999, :height 1038.8592321755025}), :page 148}, :content {:text "表示要将字符串复制多少次，然后返回拼接所有副本后的结果"}, :properties {:color "yellow"}} {:id #uuid "63be2c8a-7b23-4d95-8504-41d40f5a3d79", :page 149, :position {:bounding {:x1 0, :y1 28.800003051757812, :x2 725.7097534239292, :y2 175.98751831054688, :width 831.9999999999999, :height 1038.8592321755025}, :rects ({:x1 0, :y1 28.800003051757812, :x2 0, :y2 51.19999694824219, :width 831.9999999999999, :height 1038.8592321755025} {:x1 105.03750458359718, :y1 138.11251831054688, :x2 725.7097534239292, :y2 156.51251220703125, :width 831.9999999999999, :height 1038.8592321755025} {:x1 77.65000000596046, :y1 157.58749389648438, :x2 170.30055847764015, :y2 175.98751831054688, :width 831.9999999999999, :height 1038.8592321755025}), :page 149}, :content {:text "padStart()和 padEnd()方法会复制字符串，如果小于指定长度，则在相应一边填充字符，直至满足长度条件"}, :properties {:color "yellow"}} {:id #uuid "63be2c98-0aaf-4d07-aded-27f9f4cc0aa5", :page 149, :position {:bounding {:x1 0, :y1 44.80000305175781, :x2 726.1236938536167, :y2 197.53750610351562, :width 831.9999999999999, :height 1038.8592321755025}, :rects ({:x1 0, :y1 44.80000305175781, :x2 0, :y2 67.19999694824219, :width 831.9999999999999, :height 1038.8592321755025} {:x1 278.35275879502296, :y1 157.58749389648438, :x2 726.1236938536167, :y2 175.98751831054688, :width 831.9999999999999, :height 1038.8592321755025} {:x1 70.45000305771828, :y1 179.13751220703125, :x2 146.77500000596046, :y2 197.53750610351562, :width 831.9999999999999, :height 1038.8592321755025}), :page 149}, :content {:text "第一个参数是长度，第二个参数是可选的填充字符串，默认为空格（U+0020）"}, :properties {:color "yellow"}} {:id #uuid "63be2dd2-6e68-416d-990f-c87a9fe48a56", :page 149, :position {:bounding {:x1 106.58750000596046, :y1 494.7875061035156, :x2 624.740209966898, :y2 513.1875, :width 831.9999999999999, :height 1038.8592321755025}, :rects ({:x1 106.58750000596046, :y1 494.7875061035156, :x2 624.740209966898, :y2 513.1875, :width 831.9999999999999, :height 1038.8592321755025}), :page 149}, :content {:text "字符串的原型上暴露了一个@@iterator 方法，表示可以迭代字符串的每个字符。"}, :properties {:color "yellow"}} {:id #uuid "63be2e0a-cbd5-4229-aef2-ed270f1e84f3", :page 149, :position {:bounding {:x1 428.46250000596046, :y1 939.8500366210938, :x2 538.8868164122105, :y2 953.4500427246094, :width 831.9999999999999, :height 1038.8592321755025}, :rects ({:x1 428.46250000596046, :y1 939.8500366210938, :x2 538.8868164122105, :y2 953.4500427246094, :width 831.9999999999999, :height 1038.8592321755025}), :page 149}, :content {:text "toLowerCase()"}, :properties {:color "yellow"}} {:id #uuid "63be2e19-6739-4df2-8bd6-9715848bfeb4", :page 149, :position {:bounding {:x1 552.487524420023, :y1 939.8500366210938, :x2 705.2444824278355, :y2 953.4500427246094, :width 831.9999999999999, :height 1038.8592321755025}, :rects ({:x1 552.487524420023, :y1 939.8500366210938, :x2 705.2444824278355, :y2 953.4500427246094, :width 831.9999999999999, :height 1038.8592321755025}), :page 149}, :content {:text "toLocaleLowerCase("}, :properties {:color "yellow"}} {:id #uuid "63be2e23-4251-4e8e-9769-ee822ef38c75", :page 150, :position {:bounding {:x1 107.86250153183937, :y1 119.3125, :x2 214.39711609482765, :y2 132.9124755859375, :width 831.9999999999999, :height 1038.8592321755025}, :rects ({:x1 107.86250153183937, :y1 119.3125, :x2 214.39711609482765, :y2 132.9124755859375, :width 831.9999999999999, :height 1038.8592321755025}), :page 150}, :content {:text "toUpperCase()"}, :properties {:color "yellow"}} {:id #uuid "63be2e2a-86cc-4504-ad30-cf959c4c3f4a", :page 150, :position {:bounding {:x1 225.13750305771828, :y1 117.25, :x2 374.15146484971046, :y2 135.64996337890625, :width 831.9999999999999, :height 1038.8592321755025}, :rects ({:x1 225.13750305771828, :y1 117.25, :x2 374.15146484971046, :y2 135.64996337890625, :width 831.9999999999999, :height 1038.8592321755025}), :page 150}, :content {:text " toLocaleUpperCase("}, :properties {:color "yellow"}} {:id #uuid "63be2e88-441b-4bbe-b244-39f3df385e19", :page 150, :position {:bounding {:x1 0, :y1 400.77500915527344, :x2 755.369848638773, :y2 483.1999969482422, :width 831.9999999999999, :height 1038.8592321755025}, :rects ({:x1 408.11249390244484, :y1 400.77500915527344, :x2 755.369848638773, :y2 419.1750183105469, :width 831.9999999999999, :height 1038.8592321755025} {:x1 107.86250153183937, :y1 420.2375030517578, :x2 323.9160217344761, :y2 438.6374969482422, :width 831.9999999999999, :height 1038.8592321755025} {:x1 0, :y1 460.8000030517578, :x2 0, :y2 483.1999969482422, :width 831.9999999999999, :height 1038.8592321755025}), :page 150}, :content {:text "match()方法接收一个参数，可以是一个正则表达式字符串，也可以是一个 RegExp 对象"}, :properties {:color "yellow"}} {:id #uuid "63be2eba-e3fa-4ab5-9aea-578a521549f7", :page 150, :position {:bounding {:x1 0, :y1 569.3625030517578, :x2 755.2823242247105, :y2 627.1999969482422, :width 831.9999999999999, :height 1038.8592321755025}, :rects ({:x1 639.4119018614292, :y1 569.3625030517578, :x2 755.2823242247105, :y2 587.7624969482422, :width 831.9999999999999, :height 1038.8592321755025} {:x1 107.86250153183937, :y1 590.9000091552734, :x2 556.901472479105, :y2 609.3000030517578, :width 831.9999999999999, :height 1038.8592321755025} {:x1 0, :y1 604.8000030517578, :x2 0, :y2 627.1999969482422, :width 831.9999999999999, :height 1038.8592321755025}), :page 150}, :content {:text "第一个元素是与整个模式匹配的字符串，其余元素则是与表达式中的捕获组匹配的字符串"}, :properties {:color "yellow"}} {:id #uuid "63be2ecc-09ac-475c-bfd3-cce188b7540e", :page 150, :position {:bounding {:x1 339.01251831650734, :y1 612.4375152587891, :x2 410.5686096251011, :y2 630.8375091552734, :width 831.9999999999999, :height 1038.8592321755025}, :rects ({:x1 339.01251831650734, :y1 612.4375152587891, :x2 410.5686096251011, :y2 630.8375091552734, :width 831.9999999999999, :height 1038.8592321755025}), :page 150}, :content {:text " search()"}, :properties {:color "yellow"}} {:id #uuid "63be2f00-75f9-4064-a07e-49d3e044fa35", :page 150, :position {:bounding {:x1 334.5344299376011, :y1 634.0625152587891, :x2 678.1999877989292, :y2 652.4625091552734, :width 831.9999999999999, :height 1038.8592321755025}, :rects ({:x1 334.5344299376011, :y1 634.0625152587891, :x2 678.1999877989292, :y2 652.4625091552734, :width 831.9999999999999, :height 1038.8592321755025}), :page 150}, :content {:text "返回模式第一个匹配的位置索引，如果没找到则返回1"}, :properties {:color "yellow"}} {:id #uuid "63be2f1d-4a7b-41ca-9942-337cf0d0b9fe", :page 150, :position {:bounding {:x1 435.76251831650734, :y1 756.0500183105469, :x2 538.6477417051792, :y2 774.4500122070312, :width 831.9999999999999, :height 1038.8592321755025}, :rects ({:x1 435.76251831650734, :y1 756.0500183105469, :x2 538.6477417051792, :y2 774.4500122070312, :width 831.9999999999999, :height 1038.8592321755025}), :page 150}, :content {:text "replace()方法"}, :properties {:color "yellow"}} {:id #uuid "63be2f5f-3dd0-45d5-9d36-d330c4bb4b3c", :page 150, :position {:bounding {:x1 0, :y1 748.8000183105469, :x2 755.1684936583042, :y2 815.5500183105469, :width 831.9999999999999, :height 1038.8592321755025}, :rects ({:x1 0, :y1 748.8000183105469, :x2 0, :y2 771.2000122070312, :width 831.9999999999999, :height 1038.8592321755025} {:x1 711.8468383848667, :y1 753.9750061035156, :x2 755.1684936583042, :y2 772.375, :width 831.9999999999999, :height 1038.8592321755025} {:x1 0, :y1 764.8000183105469, :x2 0, :y2 787.2000122070312, :width 831.9999999999999, :height 1038.8592321755025} {:x1 107.87499848008156, :y1 775.5250244140625, :x2 754.8450683653355, :y2 793.9250183105469, :width 831.9999999999999, :height 1038.8592321755025} {:x1 107.86250153183937, :y1 797.1499938964844, :x2 266.33027496933937, :y2 815.5500183105469, :width 831.9999999999999, :height 1038.8592321755025}), :page 150}, :content {:text "第一个参数可以是一个 RegExp 对象或一个字符串（这个字符串不会转换为正则表达式），第二个参数可以是一个字符串或一个函数。"}, :properties {:color "yellow"}} {:id #uuid "63be2fa0-7593-489b-a1eb-33040b3e84b3", :page 151, :position {:bounding {:x1 366.5375122129917, :y1 937.7875061035156, :x2 421.2613891661167, :y2 956.1875305175781, :width 831.9999999999999, :height 1038.8592321755025}, :rects ({:x1 366.5375122129917, :y1 937.7875061035156, :x2 421.2613891661167, :y2 956.1875305175781, :width 831.9999999999999, :height 1038.8592321755025}), :page 151}, :content {:text " split("}, :properties {:color "yellow"}} {:id #uuid "63be2faa-e1d4-41a0-8a46-8d33ba133610", :page 151, :position {:bounding {:x1 507.83600464463234, :y1 937.7750244140625, :x2 710.6668457090855, :y2 956.1750183105469, :width 831.9999999999999, :height 1038.8592321755025}, :rects ({:x1 507.83600464463234, :y1 937.7750244140625, :x2 710.6668457090855, :y2 956.1750183105469, :width 831.9999999999999, :height 1038.8592321755025}), :page 151}, :content {:text "根据传入的分隔符将字符串拆分"}, :properties {:color "yellow"}} {:id #uuid "63be30fa-00a8-4d54-925e-78a73ca3417d", :page 152, :position {:bounding {:x1 275.22284546494484, :y1 138.78750610351562, :x2 654.0594238340855, :y2 157.1875, :width 831.9999999999999, :height 1038.8592321755025}, :rects ({:x1 275.22284546494484, :y1 138.78750610351562, :x2 654.0594238340855, :y2 157.1875, :width 831.9999999999999, :height 1038.8592321755025}), :page 152}, :content {:text "第二个参数，即数组大小，确保返回的数组不会超过指定大"}, :properties {:color "yellow"}} {:id #uuid "63be310f-5468-4c56-a6e6-8edd906a61ad", :page 152, :position {:bounding {:x1 437.17426148056984, :y1 362.65000915527344, :x2 538.5682739317417, :y2 381.0500030517578, :width 831.9999999999999, :height 1038.8592321755025}, :rects ({:x1 437.17426148056984, :y1 362.65000915527344, :x2 538.5682739317417, :y2 381.0500030517578, :width 831.9999999999999, :height 1038.8592321755025}), :page 152}, :content {:text "比较两个字符串"}, :properties {:color "yellow"}} {:id #uuid "63be3147-06d2-48a3-aa8b-512c79f40dc4", :page 152, :position {:bounding {:x1 155.32500305771828, :y1 384.27500915527344, :x2 588.2998565733433, :y2 402.6750030517578, :width 831.9999999999999, :height 1038.8592321755025}, :rects ({:x1 155.32500305771828, :y1 384.27500915527344, :x2 588.2998565733433, :y2 402.6750030517578, :width 831.9999999999999, :height 1038.8592321755025}), :page 152}, :content {:text "如果按照字母表顺序，字符串应该排在字符串参数前头，则返回负值"}, :properties {:color "yellow"}} {:id #uuid "63be31c8-f575-42ef-a0a8-c21fe2a3b534", :page 152, :position {:bounding {:x1 0, :y1 892.800048828125, :x2 755.8924316465855, :y2 945.3250122070312, :width 831.9999999999999, :height 1038.8592321755025}, :rects ({:x1 0, :y1 892.800048828125, :x2 0, :y2 915.2000122070312, :width 831.9999999999999, :height 1038.8592321755025} {:x1 135.2375091612339, :y1 907.4500122070312, :x2 755.8924316465855, :y2 925.8500366210938, :width 831.9999999999999, :height 1038.8592321755025} {:x1 107.86250153183937, :y1 926.925048828125, :x2 136.08424988389015, :y2 945.3250122070312, :width 831.9999999999999, :height 1038.8592321755025}), :page 152}, :content {:text "localeCompare()的独特之处在于，实现所在的地区（国家和语言）决定了这个方法如何比较字符串"}, :properties {:color "yellow"}} {:id #uuid "63be322b-67ca-4c3e-b71a-ad21f7f4f56f", :page 153, :position {:bounding {:x1 0, :y1 316.79999351501465, :x2 727.3146118223667, :y2 616.8624877929688, :width 831.9999999999999, :height 1038.8592321755025}, :rects ({:x1 0, :y1 316.79999351501465, :x2 0, :y2 339.1999931335449, :width 831.9999999999999, :height 1038.8592321755025} {:x1 321.1292785704136, :y1 576.8374938964844, :x2 727.3146118223667, :y2 595.2375030517578, :width 831.9999999999999, :height 1038.8592321755025} {:x1 77.63750305771828, :y1 598.4624938964844, :x2 267.0056213438511, :y2 616.8624877929688, :width 831.9999999999999, :height 1038.8592321755025}), :page 153}, :content {:text "何由 ECMAScript 实现提供、与宿主环境无关，并在 ECMAScript程序开始执行时就存在的对象"}, :properties {:color "yellow"}} {:id #uuid "63be58df-f3a1-4e5d-9ee5-6514262aeca9", :page 153, :position {:bounding {:x1 305.76080933213234, :y1 619.7875137329102, :x2 584.1302856504917, :y2 638.1875152587891, :width 831.6959064327485, :height 1038.4795321637425}, :rects ({:x1 305.76080933213234, :y1 619.7875137329102, :x2 584.1302856504917, :y2 638.1875152587891, :width 831.6959064327485, :height 1038.4795321637425}), :page 153}, :content {:text "内置对象，包括 Object、Array 和 String"}, :properties {:color "yellow"}} {:id #uuid "63be59e9-4919-4e4a-8dfc-82fb95e63f1d", :page 153, :position {:bounding {:x1 136.47499695420265, :y1 676.6625213623047, :x2 197.97206726670265, :y2 694.2625122070312, :width 831.6959064327485, :height 1038.4795321637425}, :rects ({:x1 136.47499695420265, :y1 676.6625213623047, :x2 197.97206726670265, :y2 694.2625122070312, :width 831.6959064327485, :height 1038.4795321637425}), :page 153}, :content {:text "Global"}, :properties {:color "yellow"}} {:id #uuid "63be5a1c-b75a-432b-bfc7-59702810f4ff", :page 153, :position {:bounding {:x1 172.03396606445312, :y1 787.7625350952148, :x2 594.3560791015625, :y2 806.9625396728516, :width 870, :height 1086.3071297989031}, :rects ({:x1 172.03396606445312, :y1 787.7625350952148, :x2 594.3560791015625, :y2 806.9625396728516, :width 870, :height 1086.3071297989031}), :page 153}, :content {:text "在全局作用域中定义的变量和函数都会变成 Global 对象的属性 "}, :properties {:color "yellow"}} {:id #uuid "63be5a39-18ab-4cb0-86dd-e25d5809ffde", :page 153, :position {:bounding {:x1 0, :y1 428.8000183105469, :x2 764.3621826171875, :y2 829.4875335693359, :width 870, :height 1086.3071297989031}, :rects ({:x1 0, :y1 428.8000183105469, :x2 0, :y2 451.2000274658203, :width 870, :height 1086.3071297989031} {:x1 718.9144897460938, :y1 787.7625350952148, :x2 764.3621826171875, :y2 806.9625396728516, :width 870, :height 1086.3071297989031} {:x1 81.20000457763672, :y1 810.2875366210938, :x2 503.4591369628906, :y2 829.4875335693359, :width 870, :height 1086.3071297989031}), :page 153}, :content {:text "函数，包括 isNaN()、isFinite()、parseInt()和 parseFloat()"}, :properties {:color "yellow"}} {:id #uuid "63be5ad5-2f51-46c4-aca7-771c4c251af6", :page 153, :position {:bounding {:x1 125.78646087646484, :y1 861.2375335693359, :x2 218.87620544433594, :y2 880.4375457763672, :width 870, :height 1086.3071297989031}, :rects ({:x1 125.78646087646484, :y1 861.2375335693359, :x2 218.87620544433594, :y2 880.4375457763672, :width 870, :height 1086.3071297989031}), :page 153}, :content {:text "URL 编码方法"}, :properties {:color "yellow"}} {:id #uuid "63be5af2-9544-48bf-afde-4e44dd9e02fb", :page 153, :position {:bounding {:x1 109.8375015258789, :y1 882.5375366210938, :x2 750.1683959960938, :y2 901.7375335693359, :width 870, :height 1086.3071297989031}, :rects ({:x1 109.8375015258789, :y1 882.5375366210938, :x2 750.1683959960938, :y2 901.7375335693359, :width 870, :height 1086.3071297989031}), :page 153}, :content {:text "encodeURI()和 encodeURIComponent()方法用于编码统一资源标识符（URI），以便传给浏览器"}, :properties {:color "yellow"}} {:id #uuid "63be5b02-3cc1-4f0d-b68c-c5f32fc13fb8", :page 153, :position {:bounding {:x1 109.8375015258789, :y1 950.2000427246094, :x2 413.7823181152344, :y2 969.4000549316406, :width 870, :height 1086.3071297989031}, :rects ({:x1 109.8375015258789, :y1 950.2000427246094, :x2 413.7823181152344, :y2 969.4000549316406, :width 870, :height 1086.3071297989031}), :page 153}, :content {:text "ecnodeURI()方法用于对整个 URI 进行编码"}, :properties {:color "yellow"}} {:id #uuid "63be5b83-86bb-4872-9549-bb333ad15fc5", :page 153, :position {:bounding {:x1 0, :y1 540.8000335693359, :x2 757.3905029296875, :y2 991.9250183105469, :width 870, :height 1086.3071297989031}, :rects ({:x1 0, :y1 540.8000335693359, :x2 0, :y2 563.2000350952148, :width 870, :height 1086.3071297989031} {:x1 742.1264038085938, :y1 948.9375305175781, :x2 757.3905029296875, :y2 968.1375427246094, :width 870, :height 1086.3071297989031} {:x1 81.20000457763672, :y1 972.7250366210938, :x2 755.2149658203125, :y2 991.9250183105469, :width 870, :height 1086.3071297989031}), :page 153}, :content {:text "而 encodeURIComponent()方法用于编码 URI 中单独的组件，比如前面 URL 中的\"illegal value.js\""}, :properties {:color "yellow"}} {:id #uuid "63be5c2c-7742-492a-a077-87954f3a8952", :page 154, :position {:bounding {:x1 0, :y1 285.9875183105469, :x2 791.8678588867188, :y2 371.1999816894531, :width 870, :height 1086.3071297989031}, :rects ({:x1 679.1221313476562, :y1 285.9875183105469, :x2 791.8678588867188, :y2 305.1874694824219, :width 870, :height 1086.3071297989031} {:x1 112.80000305175781, :y1 309.8625183105469, :x2 540.3063201904297, :y2 329.0624694824219, :width 870, :height 1086.3071297989031} {:x1 0, :y1 348.8000183105469, :x2 0, :y2 371.1999816894531, :width 870, :height 1086.3071297989031}), :page 154}, :content {:text "而 encodeURIComponent()方法将所有非字母字符都替换成了相应的编码形式"}, :properties {:color "yellow"}} {:id #uuid "63be5c37-bc4b-4c8d-bfb9-b1b59950fde5", :page 154, :position {:bounding {:x1 0, :y1 373.9750061035156, :x2 749.222412109375, :y2 419.1999816894531, :width 870, :height 1086.3071297989031}, :rects ({:x1 294.2653503417969, :y1 373.9750061035156, :x2 749.222412109375, :y2 393.1750183105469, :width 870, :height 1086.3071297989031} {:x1 158.125, :y1 395.6374816894531, :x2 538.6596069335938, :y2 414.8374938964844, :width 870, :height 1086.3071297989031} {:x1 0, :y1 396.8000183105469, :x2 0, :y2 419.1999816894531, :width 870, :height 1086.3071297989031}), :page 154}, :content {:text "用 encodeURIComponent()应该比使用 encodeURI()的频率更高，这是因为编码查询字符串参数比编码基准 URI 的次数更多"}, :properties {:color "yellow"}} {:id #uuid "63be5d96-1618-4940-a73e-dbbc322046e7", :page 154, :position {:bounding {:x1 499.2875183224678, :y1 438.7000045776367, :x2 762.9540527462959, :y2 457.89998626708984, :width 870, :height 1086.3071297989031}, :rects ({:x1 499.2875183224678, :y1 438.7000045776367, :x2 762.9540527462959, :y2 457.89998626708984, :width 870, :height 1086.3071297989031}), :page 154}, :content {:text "decodeURI()和 decodeURIComponent"}, :properties {:color "yellow"}} {:id #uuid "63be5daf-c659-4aa6-a5e5-195a662dc8fe", :page 154, :position {:bounding {:x1 159.83750915527344, :y1 847.4249877929688, :x2 239.8462677001953, :y2 862.625, :width 870, :height 1086.3071297989031}, :rects ({:x1 159.83750915527344, :y1 847.4249877929688, :x2 239.8462677001953, :y2 862.625, :width 870, :height 1086.3071297989031}), :page 154}, :content {:text "eval()方法"}, :properties {:color "yellow"}} {:id #uuid "63be5dbb-3a95-43e6-8fe1-ea641aa3bca8", :page 154, :position {:bounding {:x1 308.3338317871094, :y1 888.8249816894531, :x2 743.7352905273438, :y2 908.0249938964844, :width 870, :height 1086.3071297989031}, :rects ({:x1 308.3338317871094, :y1 888.8249816894531, :x2 743.7352905273438, :y2 908.0249938964844, :width 870, :height 1086.3071297989031}), :page 154}, :content {:text "接收一个参数，即一个要执行的 ECMAScript（JavaScript）字符串"}, :properties {:color "yellow"}} {:id #uuid "63be5ddc-95d0-4aab-bf99-5f0bd7fa85a8", :page 155, :position {:bounding {:x1 217.38902282714844, :y1 476.27503967285156, :x2 546.5565795898438, :y2 495.47499084472656, :width 870, :height 1086.3071297989031}, :rects ({:x1 217.38902282714844, :y1 476.27503967285156, :x2 546.5565795898438, :y2 495.47499084472656, :width 870, :height 1086.3071297989031}), :page 155}, :content {:text "在 eval()内部创建的变量和函数无法被外部访问"}, :properties {:color "yellow"}} {:id #uuid "63be5de7-4030-436e-bb0d-fc0aebd1384f", :page 155, :position {:bounding {:x1 128.25, :y1 676.4125366210938, :x2 241.01756286621094, :y2 690.8125, :width 870, :height 1086.3071297989031}, :rects ({:x1 128.25, :y1 676.4125366210938, :x2 241.01756286621094, :y2 690.8125, :width 870, :height 1086.3071297989031}), :page 155}, :content {:text "Global 对象属性"}, :properties {:color "yellow"}} {:id #uuid "63be5e2e-0cf3-40a8-ad3e-98adb55884e5", :page 156, :position {:bounding {:x1 159.83750915527344, :y1 440.6999931335449, :x2 244.13377380371094, :y2 455.0999870300293, :width 870, :height 1086.3071297989031}, :rects ({:x1 159.83750915527344, :y1 440.6999931335449, :x2 244.13377380371094, :y2 455.0999870300293, :width 870, :height 1086.3071297989031}), :page 156}, :content {:text "window 对象"}, :properties {:color "yellow"}} {:id #uuid "63be5e36-6b11-4d07-a157-3ec112b076c5", :page 156, :position {:bounding {:x1 0, :y1 459.48749923706055, :x2 790.9077758789062, :y2 501.29999923706055, :width 870, :height 1086.3071297989031}, :rects ({:x1 598.6124877929688, :y1 459.48749923706055, :x2 790.9077758789062, :y2 478.6875114440918, :width 870, :height 1086.3071297989031} {:x1 0, :y1 460.79999923706055, :x2 0, :y2 483.20002365112305, :width 870, :height 1086.3071297989031} {:x1 112.7874984741211, :y1 482.0999870300293, :x2 188.47706604003906, :y2 501.29999923706055, :width 870, :height 1086.3071297989031}), :page 156}, :content {:text " window 对象实现为 Global对象的代理"}, :properties {:color "yellow"}} {:id #uuid "63be5e3d-c43f-4c8d-8c04-73ec445eff13", :page 157, :position {:bounding {:x1 125.2846450805664, :y1 120.71249389648438, :x2 186.84336853027344, :y2 144.71249389648438, :width 870, :height 1086.3071297989031}, :rects ({:x1 125.2846450805664, :y1 120.71249389648438, :x2 125.28816223144531, :y2 144.71249389648438, :width 870, :height 1086.3071297989031} {:x1 142.7624969482422, :y1 122.5, :x2 186.84336853027344, :y2 140.89999389648438, :width 870, :height 1086.3071297989031}), :page 157}, :content {:text "Math"}, :properties {:color "yellow"}} {:id #uuid "63be5e85-9610-45e5-97de-6866f8260090", :page 157, :position {:bounding {:x1 128.25, :y1 314.63751220703125, :x2 223.927978515625, :y2 329.0375061035156, :width 870, :height 1086.3071297989031}, :rects ({:x1 128.25, :y1 314.63751220703125, :x2 223.927978515625, :y2 329.0375061035156, :width 870, :height 1086.3071297989031}), :page 157}, :content {:text "Math 对象属性"}, :properties {:color "yellow"}} {:id #uuid "63be5e97-1aa4-4eb0-80ff-0f66ef1d394e", :page 157, :position {:bounding {:x1 128.25, :y1 617.0500030517578, :x2 261.5087585449219, :y2 632.2499847412109, :width 870, :height 1086.3071297989031}, :rects ({:x1 128.25, :y1 617.0500030517578, :x2 261.5087585449219, :y2 632.2499847412109, :width 870, :height 1086.3071297989031}), :page 157}, :content {:text "min()和 max()方法"}, :properties {:color "yellow"}} {:id #uuid "63be5ea7-d264-4875-81fc-4a66f17afda3", :page 157, :position {:bounding {:x1 0, :y1 460.8000183105469, :x2 565.6405715942383, :y2 890.3500366210938, :width 870, :height 1086.3071297989031}, :rects ({:x1 0, :y1 460.8000183105469, :x2 0, :y2 483.2000198364258, :width 870, :height 1086.3071297989031} {:x1 0, :y1 476.8000183105469, :x2 0, :y2 499.2000198364258, :width 870, :height 1086.3071297989031} {:x1 111.4625015258789, :y1 836.7250366210938, :x2 565.6405715942383, :y2 855.9250183105469, :width 870, :height 1086.3071297989031} {:x1 112.7874984741211, :y1 862.4750366210938, :x2 401.0189208984375, :y2 875.2750244140625, :width 870, :height 1086.3071297989031} {:x1 112.7874984741211, :y1 877.5500183105469, :x2 308.3789978027344, :y2 890.3500366210938, :width 870, :height 1086.3071297989031}), :page 157}, :content {:text "要知道数组中的最大值和最小值，可以像下面这样使用扩展操作符： let values = [1, 2, 3, 4, 5, 6, 7, 8]; let max = Math.max(...val);"}, :properties {:color "yellow"}} {:id #uuid "63be5eb3-41cc-4eca-999c-23752957789a", :page 157, :position {:bounding {:x1 128.25, :y1 908.4125366210938, :x2 185.1925506591797, :y2 923.6125183105469, :width 870, :height 1086.3071297989031}, :rects ({:x1 128.25, :y1 908.4125366210938, :x2 185.1925506591797, :y2 923.6125183105469, :width 870, :height 1086.3071297989031}), :page 157}, :content {:text "舍入方法"}, :properties {:color "yellow"}} {:id #uuid "63be5ebd-7214-4a97-a64e-c5f463378358", :page 158, :position {:bounding {:x1 159.83750915527344, :y1 526.6875, :x2 257.0212707519531, :y2 541.8875427246094, :width 870, :height 1086.3071297989031}, :rects ({:x1 159.83750915527344, :y1 526.6875, :x2 257.0212707519531, :y2 541.8875427246094, :width 870, :height 1086.3071297989031}), :page 158}, :content {:text "random()方法"}, :properties {:color "yellow"}} {:id #uuid "63be5ec4-1654-4aa3-ba2c-6ce691196fac", :page 159, :position {:bounding {:x1 128.25, :y1 343.75001525878906, :x2 185.1925506591797, :y2 358.9499969482422, :width 870, :height 1086.3071297989031}, :rects ({:x1 128.25, :y1 343.75001525878906, :x2 185.1925506591797, :y2 358.9499969482422, :width 870, :height 1086.3071297989031}), :page 159}, :content {:text "其他方法"}, :properties {:color "yellow"}} {:id #uuid "63be5ed7-72e9-4d66-b495-017a4dcfc916", :page 157, :position {:bounding {:x1 130.8249969482422, :y1 974.2499847412109, :x2 467.4642028808594, :y2 993.4499816894531, :width 870, :height 1086.3071297989031}, :rects ({:x1 130.8249969482422, :y1 974.2499847412109, :x2 467.4642028808594, :y2 993.4499816894531, :width 870, :height 1086.3071297989031}), :page 157}, :content {:text "Math.ceil()方法始终向上舍入为最接近的整数。"}, :properties {:color "yellow"}} {:id #uuid "63be5eea-0dfd-469b-8e88-55937e05c4c4", :page 158, :position {:bounding {:x1 157.72830200195312, :y1 123.32499694824219, :x2 507.7298889160156, :y2 142.52500915527344, :width 870, :height 1086.3071297989031}, :rects ({:x1 157.72830200195312, :y1 123.32499694824219, :x2 507.7298889160156, :y2 142.52500915527344, :width 870, :height 1086.3071297989031}), :page 158}, :content {:text "Math.floor()方法始终向下舍入为最接近的整数。"}, :properties {:color "yellow"}} {:id #uuid "63be5ef2-d47e-484d-9344-55dac5f6db2e", :page 158, :position {:bounding {:x1 162.41250610351562, :y1 146.4875030517578, :x2 386.5369567871094, :y2 165.68751525878906, :width 870, :height 1086.3071297989031}, :rects ({:x1 162.41250610351562, :y1 146.4875030517578, :x2 386.5369567871094, :y2 165.68751525878906, :width 870, :height 1086.3071297989031}), :page 158}, :content {:text "Math.round()方法执行四舍五入"}, :properties {:color "yellow"}} {:id #uuid "63be5ef7-372d-4b4c-91e6-d398edee49a4", :page 158, :position {:bounding {:x1 162.41250610351562, :y1 169.0124969482422, :x2 609.7058715820312, :y2 188.2124786376953, :width 870, :height 1086.3071297989031}, :rects ({:x1 162.41250610351562, :y1 169.0124969482422, :x2 609.7058715820312, :y2 188.2124786376953, :width 870, :height 1086.3071297989031}), :page 158}, :content {:text "Math.fround()方法返回数值最接近的单精度（32 位）浮点值表示"}, :properties {:color "yellow"}} {:id #uuid "63be5fbf-7926-4187-b883-730d523b141e", :page 158, :position {:bounding {:x1 283.35125732421875, :y1 545.5625, :x2 639.6749877929688, :y2 564.7625122070312, :width 870, :height 1086.3071297989031}, :rects ({:x1 283.35125732421875, :y1 545.5625, :x2 639.6749877929688, :y2 564.7625122070312, :width 870, :height 1086.3071297989031}), :page 158}, :content {:text "返回一个 0~1 范围内的随机数，其中包含 0 但不包含 1"}, :properties {:color "yellow"}} {:id #uuid "63be5ffb-0403-4793-a0a9-4df65b6dabc1", :page 161, :position {:bounding {:x1 134.5500030517578, :y1 417.98749923706055, :x2 211.98574829101562, :y2 439.5875053405762, :width 870, :height 1086.3071297989031}, :rects ({:x1 134.5500030517578, :y1 417.98749923706055, :x2 211.98574829101562, :y2 439.5875053405762, :width 870, :height 1086.3071297989031}), :page 161}, :content {:text "Object"}, :properties {:color "green"}} {:id #uuid "63be61ab-f742-4988-884e-2244fdbfb7f0", :page 161, :position {:bounding {:x1 304.2417907714844, :y1 746.5375213623047, :x2 576.7305297851562, :y2 765.7375335693359, :width 870, :height 1086.3071297989031}, :rects ({:x1 304.2417907714844, :y1 746.5375213623047, :x2 576.7305297851562, :y2 765.7375335693359, :width 870, :height 1086.3071297989031}), :page 161}, :content {:text "表达式上下文指的是期待返回值的上下文"}, :properties {:color "yellow"}} {:id #uuid "63be61f0-889b-4835-9c76-54bb2e69091a", :page 161, :position {:bounding {:x1 126.58475494384766, :y1 881.7750091552734, :x2 459.64966583251953, :y2 900.9750061035156, :width 870, :height 1086.3071297989031}, :rects ({:x1 126.58475494384766, :y1 881.7750091552734, :x2 459.64966583251953, :y2 900.9750061035156, :width 870, :height 1086.3071297989031}), :page 161}, :content {:text "对象字面量表示法中，属性名可以是字符串或数值"}, :properties {:color "yellow"}} {:id #uuid "63be6229-c4ba-4ca8-9cb6-c66eb070d130", :page 162, :position {:bounding {:x1 0, :y1 716.8000183105469, :x2 789.5993041992188, :y2 832.4375305175781, :width 870, :height 1086.3071297989031}, :rects ({:x1 0, :y1 716.8000183105469, :x2 0, :y2 739.2000427246094, :width 870, :height 1086.3071297989031} {:x1 308.66070556640625, :y1 790.6250305175781, :x2 789.5993041992188, :y2 809.8250427246094, :width 870, :height 1086.3071297989031} {:x1 112.7874984741211, :y1 813.2375183105469, :x2 264.08141326904297, :y2 832.4375305175781, :width 870, :height 1086.3071297989031}), :page 162}, :content {:text "函数内部会使用 typeof 操作符测试每个属性是否存在，然后根据属性有无构造并显示一条消息"}, :properties {:color "yellow"}} {:id #uuid "63be6267-9bbe-4767-abed-355875869d86", :page 163, :position {:bounding {:x1 134.5500030517578, :y1 494.3250184059143, :x2 199.0675811767578, :y2 515.9250245094299, :width 870, :height 1086.3071297989031}, :rects ({:x1 134.5500030517578, :y1 494.3250184059143, :x2 199.0675811767578, :y2 515.9250245094299, :width 870, :height 1086.3071297989031}), :page 163}, :content {:text "Array"}, :properties {:color "green"}} {:id #uuid "63be62c0-c47a-46da-a1e9-bc013b0b9c6b", :page 163, :position {:bounding {:x1 142.7624969482422, :y1 663.1499938964844, :x2 219.2362823486328, :y2 681.5499877929688, :width 870, :height 1086.3071297989031}, :rects ({:x1 142.7624969482422, :y1 663.1499938964844, :x2 219.2362823486328, :y2 681.5499877929688, :width 870, :height 1086.3071297989031}), :page 163}, :content {:text "创建数组"}, :properties {:color "green"}} {:id #uuid "63be6385-8a48-4253-aabf-b893d03e4d9d", :page 164, :position {:bounding {:x1 0, :y1 399.57500648498535, :x2 789.01123046875, :y2 440.0375003814697, :width 870, :height 1086.3071297989031}, :rects ({:x1 692.0499877929688, :y1 399.57500648498535, :x2 789.01123046875, :y2 418.7750186920166, :width 870, :height 1086.3071297989031} {:x1 0, :y1 412.800012588501, :x2 0, :y2 435.20000648498535, :width 870, :height 1086.3071297989031} {:x1 112.7874984741211, :y1 420.8375186920166, :x2 294.44322967529297, :y2 440.0375003814697, :width 870, :height 1086.3071297989031}), :page 164}, :content {:text "from()用于将类数组结构转换为数组实例"}, :properties {:color "yellow"}} {:id #uuid "63be638c-129a-4609-91eb-f5e9b7845b1b", :page 164, :position {:bounding {:x1 328.07501220703125, :y1 422.0875186920166, :x2 574.433837890625, :y2 441.2875003814697, :width 870, :height 1086.3071297989031}, :rects ({:x1 328.07501220703125, :y1 422.0875186920166, :x2 574.433837890625, :y2 441.2875003814697, :width 870, :height 1086.3071297989031}), :page 164}, :content {:text "of()用于将一组参数转换为数组实例"}, :properties {:color "yellow"}} {:id #uuid "63be644d-9337-4d0e-ab21-d834b4a155b8", :page 164, :position {:bounding {:x1 167.28750610351562, :y1 491.72501373291016, :x2 318.85369873046875, :y2 504.5250015258789, :width 870, :height 1086.3071297989031}, :rects ({:x1 167.28750610351562, :y1 491.72501373291016, :x2 318.85369873046875, :y2 504.5250015258789, :width 870, :height 1086.3071297989031}), :page 164}, :content {:text "字符串会被拆分为单字符数组"}, :properties {:color "yellow"}} {:id #uuid "63be6455-ebda-475a-8faf-26e11b1efd6a", :page 164, :position {:bounding {:x1 167.28750610351562, :y1 537.0499954223633, :x2 430.4620056152344, :y2 549.8500137329102, :width 870, :height 1086.3071297989031}, :rects ({:x1 167.28750610351562, :y1 537.0499954223633, :x2 430.4620056152344, :y2 549.8500137329102, :width 870, :height 1086.3071297989031}), :page 164}, :content {:text "可以使用 from()将集合和映射转换为一个新数组"}, :properties {:color "yellow"}} {:id #uuid "63be645c-544b-4f4c-b25d-92a14ca2f754", :page 164, :position {:bounding {:x1 167.28750610351562, :y1 703.2750015258789, :x2 375.55029296875, :y2 716.0749893188477, :width 870, :height 1086.3071297989031}, :rects ({:x1 167.28750610351562, :y1 703.2750015258789, :x2 375.55029296875, :y2 716.0749893188477, :width 870, :height 1086.3071297989031}), :page 164}, :content {:text "Array.from()对现有数组执行浅复制"}, :properties {:color "yellow"}} {:id #uuid "63be6462-4669-4baf-8497-d15634c33d7f", :page 164, :position {:bounding {:x1 167.28750610351562, :y1 824.0750122070312, :x2 295.58856201171875, :y2 836.875, :width 870, :height 1086.3071297989031}, :rects ({:x1 167.28750610351562, :y1 824.0750122070312, :x2 295.58856201171875, :y2 836.875, :width 870, :height 1086.3071297989031}), :page 164}, :content {:text "可以使用任何可迭代对象"}, :properties {:color "yellow"}} {:id #uuid "63be6468-2990-4970-914e-98f5732a0e78", :page 165, :position {:bounding {:x1 135.6999969482422, :y1 121.8375244140625, :x2 359.79119873046875, :y2 134.63751220703125, :width 870, :height 1086.3071297989031}, :rects ({:x1 135.6999969482422, :y1 121.8375244140625, :x2 359.79119873046875, :y2 134.63751220703125, :width 870, :height 1086.3071297989031}), :page 165}, :content {:text "arguments 对象可以被轻松地转换为数组"}, :properties {:color "yellow"}} {:id #uuid "63be6484-ba49-4c2a-854d-9807df101535", :page 165, :position {:bounding {:x1 142.70431518554688, :y1 212.48751831054688, :x2 368.0396423339844, :y2 225.28750610351562, :width 870, :height 1086.3071297989031}, :rects ({:x1 142.70431518554688, :y1 212.48751831054688, :x2 368.0396423339844, :y2 225.28750610351562, :width 870, :height 1086.3071297989031}), :page 165}, :content {:text "rom()也能转换带有必要属性的自定义对象"}, :properties {:color "yellow"}} {:id #uuid "63be64bd-7bba-4547-a690-799f00a62f50", :page 165, :position {:bounding {:x1 142.7624969482422, :y1 617.25, :x2 219.2362823486328, :y2 635.6500091552734, :width 870, :height 1086.3071297989031}, :rects ({:x1 142.7624969482422, :y1 617.25, :x2 219.2362823486328, :y2 635.6500091552734, :width 870, :height 1086.3071297989031}), :page 165}, :content {:text "数组空位"}, :properties {:color "green"}} {:id #uuid "63be64e0-9bc8-4dd1-beac-8b2f4800e640", :page 165, :position {:bounding {:x1 112.7874984741211, :y1 724.0000152587891, :x2 462.0946350097656, :y2 736.8000030517578, :width 870, :height 1086.3071297989031}, :rects ({:x1 112.7874984741211, :y1 724.0000152587891, :x2 462.0946350097656, :y2 736.8000030517578, :width 870, :height 1086.3071297989031}), :page 165}, :content {:text "const options = [,,,,,]; // 创建包含 5 个元素的数组"}, :properties {:color "yellow"}} {:id #uuid "63be64f6-06cf-4ba9-a1a0-f3f2ff2c4301", :page 165, :position {:bounding {:x1 0, :y1 540.7999877929688, :x2 757.7727661132812, :y2 820.3249969482422, :width 870, :height 1086.3071297989031}, :rects ({:x1 0, :y1 540.7999877929688, :x2 0, :y2 563.1999855041504, :width 870, :height 1086.3071297989031} {:x1 607.3875122070312, :y1 779.1999969482422, :x2 757.7727661132812, :y2 798.3999938964844, :width 870, :height 1086.3071297989031} {:x1 81.2125015258789, :y1 801.1249847412109, :x2 406.6281433105469, :y2 820.3249969482422, :width 870, :height 1086.3071297989031}), :page 165}, :content {:text "ES6 新增方法普遍将这些空位当成存在的元素，只不过值为 undefined"}, :properties {:color "yellow"}} {:id #uuid "63be65c2-3cef-4a1f-96b7-3e08982f9348", :page 166, :position {:bounding {:x1 174.33750915527344, :y1 643.6875305175781, :x2 250.811279296875, :y2 662.0875244140625, :width 870, :height 1086.3071297989031}, :rects ({:x1 174.33750915527344, :y1 643.6875305175781, :x2 250.811279296875, :y2 662.0875244140625, :width 870, :height 1086.3071297989031}), :page 166}, :content {:text "数组索引"}, :properties {:color "green"}} {:id #uuid "63be65e6-2f5b-468e-b6e9-5885c63f6020", :page 166, :position {:bounding {:x1 143.03750610351562, :y1 975.8500061035156, :x2 474.0401916503906, :y2 995.0500183105469, :width 870, :height 1086.3071297989031}, :rects ({:x1 143.03750610351562, :y1 975.8500061035156, :x2 474.0401916503906, :y2 995.0500183105469, :width 870, :height 1086.3071297989031}), :page 166}, :content {:text "数组 length 属性的独特之处在于，它不是只读的"}, :properties {:color "yellow"}} {:id #uuid "63be6612-ae52-49d9-8052-8496625017b1", :page 167, :position {:bounding {:x1 171.8625030517578, :y1 689.8500061035156, :x2 428.9982604980469, :y2 709.0500183105469, :width 870, :height 1086.3071297989031}, :rects ({:x1 171.8625030517578, :y1 689.8500061035156, :x2 428.9982604980469, :y2 709.0500183105469, :width 870, :height 1086.3071297989031}), :page 167}, :content {:text "数组最多可以包含 4 294 967 295 个元素"}, :properties {:color "yellow"}} {:id #uuid "63be6619-d53d-47c8-a734-adfa5a858c2a", :page 167, :position {:bounding {:x1 142.7624969482422, :y1 790.9249877929688, :x2 219.2362823486328, :y2 809.3250122070312, :width 870, :height 1086.3071297989031}, :rects ({:x1 142.7624969482422, :y1 790.9249877929688, :x2 219.2362823486328, :y2 809.3250122070312, :width 870, :height 1086.3071297989031}), :page 167}, :content {:text "检测数组"}, :properties {:color "green"}} {:id #uuid "63be67fa-8b8e-4d98-8ed1-a8dfd366eaab", :page 167, :position {:bounding {:x1 0, :y1 492.8000030517578, :x2 758.6627197265625, :y2 868.6125030517578, :width 870, :height 1086.3071297989031}, :rects ({:x1 0, :y1 492.8000030517578, :x2 0, :y2 515.1999969482422, :width 870, :height 1086.3071297989031} {:x1 501.21099853515625, :y1 826.8874969482422, :x2 758.6627197265625, :y2 846.0875091552734, :width 870, :height 1086.3071297989031} {:x1 81.2125015258789, :y1 849.4125061035156, :x2 371.67645263671875, :y2 868.6125030517578, :width 870, :height 1086.3071297989031}), :page 167}, :content {:text "在只有一个网页（因而只有一个全局作用域）的情况下，使用 instanceof 操作符"}, :properties {:color "yellow"}} {:id #uuid "63be680d-867c-45c8-81ae-46116253d9de", :page 168, :position {:bounding {:x1 388.2124938964844, :y1 122.7125244140625, :x2 551.0783081054688, :y2 141.91253662109375, :width 870, :height 1086.3071297989031}, :rects ({:x1 388.2124938964844, :y1 122.7125244140625, :x2 551.0783081054688, :y2 141.91253662109375, :width 870, :height 1086.3071297989031}), :page 168}, :content {:text " Array.isArray()方法"}, :properties {:color "yellow"}} {:id #uuid "63be6819-06c4-40a7-b655-124019baf173", :page 168, :position {:bounding {:x1 174.33750915527344, :y1 237.4375, :x2 269.92974853515625, :y2 255.8375244140625, :width 870, :height 1086.3071297989031}, :rects ({:x1 174.33750915527344, :y1 237.4375, :x2 269.92974853515625, :y2 255.8375244140625, :width 870, :height 1086.3071297989031}), :page 168}, :content {:text "迭代器方法"}, :properties {:color "green"}} {:id #uuid "63be682d-0853-4744-844c-777efbcf076d", :page 168, :position {:bounding {:x1 205.2624969482422, :y1 297.1750183105469, :x2 408.4648742675781, :y2 316.3750305175781, :width 870, :height 1086.3071297989031}, :rects ({:x1 205.2624969482422, :y1 297.1750183105469, :x2 408.4648742675781, :y2 316.3750305175781, :width 870, :height 1086.3071297989031}), :page 168}, :content {:text "keys()返回数组索引的迭代器"}, :properties {:color "yellow"}} {:id #uuid "63be6834-26ad-4fa3-976c-ecbf117e25ac", :page 168, :position {:bounding {:x1 423.2250061035156, :y1 297.1750183105469, :x2 643.8001708984375, :y2 316.3750305175781, :width 870, :height 1086.3071297989031}, :rects ({:x1 423.2250061035156, :y1 297.1750183105469, :x2 643.8001708984375, :y2 316.3750305175781, :width 870, :height 1086.3071297989031}), :page 168}, :content {:text "values()返回数组元素的迭代器"}, :properties {:color "yellow"}} {:id #uuid "63be683a-5110-4b28-b35e-d445c73535ce", :page 168, :position {:bounding {:x1 0, :y1 297.1750183105469, :x2 788.9860229492188, :y2 371.20001220703125, :width 870, :height 1086.3071297989031}, :rects ({:x1 681.3624877929688, :y1 297.1750183105469, :x2 788.9860229492188, :y2 316.3750305175781, :width 870, :height 1086.3071297989031} {:x1 112.80000305175781, :y1 318.4375, :x2 237.97789001464844, :y2 337.63751220703125, :width 870, :height 1086.3071297989031} {:x1 0, :y1 348.8000183105469, :x2 0, :y2 371.20001220703125, :width 870, :height 1086.3071297989031}), :page 168}, :content {:text "entries()返回索引/值对的迭代器"}, :properties {:color "yellow"}} {:id #uuid "63be6848-95a1-4015-9984-14fb9ad436ea", :page 168, :position {:bounding {:x1 143.03750610351562, :y1 519.6999969482422, :x2 496.51983642578125, :y2 538.9000091552734, :width 870, :height 1086.3071297989031}, :rects ({:x1 143.03750610351562, :y1 519.6999969482422, :x2 496.51983642578125, :y2 538.9000091552734, :width 870, :height 1086.3071297989031}), :page 168}, :content {:text "使用 ES6 的解构可以非常容易地在循环中拆分键/值对"}, :properties {:color "yellow"}} {:id #uuid "63be6850-f1bc-44e8-b76e-aedf880a39f0", :page 168, :position {:bounding {:x1 174.33750915527344, :y1 834.1625061035156, :x2 308.1666259765625, :y2 852.5625, :width 870, :height 1086.3071297989031}, :rects ({:x1 174.33750915527344, :y1 834.1625061035156, :x2 308.1666259765625, :y2 852.5625, :width 870, :height 1086.3071297989031}), :page 168}, :content {:text "复制和填充方法"}, :properties {:color "green"}} {:id #uuid "63be6860-a1ff-4428-a389-3026daffae0e", :page 168, :position {:bounding {:x1 173.1999969482422, :y1 937.7875366210938, :x2 593.4703216552734, :y2 956.987548828125, :width 870, :height 1086.3071297989031}, :rects ({:x1 173.1999969482422, :y1 937.7875366210938, :x2 593.4703216552734, :y2 956.987548828125, :width 870, :height 1086.3071297989031}), :page 168}, :content {:text " fill()方法可以向一个已有的数组中插入全部或部分相同的值"}, :properties {:color "yellow"}} {:id #uuid "63be68a3-53ee-422a-b914-dc7c02dca9fe", :page 169, :position {:bounding {:x1 0, :y1 524.8000030517578, :x2 758.3999633789062, :y2 797.1375274658203, :width 870, :height 1086.3071297989031}, :rects ({:x1 0, :y1 524.8000030517578, :x2 0, :y2 547.1999969482422, :width 870, :height 1086.3071297989031} {:x1 230.9375, :y1 756.5750274658203, :x2 758.3999633789062, :y2 775.7750396728516, :width 870, :height 1086.3071297989031} {:x1 81.2125015258789, :y1 777.9375152587891, :x2 202.33084106445312, :y2 797.1375274658203, :width 870, :height 1086.3071297989031}), :page 169}, :content {:text "copyWithin()会按照指定范围浅复制数组中的部分内容，然后将它们插入到指定索引开始的位置"}, :properties {:color "yellow"}} {:id #uuid "63be6961-64f7-4980-becc-97b6fb07916a", :page 169, :position {:bounding {:x1 135.6999969482422, :y1 303.13751792907715, :x2 367.25982666015625, :y2 315.9375057220459, :width 870, :height 1086.3071297989031}, :rects ({:x1 135.6999969482422, :y1 303.13751792907715, :x2 367.25982666015625, :y2 315.9375057220459, :width 870, :height 1086.3071297989031}), :page 169}, :content {:text "用 7 填充索引大于等于 1 且小于 3 的元素"}, :properties {:color "yellow"}} {:id #uuid "63be69b1-634e-4812-ab69-303f4d211c69", :page 170, :position {:bounding {:x1 174.33750915527344, :y1 771.3625183105469, :x2 250.811279296875, :y2 789.7625122070312, :width 870, :height 1086.3071297989031}, :rects ({:x1 174.33750915527344, :y1 771.3625183105469, :x2 250.811279296875, :y2 789.7625122070312, :width 870, :height 1086.3071297989031}), :page 170}, :content {:text "转换方法"}, :properties {:color "green"}} {:id #uuid "63be69b9-7167-4a3c-b82c-6db9e4d80646", :page 172, :position {:bounding {:x1 174.33750915527344, :y1 212.0500030517578, :x2 231.69285583496094, :y2 230.4499969482422, :width 870, :height 1086.3071297989031}, :rects ({:x1 174.33750915527344, :y1 212.0500030517578, :x2 231.69285583496094, :y2 230.4499969482422, :width 870, :height 1086.3071297989031}), :page 172}, :content {:text "栈方法"}, :properties {:color "green"}} {:id #uuid "63be69be-cb53-4d8e-b49f-dab7fd687af7", :page 172, :position {:bounding {:x1 174.33750915527344, :y1 861.5499877929688, :x2 250.811279296875, :y2 879.9499816894531, :width 870, :height 1086.3071297989031}, :rects ({:x1 174.33750915527344, :y1 861.5499877929688, :x2 250.811279296875, :y2 879.9499816894531, :width 870, :height 1086.3071297989031}), :page 172}, :content {:text "队列方法"}, :properties {:color "green"}} {:id #uuid "63be69c4-b681-4ad8-b3cc-ab81d331709e", :page 173, :position {:bounding {:x1 153.35000610351562, :y1 631.0874996185303, :x2 229.8237762451172, :y2 649.4875240325928, :width 870, :height 1086.3071297989031}, :rects ({:x1 153.35000610351562, :y1 631.0874996185303, :x2 229.8237762451172, :y2 649.4875240325928, :width 870, :height 1086.3071297989031}), :page 173}, :content {:text "排序方法"}, :properties {:color "green"}} {:id #uuid "63be69d0-436c-4d19-ac9f-87aeb37c7bb4", :page 175, :position {:bounding {:x1 151.91250610351562, :y1 124.16253662109375, :x2 228.3862762451172, :y2 142.5625, :width 870, :height 1086.3071297989031}, :rects ({:x1 151.91250610351562, :y1 124.16253662109375, :x2 228.3862762451172, :y2 142.5625, :width 870, :height 1086.3071297989031}), :page 175}, :content {:text "操作方法"}, :properties {:color "green"}} {:id #uuid "63be69d9-6fe8-4dcd-81d3-208a6b29c739", :page 176, :position {:bounding {:x1 184.9375, :y1 932.8374938964844, :x2 318.7666320800781, :y2 951.2374877929688, :width 870, :height 1086.3071297989031}, :rects ({:x1 184.9375, :y1 932.8374938964844, :x2 318.7666320800781, :y2 951.2374877929688, :width 870, :height 1086.3071297989031}), :page 176}, :content {:text "搜索和位置方法"}, :properties {:color "green"}} {:id #uuid "63be69e1-882f-4190-8326-70212b9e3937", :page 178, :position {:bounding {:x1 184.9375, :y1 400.43750762939453, :x2 261.4112854003906, :y2 418.8375015258789, :width 870, :height 1086.3071297989031}, :rects ({:x1 184.9375, :y1 400.43750762939453, :x2 261.4112854003906, :y2 418.8375015258789, :width 870, :height 1086.3071297989031}), :page 178}, :content {:text "迭代方法"}, :properties {:color "green"}} {:id #uuid "63be69e7-1040-486d-a71d-d579ec3cbdb1", :page 179, :position {:bounding {:x1 135.8495330810547, :y1 538.3125152587891, :x2 229.8237762451172, :y2 562.3125152587891, :width 870, :height 1086.3071297989031}, :rects ({:x1 135.8495330810547, :y1 538.3125152587891, :x2 135.8530731201172, :y2 562.3125152587891, :width 870, :height 1086.3071297989031} {:x1 153.35000610351562, :y1 540.2375030517578, :x2 229.8237762451172, :y2 558.6375274658203, :width 870, :height 1086.3071297989031}), :page 179}, :content {:text "归并方法"}, :properties {:color "green"}} {:id #uuid "63be6a08-fb0d-4102-91dc-de90944e1ae6", :page 180, :position {:bounding {:x1 145.3607635498047, :y1 228.8874969482422, :x2 255.2095489501953, :y2 256.8874969482422, :width 870, :height 1086.3071297989031}, :rects ({:x1 145.3607635498047, :y1 228.8874969482422, :x2 145.36378479003906, :y2 256.8874969482422, :width 870, :height 1086.3071297989031} {:x1 166.03750610351562, :y1 229.81251525878906, :x2 255.2095489501953, :y2 252.21250915527344, :width 870, :height 1086.3071297989031}), :page 180}, :content {:text "定型数组"}, :properties {:color "green"}} {:id #uuid "63be6a22-4b5f-422e-a201-13babab8dd75", :page 188, :position {:bounding {:x1 166.1374969482422, :y1 833.300048828125, :x2 204.9005584716797, :y2 854.9000549316406, :width 870, :height 1086.3071297989031}, :rects ({:x1 166.1374969482422, :y1 833.300048828125, :x2 204.9005584716797, :y2 854.9000549316406, :width 870, :height 1086.3071297989031}), :page 188}, :content {:text "Map"}, :properties {:color "green"}} {:id #uuid "63be6a30-3d34-4f5e-a995-cc8d644c6c67", :page 193, :position {:bounding {:x1 134.5500030517578, :y1 662.9500045776367, :x2 224.8996124267578, :y2 684.5500030517578, :width 870, :height 1086.3071297989031}, :rects ({:x1 134.5500030517578, :y1 662.9500045776367, :x2 224.8996124267578, :y2 684.5500030517578, :width 870, :height 1086.3071297989031}), :page 193}, :content {:text "WeakMap"}, :properties {:color "green"}} {:id #uuid "63be6a3f-9238-435f-b044-c399dd08dc80", :page 198, :position {:bounding {:x1 166.1374969482422, :y1 122.92500305175781, :x2 204.9005584716797, :y2 144.52499389648438, :width 870, :height 1086.3071297989031}, :rects ({:x1 166.1374969482422, :y1 122.92500305175781, :x2 204.9005584716797, :y2 144.52499389648438, :width 870, :height 1086.3071297989031}), :page 198}, :content {:text "Set"}, :properties {:color "green"}} {:id #uuid "63be6a52-728f-428b-a100-de15e47fa9dc", :page 203, :position {:bounding {:x1 134.5500030517578, :y1 248.49998474121094, :x2 224.8996124267578, :y2 270.09999084472656, :width 870, :height 1086.3071297989031}, :rects ({:x1 134.5500030517578, :y1 248.49998474121094, :x2 224.8996124267578, :y2 270.09999084472656, :width 870, :height 1086.3071297989031}), :page 203}, :content {:text "WeakSet"}, :properties {:color "green"}} {:id #uuid "63be6a5d-63a1-415d-8e5d-b58fda46ccaa", :page 205, :position {:bounding {:x1 113.77276611328125, :y1 743.7375183105469, :x2 290.50592041015625, :y2 771.7375183105469, :width 870, :height 1086.3071297989031}, :rects ({:x1 113.77276611328125, :y1 743.7375183105469, :x2 113.77579498291016, :y2 771.7375183105469, :width 870, :height 1086.3071297989031} {:x1 134.4375, :y1 744.6500091552734, :x2 290.50592041015625, :y2 767.0500183105469, :width 870, :height 1086.3071297989031}), :page 205}, :content {:text "迭代与扩展操作"}, :properties {:color "green"}} {:id #uuid "63be6c10-625b-4dd3-b909-401a942f2312", :page 171, :position {:bounding {:x1 156.97500610351562, :y1 190.3750057220459, :x2 621.5380249023438, :y2 209.5750026702881, :width 870, :height 1086.3071297989031}, :rects ({:x1 156.97500610351562, :y1 190.3750057220459, :x2 621.5380249023438, :y2 209.5750026702881, :width 870, :height 1086.3071297989031}), :page 171}, :content {:text " toLocaleString()方法时，会得到一个逗号分隔的数组值的字符串"}, :properties {:color "yellow"}} {:id #uuid "63be6c15-490e-4c1d-b7c9-e19afe5338bf", :page 171, :position {:bounding {:x1 370.83062744140625, :y1 212.89999961853027, :x2 693.6815795898438, :y2 232.10001182556152, :width 870, :height 1086.3071297989031}, :rects ({:x1 370.83062744140625, :y1 212.89999961853027, :x2 693.6815795898438, :y2 232.10001182556152, :width 870, :height 1086.3071297989031}), :page 171}, :content {:text "会调用数组每个值的 toLocaleString()方法"}, :properties {:color "yellow"}} {:id #uuid "63be6c1b-0f91-4b35-9917-d648ca947704", :page 171, :position {:bounding {:x1 0, :y1 12.80000114440918, :x2 757.559814453125, :y2 164.4375057220459, :width 870, :height 1086.3071297989031}, :rects ({:x1 0, :y1 12.80000114440918, :x2 0, :y2 35.200002670288086, :width 870, :height 1086.3071297989031} {:x1 636.8875122070312, :y1 123.96249961853027, :x2 757.559814453125, :y2 143.16249656677246, :width 870, :height 1086.3071297989031} {:x1 81.20000457763672, :y1 145.2375087738037, :x2 397.5849914550781, :y2 164.4375057220459, :width 870, :height 1086.3071297989031}), :page 171}, :content {:text "alert()期待字符串，所以会在后台调用数组的 toString()方法"}, :properties {:color "yellow"}} {:id #uuid "63be6c5d-4be7-4e0c-8f34-48d0f4f48a6e", :page 171, :position {:bounding {:x1 0, :y1 524.8000030517578, :x2 758.2365112304688, :y2 810.1124877929688, :width 870, :height 1086.3071297989031}, :rects ({:x1 0, :y1 524.8000030517578, :x2 0, :y2 547.1999969482422, :width 870, :height 1086.3071297989031} {:x1 375.88751220703125, :y1 769.5499877929688, :x2 758.2365112304688, :y2 788.7499694824219, :width 870, :height 1086.3071297989031} {:x1 81.20000457763672, :y1 790.9125061035156, :x2 172.0175018310547, :y2 810.1124877929688, :width 870, :height 1086.3071297989031}), :page 171}, :content {:text "join()方法接收一个参数，即字符串分隔符，返回包含所有项的字符串"}, :properties {:color "yellow"}} {:id #uuid "63be71cd-9d87-4f96-aeea-731b79761aca", :page 172, :position {:bounding {:x1 141.4250030517578, :y1 339.4500198364258, :x2 688.7147064208984, :y2 358.65003204345703, :width 870, :height 1086.3071297989031}, :rects ({:x1 141.4250030517578, :y1 339.4500198364258, :x2 688.7147064208984, :y2 358.65003204345703, :width 870, :height 1086.3071297989031}), :page 172}, :content {:text "push()方法接收任意数量的参数，并将它们添加到数组末尾，返回数组的最新长度"}, :properties {:color "yellow"}} {:id #uuid "63be7332-53b9-4338-a3dd-0c555a2289d6", :page 172, :position {:bounding {:x1 0, :y1 339.4500198364258, :x2 789.1201782226562, :y2 379.91251373291016, :width 870, :height 1086.3071297989031}, :rects ({:x1 700.6375122070312, :y1 339.4500198364258, :x2 789.1201782226562, :y2 358.65003204345703, :width 870, :height 1086.3071297989031} {:x1 0, :y1 348.7999954223633, :x2 0, :y2 371.2000198364258, :width 870, :height 1086.3071297989031} {:x1 112.80000305175781, :y1 360.7125015258789, :x2 595.7228393554688, :y2 379.91251373291016, :width 870, :height 1086.3071297989031}), :page 172}, :content {:text "pop()方法则用于删除数组的最后一项，同时减少数组的 length 值，返回被删除的项"}, :properties {:color "yellow"}} {:id #uuid "63be7366-89d7-4ccd-afc6-fe6769452595", :page 172, :position {:bounding {:x1 0, :y1 780.7999877929688, :x2 789.1129150390625, :y2 984.2749938964844, :width 870, :height 1086.3071297989031}, :rects ({:x1 0, :y1 780.7999877929688, :x2 0, :y2 803.2000122070312, :width 870, :height 1086.3071297989031} {:x1 640.5125122070312, :y1 943.7999877929688, :x2 789.1129150390625, :y2 963, :width 870, :height 1086.3071297989031} {:x1 112.7874984741211, :y1 965.0750122070312, :x2 380.875, :y2 984.2749938964844, :width 870, :height 1086.3071297989031}), :page 172}, :content {:text "shift()，它会删除数组的第一项并返回它，然后数组长度减 1"}, :properties {:color "yellow"}} {:id #uuid "63be7372-1c4f-472b-abd5-4716f2fe3942", :page 172, :position {:bounding {:x1 396.04541015625, :y1 965.0749969482422, :x2 757.4395751953125, :y2 984.2749938964844, :width 870, :height 1086.3071297989031}, :rects ({:x1 396.04541015625, :y1 965.0749969482422, :x2 757.4395751953125, :y2 984.2749938964844, :width 870, :height 1086.3071297989031}), :page 172}, :content {:text "使用 shift()和 push()，可以把数组当成队列来使用"}, :properties {:color "yellow"}} {:id #uuid "63be76e5-fa0c-4e5b-a317-77fd39ada962", :page 173, :position {:bounding {:x1 0, :y1 188.79999923706055, :x2 757.5237426757812, :y2 387.2624931335449, :width 870, :height 1086.3071297989031}, :rects ({:x1 0, :y1 188.79999923706055, :x2 0, :y2 211.20000839233398, :width 870, :height 1086.3071297989031} {:x1 495.375, :y1 346.6999931335449, :x2 757.5237426757812, :y2 365.9000053405762, :width 870, :height 1086.3071297989031} {:x1 81.20000457763672, :y1 368.0625114440918, :x2 474.87837982177734, :y2 387.2624931335449, :width 870, :height 1086.3071297989031}), :page 173}, :content {:text "unshift()就是执行跟 shift()相反的操作：在数组开头添加任意多个值，然后返回新的数组长度"}, :properties {:color "yellow"}} {:id #uuid "63be76f2-9861-408c-88c1-dae1053b0d32", :page 173, :position {:bounding {:x1 0, :y1 412.8000183105469, :x2 757.6144409179688, :y2 706.6625366210938, :width 870, :height 1086.3071297989031}, :rects ({:x1 0, :y1 412.8000183105469, :x2 0, :y2 435.20001792907715, :width 870, :height 1086.3071297989031} {:x1 634.7875366210938, :y1 666.1000213623047, :x2 757.6144409179688, :y2 685.3000183105469, :width 870, :height 1086.3071297989031} {:x1 81.20000457763672, :y1 687.4625244140625, :x2 232.58812713623047, :y2 706.6625366210938, :width 870, :height 1086.3071297989031}), :page 173}, :content {:text "reverse()方法就是将数组元素反向排列"}, :properties {:color "yellow"}} {:id #uuid "63be774b-dd42-4a63-b01f-ce071a7f890f", :page 173, :position {:bounding {:x1 201.53750610351562, :y1 812.6875305175781, :x2 449.2281799316406, :y2 831.8875427246094, :width 870, :height 1086.3071297989031}, :rects ({:x1 201.53750610351562, :y1 812.6875305175781, :x2 449.2281799316406, :y2 831.8875427246094, :width 870, :height 1086.3071297989031}), :page 173}, :content {:text "sort()会按照升序重新排列数组元素"}, :properties {:color "yellow"}} {:id #uuid "63be776f-de22-435b-8f39-7bd438fda891", :page 173, :position {:bounding {:x1 277.6000061035156, :y1 981.7875061035156, :x2 506.98004150390625, :y2 1000.9875183105469, :width 870, :height 1086.3071297989031}, :rects ({:x1 277.6000061035156, :y1 981.7875061035156, :x2 506.98004150390625, :y2 1000.9875183105469, :width 870, :height 1086.3071297989031}), :page 173}, :content {:text "sort()方法可以接收一个比较函数"}, :properties {:color "yellow"}} {:id #uuid "63be77aa-4eef-41e1-b4d9-341814f7a161", :page 174, :position {:bounding {:x1 143.03750610351562, :y1 122.7125015258789, :x2 669.9712219238281, :y2 141.91251373291016, :width 870, :height 1086.3071297989031}, :rects ({:x1 143.03750610351562, :y1 122.7125015258789, :x2 669.9712219238281, :y2 141.91251373291016, :width 870, :height 1086.3071297989031}), :page 174}, :content {:text "比较函数接收两个参数，如果第一个参数应该排在第二个参数前面，就返回负值"}, :properties {:color "yellow"}} {:id #uuid "63be787a-a0f8-41b7-b5a2-752bbe933c73", :page 175, :position {:bounding {:x1 445.5500183105469, :y1 161.28749656677246, :x2 544.8795776367188, :y2 180.48749351501465, :width 870, :height 1086.3071297989031}, :rects ({:x1 445.5500183105469, :y1 161.28749656677246, :x2 544.8795776367188, :y2 180.48749351501465, :width 870, :height 1086.3071297989031}), :page 175}, :content {:text "concat()方法"}, :properties {:color "yellow"}} {:id #uuid "63be78a5-6759-42cb-81a9-5fb204caba7b", :page 175, :position {:bounding {:x1 0, :y1 204.8000030517578, :x2 762.0772705078125, :y2 442.02500915527344, :width 870, :height 1086.3071297989031}, :rects ({:x1 0, :y1 204.8000030517578, :x2 0, :y2 227.2000026702881, :width 870, :height 1086.3071297989031} {:x1 620, :y1 405.1000061035156, :x2 762.0772705078125, :y2 419.5, :width 870, :height 1086.3071297989031} {:x1 81.20000457763672, :y1 427.625, :x2 169.93931579589844, :y2 442.02500915527344, :width 870, :height 1086.3071297989031}), :page 175}, :content {:text "Symbol.isConcatSpreadable"}, :properties {:color "yellow"}} {:id #uuid "63be7942-cfbc-487e-a1b1-f9bc384307f9", :page 175, :position {:bounding {:x1 168.4250030517578, :y1 784.1375274658203, :x2 625.9984741210938, :y2 803.3375396728516, :width 870, :height 1086.3071297989031}, :rects ({:x1 168.4250030517578, :y1 784.1375274658203, :x2 625.9984741210938, :y2 803.3375396728516, :width 870, :height 1086.3071297989031}), :page 175}, :content {:text "方法 slice()用于创建一个包含原有数组中一个或多个元素的新数组"}, :properties {:color "yellow"}} {:id #uuid "63be7c46-4081-4b5c-8830-9e94ad4dd4ec", :page 177, :position {:bounding {:x1 0, :y1 444.8000030517578, :x2 757.5860595703125, :y2 733.8625183105469, :width 870, :height 1086.3071297989031}, :rects ({:x1 0, :y1 444.8000030517578, :x2 0, :y2 467.1999969482422, :width 870, :height 1086.3071297989031} {:x1 675.7250366210938, :y1 693.3999938964844, :x2 757.5860595703125, :y2 712.5999755859375, :width 870, :height 1086.3071297989031} {:x1 81.20000457763672, :y1 714.6625061035156, :x2 202.26194763183594, :y2 733.8625183105469, :width 870, :height 1086.3071297989031}), :page 177}, :content {:text "find()返回第一个匹配的元素"}, :properties {:color "yellow"}} {:id #uuid "63be7c4e-8b3b-4870-a60d-a0088c3ce20a", :page 177, :position {:bounding {:x1 209.5625, :y1 715.9125061035156, :x2 485.8046569824219, :y2 735.1125183105469, :width 870, :height 1086.3071297989031}, :rects ({:x1 209.5625, :y1 715.9125061035156, :x2 485.8046569824219, :y2 735.1125183105469, :width 870, :height 1086.3071297989031}), :page 177}, :content {:text "findIndex()返回第一个匹配元素的索引"}, :properties {:color "yellow"}} {:id #uuid "63be7ca0-5ded-405a-af45-ad5e49dcd4b1", :page 177, :position {:bounding {:x1 112.7874984741211, :y1 929.1500244140625, :x2 598.27197265625, :y2 941.9500427246094, :width 870, :height 1086.3071297989031}, :rects ({:x1 112.7874984741211, :y1 929.1500244140625, :x2 302.18297576904297, :y2 941.9500427246094, :width 870, :height 1086.3071297989031} {:x1 318.8999938964844, :y1 929.1500244140625, :x2 598.27197265625, :y2 941.9500427246094, :width 870, :height 1086.3071297989031}), :page 177}, :content {:text "alert(people.find((element, index, array) => element.age < 28));"}, :properties {:color "yellow"}} {:id #uuid "63be7cb9-6d53-426f-b756-7fa27b50eb36", :page 178, :position {:bounding {:x1 167.28750610351562, :y1 178.7125244140625, :x2 412.1585388183594, :y2 191.51251220703125, :width 870, :height 1086.3071297989031}, :rects ({:x1 167.28750610351562, :y1 178.7125244140625, :x2 412.1585388183594, :y2 191.51251220703125, :width 870, :height 1086.3071297989031}), :page 178}, :content {:text "找到匹配后，永远不会检查数组的最后一个元素"}, :properties {:color "yellow"}} {:id #uuid "63be7cd3-abe0-4e38-9373-2c2c86a34721", :page 178, :position {:bounding {:x1 0, :y1 436.38751220703125, :x2 789.981201171875, :y2 515.2000122070312, :width 870, :height 1086.3071297989031}, :rects ({:x1 426.5537109375, :y1 436.38751220703125, :x2 789.981201171875, :y2 455.5875244140625, :width 870, :height 1086.3071297989031} {:x1 112.7874984741211, :y1 458.9125061035156, :x2 585.5283203125, :y2 478.1125183105469, :width 870, :height 1086.3071297989031} {:x1 0, :y1 492.8000183105469, :x2 0, :y2 515.2000122070312, :width 870, :height 1086.3071297989031}), :page 178}, :content {:text "每个方法接收两个参数：以每一项为参数运行的函数，以及可选的作为函数运行上下文的作用域对象（影响函数中 this 的值"}, :properties {:color "yellow"}} {:id #uuid "63be7cdc-89aa-4c0e-84ca-8019251a531c", :page 178, :position {:bounding {:x1 0, :y1 458.9125061035156, :x2 789.0375366210938, :y2 531.2000122070312, :width 870, :height 1086.3071297989031}, :rects ({:x1 608.1256713867188, :y1 458.9125061035156, :x2 789.0375366210938, :y2 478.1125183105469, :width 870, :height 1086.3071297989031} {:x1 112.7874984741211, :y1 481.4375, :x2 383.82540130615234, :y2 500.63751220703125, :width 870, :height 1086.3071297989031} {:x1 0, :y1 508.8000183105469, :x2 0, :y2 531.2000122070312, :width 870, :height 1086.3071297989031}), :page 178}, :content {:text "传给每个方法的函数接收 3个参数：数组元素、元素索引和数组本身"}, :properties {:color "yellow"}} {:id #uuid "63be7f2d-9234-4923-9654-5a701d25ee23", :page 178, :position {:bounding {:x1 447.6206970214844, :y1 594.2250061035156, :x2 705.0286865234375, :y2 613.4250183105469, :width 870, :height 1086.3071297989031}, :rects ({:x1 447.6206970214844, :y1 594.2250061035156, :x2 705.0286865234375, :y2 613.4250183105469, :width 870, :height 1086.3071297989031}), :page 178}, :content {:text "返回由每次函数调用的结果构成的数组"}, :properties {:color "yellow"}} {:id #uuid "63be7fc0-eae6-411a-a490-388ff18ab7fd", :page 179, :position {:bounding {:x1 112.7874984741211, :y1 268.9000244140625, :x2 584.243896484375, :y2 281.70001220703125, :width 870, :height 1086.3071297989031}, :rects ({:x1 112.7874984741211, :y1 268.9000244140625, :x2 361.1998596191406, :y2 281.70001220703125, :width 870, :height 1086.3071297989031} {:x1 372.3374938964844, :y1 268.9000244140625, :x2 584.243896484375, :y2 281.70001220703125, :width 870, :height 1086.3071297989031}), :page 179}, :content {:text "let mapResult = numbers.map((item, index, array) => item * 2);"}, :properties {:color "yellow"}} {:id #uuid "63be7fdf-bc96-4d9a-9932-fea0980a62ba", :page 179, :position {:bounding {:x1 240.375, :y1 369.7999939918518, :x2 713.001708984375, :y2 388.99997568130493, :width 870, :height 1086.3071297989031}, :rects ({:x1 240.375, :y1 369.7999939918518, :x2 713.001708984375, :y2 388.99997568130493, :width 870, :height 1086.3071297989031}), :page 179}, :content {:text "forEach()方法。这个方法只会对每一项运行传入的函数，没有返回值"}, :properties {:color "yellow"}} {:id #uuid "63be800b-f488-4335-8f24-6e0226778428", :page 179, :position {:bounding {:x1 415.3000183105469, :y1 599.9749908447266, :x2 742.8092651367188, :y2 619.1749877929688, :width 870, :height 1086.3071297989031}, :rects ({:x1 415.3000183105469, :y1 599.9749908447266, :x2 742.8092651367188, :y2 619.1749877929688, :width 870, :height 1086.3071297989031}), :page 179}, :content {:text "reduce()方法从数组第一项开始遍历到最后一项"}, :properties {:color "yellow"}} {:id #uuid "63be8010-73b7-439f-9a06-e832ffc2bfba", :page 179, :position {:bounding {:x1 100.0999984741211, :y1 622.5874938964844, :x2 408.4678649902344, :y2 641.7874908447266, :width 870, :height 1086.3071297989031}, :rects ({:x1 100.0999984741211, :y1 622.5874938964844, :x2 408.4678649902344, :y2 641.7874908447266, :width 870, :height 1086.3071297989031}), :page 179}, :content {:text "reduceRight()从最后一项开始遍历至第一项"}, :properties {:color "yellow"}} {:id #uuid "63be8105-562d-431a-a28c-f0d0879fee48", :page 179, :position {:bounding {:x1 0, :y1 364.799991607666, :x2 758.257080078125, :y2 708.1000061035156, :width 870, :height 1086.3071297989031}, :rects ({:x1 0, :y1 364.799991607666, :x2 0, :y2 387.1999931335449, :width 870, :height 1086.3071297989031} {:x1 470.520263671875, :y1 666.375, :x2 758.257080078125, :y2 685.5750122070312, :width 870, :height 1086.3071297989031} {:x1 81.20000457763672, :y1 688.8999938964844, :x2 126.3790283203125, :y2 708.1000061035156, :width 870, :height 1086.3071297989031}), :page 179}, :content {:text "上一个归并值、当前项、当前项的索引和数组本身"}, :properties {:color "yellow"}} {:id #uuid "63bea918-b9a5-494d-8ac1-e1acc48efb6b", :page 180, :position {:bounding {:x1 203.4499969482422, :y1 897.6124877929688, :x2 574.7863159179688, :y2 912.0124816894531, :width 870, :height 1086.3071297989031}, :rects ({:x1 203.4499969482422, :y1 897.6124877929688, :x2 574.7863159179688, :y2 912.0124816894531, :width 870, :height 1086.3071297989031}), :page 180}, :content {:text "ArrayBuffer 是所有定型数组及视图引用的基本单位。"}, :properties {:color "yellow"}} {:id #uuid "63bea92c-62f3-4a5a-b63b-818756fe52da", :page 181, :position {:bounding {:x1 109.8375015258789, :y1 292.1125030517578, :x2 450.3195495605469, :y2 311.31251525878906, :width 870, :height 1086.3071297989031}, :rects ({:x1 109.8375015258789, :y1 292.1125030517578, :x2 450.3195495605469, :y2 311.31251525878906, :width 870, :height 1086.3071297989031}), :page 181}, :content {:text "ArrayBuffer 某种程度上类似于 C++的 malloc()"}, :properties {:color "yellow"}} {:id #uuid "63bea936-f176-410b-84a8-52e29b8146c8", :page 181, :position {:bounding {:x1 0, :y1 172.8000030517578, :x2 760.7604370117188, :y2 377.71253967285156, :width 870, :height 1086.3071297989031}, :rects ({:x1 0, :y1 172.8000030517578, :x2 0, :y2 195.1999969482422, :width 870, :height 1086.3071297989031} {:x1 663.0375366210938, :y1 337.1625213623047, :x2 760.7604370117188, :y2 356.3625030517578, :width 870, :height 1086.3071297989031} {:x1 490.7875061035156, :y1 356.75001525878906, :x2 500.742431640625, :y2 366.34999084472656, :width 870, :height 1086.3071297989031} {:x1 130.8249969482422, :y1 358.5125274658203, :x2 490.82501220703125, :y2 377.71253967285156, :width 870, :height 1086.3071297989031} {:x1 504.1499938964844, :y1 358.5125274658203, :x2 584.2691650390625, :y2 377.71253967285156, :width 870, :height 1086.3071297989031}), :page 181}, :content {:text "ArrayBuffer分配的内存不能超过 Number.MAX_SAFE_INTEGER（253  1）字节。"}, :properties {:color "yellow"}} {:id #uuid "63bea9f5-6afa-4353-972e-3f8d28e56a3c", :page 184, :position {:bounding {:x1 0, :y1 748.7999877929688, :x2 790.4165191650391, :y2 878.6499938964844, :width 870, :height 1086.3071297989031}, :rects ({:x1 0, :y1 748.7999877929688, :x2 0, :y2 771.2000122070312, :width 870, :height 1086.3071297989031} {:x1 143.0500030517578, :y1 836.8374938964844, :x2 790.4165191650391, :y2 856.0375061035156, :width 870, :height 1086.3071297989031} {:x1 112.8125, :y1 859.4499816894531, :x2 218.7640380859375, :y2 878.6499938964844, :width 870, :height 1086.3071297989031}), :page 184}, :content {:text "创建定型数组的方式包括读取已有的缓冲、使用自有缓冲、填充可迭代结构，以及填充基于任意类型的定型数组。"}, :properties {:color "yellow"}} {:id #uuid "63beac71-af4d-4c45-89c4-66f754545e5f", :page 190, :position {:bounding {:x1 0, :y1 248.38750648498535, :x2 789.409912109375, :y2 339.20000648498535, :width 870, :height 1086.3071297989031}, :rects ({:x1 537.6500244140625, :y1 248.38750648498535, :x2 789.409912109375, :y2 267.5875186920166, :width 870, :height 1086.3071297989031} {:x1 112.80000305175781, :y1 270.925012588501, :x2 127.92041015625, :y2 290.1249942779541, :width 870, :height 1086.3071297989031} {:x1 0, :y1 316.800012588501, :x2 0, :y2 339.20000648498535, :width 870, :height 1086.3071297989031}), :page 190}, :content {:text "可以使用任何 JavaScript 数据类型作为键"}, :properties {:color "yellow"}} {:id #uuid "63beac7e-e044-43cd-8088-6bdbf4d37148", :page 189, :position {:bounding {:x1 142.7624969482422, :y1 124.16250610351562, :x2 214.69717407226562, :y2 148.16250610351562, :width 870, :height 1086.3071297989031}, :rects ({:x1 142.7624969482422, :y1 124.16250610351562, :x2 214.69717407226562, :y2 148.16250610351562, :width 870, :height 1086.3071297989031}), :page 189}, :content {:text "基本 API"}, :properties {:color "green"}} {:id #uuid "63beac8c-49fb-4927-ab83-10deec98e9f1", :page 191, :position {:bounding {:x1 142.7624969482422, :y1 353.4875183105469, :x2 238.354736328125, :y2 371.8875427246094, :width 870, :height 1086.3071297989031}, :rects ({:x1 142.7624969482422, :y1 353.4875183105469, :x2 238.354736328125, :y2 371.8875427246094, :width 870, :height 1086.3071297989031}), :page 191}, :content {:text "顺序与迭代"}, :properties {:color "green"}} {:id #uuid "63beacaa-bd51-4299-be85-fb036e40b3a3", :page 191, :position {:bounding {:x1 0, :y1 156.8000030517578, :x2 758.2279052734375, :y2 431.1624984741211, :width 870, :height 1086.3071297989031}, :rects ({:x1 0, :y1 156.8000030517578, :x2 0, :y2 179.1999969482422, :width 870, :height 1086.3071297989031} {:x1 350.88751220703125, :y1 390.7000045776367, :x2 758.2279052734375, :y2 409.90001678466797, :width 870, :height 1086.3071297989031} {:x1 81.20000457763672, :y1 411.96251678466797, :x2 156.840087890625, :y2 431.1624984741211, :width 870, :height 1086.3071297989031}), :page 191}, :content {:text "Map 实例会维护键值对的插入顺序，因此可以根据插入顺序执行迭代操作"}, :properties {:color "yellow"}} {:id #uuid "63beacc6-cd03-4068-a720-d5564d546571", :page 191, :position {:bounding {:x1 499.2875061035156, :y1 458.3500061035156, :x2 697.7369995117188, :y2 477.5500030517578, :width 870, :height 1086.3071297989031}, :rects ({:x1 499.2875061035156, :y1 458.3500061035156, :x2 697.7369995117188, :y2 477.5500030517578, :width 870, :height 1086.3071297989031}), :page 191}, :content {:text "entries()）取得这个迭代器"}, :properties {:color "yellow"}} {:id #uuid "63beacd4-cd9b-44b1-92a0-3cacc3f37fc1", :page 191, :position {:bounding {:x1 237.7987060546875, :y1 457.1000061035156, :x2 435.1585388183594, :y2 476.3000030517578, :width 870, :height 1086.3071297989031}, :rects ({:x1 237.7987060546875, :y1 457.1000061035156, :x2 435.1585388183594, :y2 476.3000030517578, :width 870, :height 1086.3071297989031}), :page 191}, :content {:text "或者 Symbol.iterator 属性"}, :properties {:color "yellow"}} {:id #uuid "63bead95-c27a-4a33-a6f9-d929b7667259", :page 192, :position {:bounding {:x1 141.4250030517578, :y1 283.4375, :x2 553.00927734375, :y2 302.6374969482422, :width 870, :height 1086.3071297989031}, :rects ({:x1 141.4250030517578, :y1 283.4375, :x2 553.00927734375, :y2 302.6374969482422, :width 870, :height 1086.3071297989031}), :page 192}, :content {:text "keys()和 values()分别返回以插入顺序生成键和值的迭代器"}, :properties {:color "yellow"}} {:id #uuid "63beadaa-b7b6-4a0a-aa95-e1a44fcfed1d", :page 191, :position {:bounding {:x1 0, :y1 620.7999954223633, :x2 765.81591796875, :y2 978.5375061035156, :width 870, :height 1086.3071297989031}, :rects ({:x1 0, :y1 620.7999954223633, :x2 0, :y2 643.1999969482422, :width 870, :height 1086.3071297989031} {:x1 426.130126953125, :y1 936.8249969482422, :x2 765.81591796875, :y2 956.0250091552734, :width 870, :height 1086.3071297989031} {:x1 81.20000457763672, :y1 959.3375091552734, :x2 345.2364807128906, :y2 978.5375061035156, :width 870, :height 1086.3071297989031}), :page 191}, :content {:text "调用映射的 forEach(callback, opt_thisArg)方法并传入回调，依次迭代每个键/值对"}, :properties {:color "yellow"}} {:id #uuid "63beaecf-7965-44bb-9b1f-79aca1ef3b3d", :page 192, :position {:bounding {:x1 143.03750610351562, :y1 598.2375030517578, :x2 594.6914672851562, :y2 617.4375, :width 870, :height 1086.3071297989031}, :rects ({:x1 143.03750610351562, :y1 598.2375030517578, :x2 594.6914672851562, :y2 617.4375, :width 870, :height 1086.3071297989031}), :page 192}, :content {:text "键和值在迭代器遍历时是可以修改的，但映射内部的引用则无法修改"}, :properties {:color "yellow"}} {:id #uuid "63beaefe-542d-4db0-a239-f3f754e03111", :page 193, :position {:bounding {:x1 142.7624969482422, :y1 124.16250419616699, :x2 321.968505859375, :y2 143.24999809265137, :width 870, :height 1086.3071297989031}, :rects ({:x1 142.7624969482422, :y1 124.16250419616699, :x2 321.968505859375, :y2 143.24999809265137, :width 870, :height 1086.3071297989031}), :page 193}, :content {:text "选择 Object 还是 Ma"}, :properties {:color "green"}} {:id #uuid "63beaf0c-e895-4107-80aa-764f72356357", :page 193, :position {:bounding {:x1 262.8290710449219, :y1 276.17499351501465, :x2 720.2262573242188, :y2 295.3750057220459, :width 870, :height 1086.3071297989031}, :rects ({:x1 262.8290710449219, :y1 276.17499351501465, :x2 720.2262573242188, :y2 295.3750057220459, :width 870, :height 1086.3071297989031}), :page 193}, :content {:text "给定固定大小的内存，Map 大约可以比 Object 多存储 50%的键/值对"}, :properties {:color "yellow"}} {:id #uuid "63beafa7-ba78-483f-bac3-4041047eb57d", :page 193, :position {:bounding {:x1 0, :y1 140.80000114440918, :x2 757.9591674804688, :y2 366.36249351501465, :width 870, :height 1086.3071297989031}, :rects ({:x1 0, :y1 140.80000114440918, :x2 0, :y2 163.2000026702881, :width 870, :height 1086.3071297989031} {:x1 497.2057189941406, :y1 324.63751792907715, :x2 757.9591674804688, :y2 343.8374996185303, :width 870, :height 1086.3071297989031} {:x1 81.20000457763672, :y1 347.1625118255615, :x2 127.0869369506836, :y2 366.36249351501465, :width 870, :height 1086.3071297989031}), :page 193}, :content {:text "插入 Map 在所有浏览器中一般会稍微快一点儿"}, :properties {:color "yellow"}} {:id #uuid "63beafb7-443a-40f4-bdfb-0791eed57a3e", :page 193, :position {:bounding {:x1 0, :y1 252.8000030517578, :x2 758.6582641601562, :y2 527.550048828125, :width 870, :height 1086.3071297989031}, :rects ({:x1 0, :y1 252.8000030517578, :x2 0, :y2 275.20001220703125, :width 870, :height 1086.3071297989031} {:x1 406.6565856933594, :y1 485.82501220703125, :x2 758.6582641601562, :y2 505.0249938964844, :width 870, :height 1086.3071297989031} {:x1 81.2125015258789, :y1 508.3500061035156, :x2 216.38162231445312, :y2 527.550048828125, :width 870, :height 1086.3071297989031}), :page 193}, :content {:text "如果代码涉及大量查找操作，那么某些情况下可能选择 Object 更好一些"}, :properties {:color "yellow"}} {:id #uuid "63beafcc-b7ba-4a9e-998f-b4fd109b716c", :page 193, :position {:bounding {:x1 0, :y1 332.8000183105469, :x2 758.19189453125, :y2 643.6875, :width 870, :height 1086.3071297989031}, :rects ({:x1 0, :y1 332.8000183105469, :x2 0, :y2 355.20001220703125, :width 870, :height 1086.3071297989031} {:x1 458.9125061035156, :y1 603.2125244140625, :x2 758.19189453125, :y2 622.4125366210938, :width 870, :height 1086.3071297989031} {:x1 81.2125015258789, :y1 624.4874877929688, :x2 459.1159362792969, :y2 643.6875, :width 870, :height 1086.3071297989031}), :page 193}, :content {:text "Map 的 delete()操作都比插入和查找更快。如果代码涉及大量删除操作，那么毫无疑问应该选择 Map"}, :properties {:color "yellow"}} {:id #uuid "63beafd8-f73f-4426-b8f4-74f44257858a", :page 193, :position {:bounding {:x1 142.7624969482422, :y1 786.7375183105469, :x2 214.69717407226562, :y2 810.7375183105469, :width 870, :height 1086.3071297989031}, :rects ({:x1 142.7624969482422, :y1 786.7375183105469, :x2 214.69717407226562, :y2 810.7375183105469, :width 870, :height 1086.3071297989031}), :page 193}, :content {:text "基本 API"}, :properties {:color "green"}} {:id #uuid "63beb026-805f-4267-b455-f43c5c8180b4", :page 193, :position {:bounding {:x1 112.7874984741211, :y1 848.4500122070312, :x2 297.448974609375, :y2 861.2500305175781, :width 870, :height 1086.3071297989031}, :rects ({:x1 112.7874984741211, :y1 848.4500122070312, :x2 297.448974609375, :y2 861.2500305175781, :width 870, :height 1086.3071297989031}), :page 193}, :content {:text "const wm = new WeakMap();"}, :properties {:color "yellow"}} {:id #uuid "63beb1c7-02b5-4070-aecf-68f0a1e98c6b", :page 195, :position {:bounding {:x1 125.2846450805664, :y1 250.97499084472656, :x2 180.9993896484375, :y2 274.97499084472656, :width 870, :height 1086.3071297989031}, :rects ({:x1 125.2846450805664, :y1 250.97499084472656, :x2 125.28816223144531, :y2 274.97499084472656, :width 870, :height 1086.3071297989031} {:x1 142.7624969482422, :y1 252.90000915527344, :x2 180.9993896484375, :y2 271.3000030517578, :width 870, :height 1086.3071297989031}), :page 195}, :content {:text "弱键"}, :properties {:color "green"}} {:id #uuid "63beb1d5-f29a-42e4-8625-eea2a65aba35", :page 195, :position {:bounding {:x1 0, :y1 108.80000305175781, :x2 737.26513671875, :y2 330.58750915527344, :width 870, :height 1086.3071297989031}, :rects ({:x1 0, :y1 108.80000305175781, :x2 0, :y2 131.1999969482422, :width 870, :height 1086.3071297989031} {:x1 287.1061096191406, :y1 288.84999084472656, :x2 737.26513671875, :y2 308.0500030517578, :width 870, :height 1086.3071297989031} {:x1 81.2125015258789, :y1 311.3874969482422, :x2 203.58721923828125, :y2 330.58750915527344, :width 870, :height 1086.3071297989031}), :page 195}, :content {:text "映射的键是“弱弱地拿着”的。意思就是，这些键不属于正式的引用，不会阻止垃圾回收"}, :properties {:color "yellow"}} {:id #uuid "63beb214-e271-49e3-8655-6b42ec2b15f8", :page 195, :position {:bounding {:x1 142.7624969482422, :y1 811.9249877929688, :x2 238.354736328125, :y2 830.3249893188477, :width 870, :height 1086.3071297989031}, :rects ({:x1 142.7624969482422, :y1 811.9249877929688, :x2 238.354736328125, :y2 830.3249893188477, :width 870, :height 1086.3071297989031}), :page 195}, :content {:text "不可迭代键"}, :properties {:color "green"}} {:id #uuid "63beb294-8369-4334-8bb2-5b932d743636", :page 196, :position {:bounding {:x1 174.33750915527344, :y1 124.16250610351562, :x2 269.92974853515625, :y2 142.5625, :width 870, :height 1086.3071297989031}, :rects ({:x1 174.33750915527344, :y1 124.16250610351562, :x2 269.92974853515625, :y2 142.5625, :width 870, :height 1086.3071297989031}), :page 196}, :content {:text "使用弱映射"}, :properties {:color "green"}} {:id #uuid "63beb2da-e319-4684-a191-ab8daa677169", :page 195, :position {:bounding {:x1 109.8375015258789, :y1 939.3249969482422, :x2 715.737548828125, :y2 953.7249908447266, :width 870, :height 1086.3071297989031}, :rects ({:x1 109.8375015258789, :y1 939.3249969482422, :x2 715.737548828125, :y2 953.7249908447266, :width 870, :height 1086.3071297989031}), :page 195}, :content {:text "WeakMap 实例之所以限制只能用对象作为键，是为了保证只有通过键对象的引用才能取得值"}, :properties {:color "yellow"}} {:id #uuid "63beb368-5074-47f1-90ad-114328dda759", :page 198, :position {:bounding {:x1 174.33750915527344, :y1 224.07498168945312, :x2 246.28466796875, :y2 248.07498168945312, :width 870, :height 1086.3071297989031}, :rects ({:x1 174.33750915527344, :y1 224.07498168945312, :x2 246.28466796875, :y2 248.07498168945312, :width 870, :height 1086.3071297989031}), :page 198}, :content {:text "基本 API"}, :properties {:color "green"}} {:id #uuid "63beb37c-f64b-4174-8555-a667080690fa", :page 198, :position {:bounding {:x1 144.375, :y1 285.7875061035156, :x2 293.34283447265625, :y2 298.5874938964844, :width 870, :height 1086.3071297989031}, :rects ({:x1 144.375, :y1 285.7875061035156, :x2 293.34283447265625, :y2 298.5874938964844, :width 870, :height 1086.3071297989031}), :page 198}, :content {:text "const m = new Set();"}, :properties {:color "yellow"}} {:id #uuid "63beb534-1098-42e1-a16b-c595426f301d", :page 200, :position {:bounding {:x1 174.33750915527344, :y1 124.16250610351562, :x2 269.92974853515625, :y2 142.5625, :width 870, :height 1086.3071297989031}, :rects ({:x1 174.33750915527344, :y1 124.16250610351562, :x2 269.92974853515625, :y2 142.5625, :width 870, :height 1086.3071297989031}), :page 200}, :content {:text "顺序与迭代"}, :properties {:color "green"}} {:id #uuid "63beb573-943c-425c-92c6-a7651807ee96", :page 200, :position {:bounding {:x1 141.4250030517578, :y1 161.28750610351562, :x2 474.2387390136719, :y2 175.6875, :width 870, :height 1086.3071297989031}, :rects ({:x1 141.4250030517578, :y1 161.28750610351562, :x2 474.2387390136719, :y2 175.6875, :width 870, :height 1086.3071297989031}), :page 200}, :content {:text "Set 会维护值插入时的顺序，因此支持按顺序迭代"}, :properties {:color "yellow"}} {:id #uuid "63beb591-e55e-4009-8e29-9944a11aa44f", :page 200, :position {:bounding {:x1 0, :y1 588.8000183105469, :x2 790.357177734375, :y2 634.2375183105469, :width 870, :height 1086.3071297989031}, :rects ({:x1 0, :y1 588.8000183105469, :x2 0, :y2 611.2000122070312, :width 870, :height 1086.3071297989031} {:x1 143.03750610351562, :y1 592.5125122070312, :x2 790.357177734375, :y2 611.7125244140625, :width 870, :height 1086.3071297989031} {:x1 112.80000305175781, :y1 615.0375061035156, :x2 309.6020812988281, :y2 634.2375183105469, :width 870, :height 1086.3071297989031}), :page 200}, :content {:text "集合的 entries()方法返回一个迭代器，可以按照插入顺序产生包含两个元素的数组，这两个元素是集合中每个值的重复出现"}, :properties {:color "yellow"}} {:id #uuid "63beb5b3-db3a-4018-9837-3159c0a42b7b", :page 200, :position {:bounding {:x1 173.1999969482422, :y1 512.1625213623047, :x2 745.3912963867188, :y2 531.3625183105469, :width 870, :height 1086.3071297989031}, :rects ({:x1 173.1999969482422, :y1 512.1625213623047, :x2 745.3912963867188, :y2 531.3625183105469, :width 870, :height 1086.3071297989031}), :page 200}, :content {:text " values()是默认迭代器，所以可以直接对集合实例使用扩展操作，把集合转换为数组"}, :properties {:color "yellow"}} {:id #uuid "63beb602-dcb6-45b2-bf6e-ed79df318abe", :page 201, :position {:bounding {:x1 142.7624969482422, :y1 388.8875274658203, :x2 295.7100830078125, :y2 407.28749084472656, :width 870, :height 1086.3071297989031}, :rects ({:x1 142.7624969482422, :y1 388.8875274658203, :x2 295.7100830078125, :y2 407.28749084472656, :width 870, :height 1086.3071297989031}), :page 201}, :content {:text "定义正式集合操作"}, :properties {:color "green"}} {:id #uuid "63beb6bf-7356-4f24-8af1-16524da3c8c7", :page 203, :position {:bounding {:x1 111.45000457763672, :y1 454.2375183105469, :x2 488.927001953125, :y2 473.4375, :width 870, :height 1086.3071297989031}, :rects ({:x1 111.45000457763672, :y1 454.2375183105469, :x2 488.927001953125, :y2 473.4375, :width 870, :height 1086.3071297989031}), :page 203}, :content {:text "弱集合中的值只能是 Object 或者继承自 Object 的类型，"}, :properties {:color "yellow"}} {:id #uuid "63beb7de-9134-46b7-90c6-c1239c0959ca", :page 204, :position {:bounding {:x1 0, :y1 780.8000335693359, :x2 790.2723388671875, :y2 960.0375366210938, :width 870, :height 1086.3071297989031}, :rects ({:x1 0, :y1 780.8000335693359, :x2 0, :y2 803.2000427246094, :width 870, :height 1086.3071297989031} {:x1 188.5073699951172, :y1 918.3125305175781, :x2 790.2723388671875, :y2 937.5125427246094, :width 870, :height 1086.3071297989031} {:x1 112.7874984741211, :y1 940.8375549316406, :x2 127.8111343383789, :y2 960.0375366210938, :width 870, :height 1086.3071297989031}), :page 204}, :content {:text "，container 对象维护着一个对弱集合值的引用，因此这个对象值不会成为垃圾回收的目标"}, :properties {:color "yellow"}} {:id #uuid "63beb83d-ee81-472f-adbe-8ce629cf4acd", :page 205, :position {:bounding {:x1 0, :y1 364.8000068664551, :x2 758.2150268554688, :y2 724.4250373840332, :width 870, :height 1086.3071297989031}, :rects ({:x1 0, :y1 364.8000068664551, :x2 0, :y2 387.20000076293945, :width 870, :height 1086.3071297989031} {:x1 156.82810974121094, :y1 682.6874885559082, :x2 758.2150268554688, :y2 701.8875007629395, :width 870, :height 1086.3071297989031} {:x1 81.2249984741211, :y1 705.225025177002, :x2 405.9750061035156, :y2 724.4250373840332, :width 870, :height 1086.3071297989031}), :page 205}, :content {:text "只要 WeakSet 中任何元素从 DOM 树中被删除，垃圾回收程序就可以忽略其存在，而立即释放其内存（假设没有其他地方引用这个对象）。"}, :properties {:color "yellow"}} {:id #uuid "63beb8b9-8bc8-406c-b3e5-617884384140", :page 206, :position {:bounding {:x1 294.42266845703125, :y1 122.71250915527344, :x2 640.8783569335938, :y2 141.91250610351562, :width 870, :height 1086.3071297989031}, :rects ({:x1 294.42266845703125, :y1 122.71250915527344, :x2 640.8783569335938, :y2 141.91250610351562, :width 870, :height 1086.3071297989031}), :page 206}, :content {:text "所有类型都支持顺序迭代，都可以传入 for-of 循环"}, :properties {:color "yellow"}} {:id #uuid "63beb8fa-a0bd-4313-9aa1-9734ff48394e", :page 206, :position {:bounding {:x1 143.03750610351562, :y1 623.2375030517578, :x2 642.6156616210938, :y2 642.4375152587891, :width 870, :height 1086.3071297989031}, :rects ({:x1 143.03750610351562, :y1 623.2375030517578, :x2 642.6156616210938, :y2 642.4375152587891, :width 870, :height 1086.3071297989031}), :page 206}, :content {:text "对于期待可迭代对象的构造函数，只要传入一个可迭代对象就可以实现复制"}, :properties {:color "yellow"}} {:id #uuid "63c7b6f7-8409-4620-999e-f6a0cdfa2c98", :page 208, :position {:bounding {:x1 173.98749685287476, :y1 505.0500030517578, :x2 266.88036489486694, :y2 538.6500091552734, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 173.98749685287476, :y1 505.0500030517578, :x2 266.88036489486694, :y2 538.6500091552734, :width 911.6666666666666, :height 1138.3333333333333}), :page 208}, :content {:text "理解迭代"}, :properties {:color "green"}} {:id #uuid "63c7d77d-5947-49c4-8a94-fd1508cc8d46", :page 208, :position {:bounding {:x1 149.90000295639038, :y1 552.8000183105469, :x2 495.2394652366638, :y2 575.2000122070312, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 149.90000295639038, :y1 552.8000183105469, :x2 495.2394652366638, :y2 575.2000122070312, :width 911.6666666666666, :height 1138.3333333333333} {:x1 165.7000060081482, :y1 556.8000183105469, :x2 238.73749685287476, :y2 572.6000061035156, :width 911.6666666666666, :height 1138.3333333333333}), :page 208}, :content {:text "在 JavaScript 中，计数循环就是一种最简单的迭代"}, :properties {:color "yellow"}} {:id #uuid "63c7d840-cf6f-44ac-80b6-40423bb0226b", :page 208, :position {:bounding {:x1 149.90000295639038, :y1 637, :x2 771.5496611595154, :y2 659.3999938964844, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 149.90000295639038, :y1 637, :x2 771.5496611595154, :y2 659.3999938964844, :width 911.6666666666666, :height 1138.3333333333333}), :page 208}, :content {:text "循环是迭代机制的基础，这是因为它可以指定迭代的次数，以及每次迭代要执行什么操作"}, :properties {:color "yellow"}} {:id #uuid "63c7d8d9-52be-4e94-84f7-298891427021", :page 208, :position {:bounding {:x1 149.8875060081482, :y1 964.4625244140625, :x2 691.1716551780701, :y2 987.9000244140625, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 149.8875060081482, :y1 964.4625244140625, :x2 409.3953185081482, :y2 986.8625183105469, :width 911.6666666666666, :height 1138.3333333333333} {:x1 455.90001821517944, :y1 965.5000305175781, :x2 691.1716551780701, :y2 987.9000244140625, :width 911.6666666666666, :height 1138.3333333333333} {:x1 455.90001821517944, :y1 969.5000305175781, :x2 691.1716551780701, :y2 985.3000183105469, :width 911.6666666666666, :height 1138.3333333333333} {:x1 179.48749685287476, :y1 969.5125427246094, :x2 409.3953185081482, :y2 985.3125305175781, :width 911.6666666666666, :height 1138.3333333333333}), :page 208}, :content {:text "ES5 新增了 Array.prototype.forEach()方法，向通用迭代需求迈进了一步"}, :properties {:color "yellow"}} {:id #uuid "63c7d934-edb4-4ff8-9d6f-8dc32ff49123", :page 209, :position {:bounding {:x1 597.7380614280701, :y1 183.29998779296875, :x2 774.0819945335388, :y2 205.70001220703125, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 597.7380614280701, :y1 183.29998779296875, :x2 774.0819945335388, :y2 205.70001220703125, :width 911.6666666666666, :height 1138.3333333333333}), :page 209}, :content {:text "没有办法标识迭代何时终"}, :properties {:color "yellow"}} {:id #uuid "63c7d947-e12a-4d13-b77e-d044beacf856", :page 209, :position {:bounding {:x1 118.67588949203491, :y1 339.5500183105469, :x2 256.96642446517944, :y2 374.6999816894531, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 140.8875060081482, :y1 339.5500183105469, :x2 256.96642446517944, :y2 373.1499938964844, :width 911.6666666666666, :height 1138.3333333333333} {:x1 118.67588949203491, :y1 341.1000061035156, :x2 118.67891836166382, :y2 374.6999816894531, :width 911.6666666666666, :height 1138.3333333333333}), :page 209}, :content {:text "迭代器模式"}, :properties {:color "green"}} {:id #uuid "63c7db27-2ba2-446e-a723-e7eab2540167", :page 209, :position {:bounding {:x1 117.15960836410522, :y1 458.1125183105469, :x2 517.9047560691833, :y2 480.5125274658203, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 117.15960836410522, :y1 458.1125183105469, :x2 517.9047560691833, :y2 480.5125274658203, :width 911.6666666666666, :height 1138.3333333333333}), :page 209}, :content {:text "它们包含的元素都是有限的，而且都具有无歧义的遍历顺"}, :properties {:color "yellow"}} {:id #uuid "63c7db97-e0ef-4c59-922b-ca268a8205d5", :page 209, :position {:bounding {:x1 130.73789358139038, :y1 846.6125183105469, :x2 249.59999990463257, :y2 876.75, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 149.59999990463257, :y1 846.6125183105469, :x2 249.59999990463257, :y2 875.4125366210938, :width 911.6666666666666, :height 1138.3333333333333} {:x1 130.73789358139038, :y1 847.9500122070312, :x2 130.73789358139038, :y2 876.75, :width 911.6666666666666, :height 1138.3333333333333}), :page 209}, :content {:text "可迭代协议"}, :properties {:color "green"}} {:id #uuid "63c7dbdd-45f5-486f-98ef-c85b7e04051b", :page 209, :position {:bounding {:x1 0, :y1 476.8000030517578, :x2 800.8844237327576, :y2 932.4500122070312, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 0, :y1 476.8000030517578, :x2 0, :y2 499.1999969482422, :width 911.6666666666666, :height 1138.3333333333333} {:x1 530.7806639671326, :y1 887.6000366210938, :x2 800.8844237327576, :y2 910, :width 911.6666666666666, :height 1138.3333333333333} {:x1 85.09999990463257, :y1 910.8500366210938, :x2 137.59531545639038, :y2 932.4500122070312, :width 911.6666666666666, :height 1138.3333333333333} {:x1 157.09999990463257, :y1 910.8500366210938, :x2 288.78090810775757, :y2 932.4500122070312, :width 911.6666666666666, :height 1138.3333333333333} {:x1 85.09999990463257, :y1 914.8500366210938, :x2 137.59531545639038, :y2 929.8500366210938, :width 911.6666666666666, :height 1138.3333333333333} {:x1 157.09999990463257, :y1 914.8500366210938, :x2 157.28749990463257, :y2 929.8500366210938, :width 911.6666666666666, :height 1138.3333333333333}), :page 209}, :content {:text "：支持迭代的自我识别能力和创建实现 Iterator 接口的对象的能力"}, :properties {:color "yellow"}} {:id #uuid "63c7dbf5-36a1-4d12-b509-48c35dc05528", :page 209, :position {:bounding {:x1 0, :y1 492.8000183105469, :x2 793.9856810569763, :y2 957.2125244140625, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 0, :y1 492.8000183105469, :x2 0, :y2 515.2000198364258, :width 911.6666666666666, :height 1138.3333333333333} {:x1 504.9410033226013, :y1 911.2000122070312, :x2 793.9856810569763, :y2 933.6000366210938, :width 911.6666666666666, :height 1138.3333333333333} {:x1 763.2000365257263, :y1 915.2000122070312, :x2 793.9856810569763, :y2 931.0000305175781, :width 911.6666666666666, :height 1138.3333333333333} {:x1 414.09999990463257, :y1 934.4500122070312, :x2 466.6000609397888, :y2 956.0500183105469, :width 911.6666666666666, :height 1138.3333333333333} {:x1 85.08750295639038, :y1 934.8125305175781, :x2 389.18126821517944, :y2 957.2125244140625, :width 911.6666666666666, :height 1138.3333333333333} {:x1 414.09999990463257, :y1 938.4500122070312, :x2 414.28749990463257, :y2 953.4500122070312, :width 911.6666666666666, :height 1138.3333333333333} {:x1 85.08750295639038, :y1 938.8125305175781, :x2 389.18126821517944, :y2 954.6125183105469, :width 911.6666666666666, :height 1138.3333333333333}), :page 209}, :content {:text "必须暴露一个属性作为“默认迭代器”，而且这个属性必须使用特殊的 Symbol.iterator 作为键"}, :properties {:color "yellow"}} {:id #uuid "63c7dc37-bbe2-400f-aa81-a622b9c9cbd4", :page 210, :position {:bounding {:x1 0, :y1 668.7999877929688, :x2 835.4045042991638, :y2 716.0125122070312, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 0, :y1 668.7999877929688, :x2 0, :y2 691.2000122070312, :width 911.6666666666666, :height 1138.3333333333333} {:x1 596.2750487327576, :y1 670, :x2 835.4045042991638, :y2 692.3999938964844, :width 911.6666666666666, :height 1138.3333333333333} {:x1 118.19999837875366, :y1 693.6124877929688, :x2 406.7282271385193, :y2 716.0125122070312, :width 911.6666666666666, :height 1138.3333333333333}), :page 210}, :content {:text "。实现可迭代协议的所有类型都会自动兼容接收可迭代对象的任何语言特性"}, :properties {:color "yellow"}} {:id #uuid "63c7dc3f-1ccb-40e0-b49d-5ffd60051e9e", :page 210, :position {:bounding {:x1 149.8875060081482, :y1 926.3999938964844, :x2 758.9823546409607, :y2 948.8000183105469, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 149.8875060081482, :y1 926.3999938964844, :x2 758.9823546409607, :y2 948.8000183105469, :width 911.6666666666666, :height 1138.3333333333333}), :page 210}, :content {:text "这些原生语言结构会在后台调用提供的可迭代对象的这个工厂函数，从而创建一个迭代"}, :properties {:color "yellow"}} {:id #uuid "63c7dc4f-7e8b-4559-91f1-222929027339", :page 210, :position {:bounding {:x1 422.75756216049194, :y1 693.6124877929688, :x2 695.2564330101013, :y2 716.0124969482422, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 422.75756216049194, :y1 693.6124877929688, :x2 695.2564330101013, :y2 716.0124969482422, :width 911.6666666666666, :height 1138.3333333333333}), :page 210}, :content {:text "接收可迭代对象的原生语言特性包括："}, :properties {:color "yellow"}} {:id #uuid "63c7dca8-0715-45aa-a45d-1d89c0a2046a", :page 211, :position {:bounding {:x1 149.59999990463257, :y1 724.4125061035156, :x2 249.59999990463257, :y2 753.2125244140625, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 149.59999990463257, :y1 724.4125061035156, :x2 249.59999990463257, :y2 753.2125244140625, :width 911.6666666666666, :height 1138.3333333333333}), :page 211}, :content {:text "迭代器协议"}, :properties {:color "green"}} {:id #uuid "63c7dcb9-333e-459c-a3ff-b83c489aa07a", :page 211, :position {:bounding {:x1 0, :y1 492.8000144958496, :x2 795.2641234397888, :y2 835.0125122070312, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 0, :y1 492.8000144958496, :x2 0, :y2 515.2000122070312, :width 911.6666666666666, :height 1138.3333333333333} {:x1 0, :y1 508.80001068115234, :x2 0, :y2 531.2000122070312, :width 911.6666666666666, :height 1138.3333333333333} {:x1 581.6440062522888, :y1 765.4000244140625, :x2 748.9422240257263, :y2 787.800048828125, :width 911.6666666666666, :height 1138.3333333333333} {:x1 762.3000121116638, :y1 765.4000244140625, :x2 794.3000731468201, :y2 787.8000183105469, :width 911.6666666666666, :height 1138.3333333333333} {:x1 643.5999999046326, :y1 768.3500061035156, :x2 748.9422240257263, :y2 784.1500244140625, :width 911.6666666666666, :height 1138.3333333333333} {:x1 762.3000121116638, :y1 769.4000244140625, :x2 794.3000731468201, :y2 785.2000122070312, :width 911.6666666666666, :height 1138.3333333333333} {:x1 664.7000365257263, :y1 788.6500244140625, :x2 795.2641234397888, :y2 810.2500305175781, :width 911.6666666666666, :height 1138.3333333333333} {:x1 425.99999380111694, :y1 789.0000305175781, :x2 635.2336058616638, :y2 811.4000244140625, :width 911.6666666666666, :height 1138.3333333333333} {:x1 85.08750295639038, :y1 789.0125122070312, :x2 412.5421996116638, :y2 811.4125061035156, :width 911.6666666666666, :height 1138.3333333333333} {:x1 664.7000365257263, :y1 792.6500244140625, :x2 795.2641234397888, :y2 807.6500244140625, :width 911.6666666666666, :height 1138.3333333333333} {:x1 425.99999380111694, :y1 793.0000305175781, :x2 635.2336058616638, :y2 808.8000183105469, :width 911.6666666666666, :height 1138.3333333333333} {:x1 85.08750295639038, :y1 793.0125122070312, :x2 412.5421996116638, :y2 808.8125305175781, :width 911.6666666666666, :height 1138.3333333333333} {:x1 85.09999990463257, :y1 812.6125183105469, :x2 229.3469786643982, :y2 835.0125122070312, :width 911.6666666666666, :height 1138.3333333333333}), :page 211}, :content {:text "。迭代器 API 使用 next()方法在可迭代对象中遍历数据。每次成功调用 next()，都会返回一个 IteratorResult 对象，其中包含迭代器返回的下一个值"}, :properties {:color "yellow"}} {:id #uuid "63c7dd43-ec40-46f1-b128-c5617af7181f", :page 212, :position {:bounding {:x1 0, :y1 269.9500045776367, :x2 834.7000365257263, :y2 371.2000045776367, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 782.2000365257263, :y1 269.9500045776367, :x2 834.7000365257263, :y2 291.55001068115234, :width 911.6666666666666, :height 1138.3333333333333} {:x1 583.0510497093201, :y1 270.31250762939453, :x2 765.0015501976013, :y2 292.7125015258789, :width 911.6666666666666, :height 1138.3333333333333} {:x1 692.2000365257263, :y1 273.9500045776367, :x2 765.0015501976013, :y2 288.9500045776367, :width 911.6666666666666, :height 1138.3333333333333} {:x1 782.2000365257263, :y1 273.9500045776367, :x2 834.7000365257263, :y2 288.9500045776367, :width 911.6666666666666, :height 1138.3333333333333} {:x1 239.500009059906, :y1 293.9000015258789, :x2 399.76195669174194, :y2 316.30001068115234, :width 911.6666666666666, :height 1138.3333333333333} {:x1 118.19999837875366, :y1 293.91251373291016, :x2 226.02102041244507, :y2 316.31250762939453, :width 911.6666666666666, :height 1138.3333333333333} {:x1 118.19999837875366, :y1 297.91251373291016, :x2 226.02102041244507, :y2 313.7125015258789, :width 911.6666666666666, :height 1138.3333333333333} {:x1 0, :y1 348.80001068115234, :x2 0, :y2 371.2000045776367, :width 911.6666666666666, :height 1138.3333333333333}), :page 212}, :content {:text "只要迭代器到达 done: true 状态，后续调用 next()就一直返回同样的值了"}, :properties {:color "yellow"}} {:id #uuid "63c7dd92-4138-41c7-a004-13b908e543a9", :page 212, :position {:bounding {:x1 0, :y1 425.6000061035156, :x2 835.4045042991638, :y2 499.1999969482422, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 516.5652709007263, :y1 425.6000061035156, :x2 835.4045042991638, :y2 448, :width 911.6666666666666, :height 1138.3333333333333} {:x1 118.19999837875366, :y1 449.21250915527344, :x2 262.3729109764099, :y2 471.6125030517578, :width 911.6666666666666, :height 1138.3333333333333} {:x1 0, :y1 476.8000030517578, :x2 0, :y2 499.1999969482422, :width 911.6666666666666, :height 1138.3333333333333}), :page 212}, :content {:text "不同迭代器的实例相互之间没有联系，只会独立地遍历可迭代对象"}, :properties {:color "yellow"}} {:id #uuid "63c7ddca-417e-4858-a800-59e07590aa64", :page 212, :position {:bounding {:x1 118.19999837875366, :y1 636.2125091552734, :x2 615.1303877830505, :y2 658.6125030517578, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 118.19999837875366, :y1 636.2125091552734, :x2 615.1303877830505, :y2 658.6125030517578, :width 911.6666666666666, :height 1138.3333333333333}), :page 212}, :content {:text "如果可迭代对象在迭代期间被修改了，那么迭代器也会反映相应的变化"}, :properties {:color "yellow"}} {:id #uuid "63c7ddeb-dc9e-42f0-8c9b-606cd5f783a8", :page 212, :position {:bounding {:x1 0, :y1 780.8000183105469, :x2 782.6302123069763, :y2 913.5000305175781, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 0, :y1 780.8000183105469, :x2 0, :y2 803.2000122070312, :width 911.6666666666666, :height 1138.3333333333333} {:x1 213.187509059906, :y1 868.4000244140625, :x2 782.6302123069763, :y2 890.8000183105469, :width 911.6666666666666, :height 1138.3333333333333} {:x1 510.1499876976013, :y1 872.4000244140625, :x2 782.6302123069763, :y2 888.2000122070312, :width 911.6666666666666, :height 1138.3333333333333} {:x1 165.7000060081482, :y1 891.1000061035156, :x2 229.776864528656, :y2 913.5000305175781, :width 911.6666666666666, :height 1138.3333333333333}), :page 212}, :content {:text "迭代器维护着一个指向可迭代对象的引用，因此迭代器会阻止垃圾回收程序回收可迭代对象"}, :properties {:color "yellow"}} {:id #uuid "63c7de4b-4e64-4ceb-a3fe-6107134c2421", :page 213, :position {:bounding {:x1 149.59999990463257, :y1 466.0124969482422, :x2 269.59999990463257, :y2 494.81251525878906, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 149.59999990463257, :y1 466.0124969482422, :x2 269.59999990463257, :y2 494.81251525878906, :width 911.6666666666666, :height 1138.3333333333333}), :page 213}, :content {:text "自定义迭代器"}, :properties {:color "green"}} {:id #uuid "63c7df22-4bf9-4f2a-b053-617c633522b4", :page 213, :position {:bounding {:x1 436.5659728050232, :y1 985.8000183105469, :x2 693.0387816429138, :y2 1008.2000122070312, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 436.5659728050232, :y1 985.8000183105469, :x2 693.0387816429138, :y2 1008.2000122070312, :width 911.6666666666666, :height 1138.3333333333333}), :page 213}, :content {:text "是因为它的每个实例只能被迭代一次"}, :properties {:color "yellow"}} {:id #uuid "63c7df6f-a42a-421f-b01b-b3a469a80d74", :page 214, :position {:bounding {:x1 0, :y1 876.8000030517578, :x2 832.2243285179138, :y2 998.0500183105469, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 0, :y1 876.8000030517578, :x2 0, :y2 899.2000122070312, :width 911.6666666666666, :height 1138.3333333333333} {:x1 404.7000060081482, :y1 952.8500061035156, :x2 832.2243285179138, :y2 974.4500122070312, :width 911.6666666666666, :height 1138.3333333333333} {:x1 149.90000295639038, :y1 953.2000122070312, :x2 386.95311880111694, :y2 975.6000061035156, :width 911.6666666666666, :height 1138.3333333333333} {:x1 332.7000060081482, :y1 956.8500061035156, :x2 386.95311880111694, :y2 971.8500061035156, :width 911.6666666666666, :height 1138.3333333333333} {:x1 404.7000060081482, :y1 956.8500061035156, :x2 832.2243285179138, :y2 971.8500061035156, :width 911.6666666666666, :height 1138.3333333333333} {:x1 118.19999837875366, :y1 976.4500122070312, :x2 156.85781240463257, :y2 998.0500183105469, :width 911.6666666666666, :height 1138.3333333333333} {:x1 172.2000060081482, :y1 976.4500122070312, :x2 208.76401662826538, :y2 998.0500183105469, :width 911.6666666666666, :height 1138.3333333333333} {:x1 118.19999837875366, :y1 980.4500122070312, :x2 156.85781240463257, :y2 995.4500122070312, :width 911.6666666666666, :height 1138.3333333333333} {:x1 172.2000060081482, :y1 980.4500122070312, :x2 172.3875060081482, :y2 995.4500122070312, :width 911.6666666666666, :height 1138.3333333333333}), :page 214}, :content {:text "因为每个迭代器也实现了 Iterable 接口，所以它们可以用在任何期待可迭代对象的地方，比如 for-of 循环"}, :properties {:color "yellow"}} {:id #uuid "63c7dfda-af10-486a-8bdd-57511caf6895", :page 215, :position {:bounding {:x1 149.59999990463257, :y1 291.81251335144043, :x2 289.59999990463257, :y2 320.6125011444092, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 149.59999990463257, :y1 291.81251335144043, :x2 289.59999990463257, :y2 320.6125011444092, :width 911.6666666666666, :height 1138.3333333333333}), :page 215}, :content {:text "提前终止迭代器"}, :properties {:color "green"}} {:id #uuid "63c7dfe6-1cba-4007-83d2-67f3c6139cc1", :page 215, :position {:bounding {:x1 116.80000448226929, :y1 332.8000183105469, :x2 576.5690398216248, :y2 355.20001220703125, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 116.80000448226929, :y1 332.8000183105469, :x2 222.36325979232788, :y2 355.20001220703125, :width 911.6666666666666, :height 1138.3333333333333} {:x1 240.29999685287476, :y1 332.8000183105469, :x2 576.5690398216248, :y2 355.20001220703125, :width 911.6666666666666, :height 1138.3333333333333} {:x1 168.2000060081482, :y1 336.45001220703125, :x2 222.36325979232788, :y2 351.45001220703125, :width 911.6666666666666, :height 1138.3333333333333}), :page 215}, :content {:text "可选的 return()方法用于指定在迭代器提前关闭时执行的逻辑。"}, :properties {:color "yellow"}} {:id #uuid "63c7e01f-63b5-45a0-b581-45f8b65d354b", :page 215, :position {:bounding {:x1 115.09999990463257, :y1 426.9500274658203, :x2 802.0999999046326, :y2 449.7000274658203, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 115.09999990463257, :y1 426.9500274658203, :x2 166.10944509506226, :y2 448.5500030517578, :width 911.6666666666666, :height 1138.3333333333333} {:x1 470.41249990463257, :y1 426.9500274658203, :x2 756.5262694358826, :y2 448.5500030517578, :width 911.6666666666666, :height 1138.3333333333333} {:x1 182.40000295639038, :y1 427.3000030517578, :x2 442.97716665267944, :y2 449.7000274658203, :width 911.6666666666666, :height 1138.3333333333333} {:x1 786.0999999046326, :y1 427.3000030517578, :x2 802.0999999046326, :y2 449.7000274658203, :width 911.6666666666666, :height 1138.3333333333333} {:x1 470.41249990463257, :y1 430.9500274658203, :x2 756.5262694358826, :y2 445.9500274658203, :width 911.6666666666666, :height 1138.3333333333333} {:x1 182.40000295639038, :y1 431.3000030517578, :x2 442.97716665267944, :y2 447.1000213623047, :width 911.6666666666666, :height 1138.3333333333333}), :page 215}, :content {:text "return()方法必须返回一个有效的 IteratorResult 对象。简单情况下，可以只返回{ done: true }。"}, :properties {:color "yellow"}} {:id #uuid "63c7e0bb-57bc-4c1d-b549-d7df7d4fd96f", :page 216, :position {:bounding {:x1 421.53295278549194, :y1 902.4000244140625, :x2 735.0285887718201, :y2 924.8125305175781, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 526.7000365257263, :y1 902.4000244140625, :x2 735.0285887718201, :y2 924.8000183105469, :width 911.6666666666666, :height 1138.3333333333333} {:x1 421.53295278549194, :y1 902.4125366210938, :x2 508.7632689476013, :y2 924.8125305175781, :width 911.6666666666666, :height 1138.3333333333333} {:x1 450.5750060081482, :y1 906.4125366210938, :x2 508.7632689476013, :y2 922.2125244140625, :width 911.6666666666666, :height 1138.3333333333333}), :page 216}, :content {:text "调用 return()不会强制迭代器进入关闭状态"}, :properties {:color "yellow"}} {:id #uuid "63c7e0d5-25a0-4970-a940-a306aee2fc32", :page 217, :position {:bounding {:x1 140.8875060081482, :y1 435.25, :x2 210.58034658432007, :y2 468.8500061035156, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 140.8875060081482, :y1 435.25, :x2 210.58034658432007, :y2 468.8500061035156, :width 911.6666666666666, :height 1138.3333333333333}), :page 217}, :content {:text "生成器"}, :properties {:color "green"}} {:id #uuid "63c7e0f6-5840-4f36-83f8-c365e3f1e48c", :page 217, :position {:bounding {:x1 0, :y1 284.8000183105469, :x2 800.0439085960388, :y2 529.0125122070312, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 0, :y1 284.8000183105469, :x2 0, :y2 307.20001220703125, :width 911.6666666666666, :height 1138.3333333333333} {:x1 495.41665029525757, :y1 483, :x2 800.0439085960388, :y2 505.4000244140625, :width 911.6666666666666, :height 1138.3333333333333} {:x1 85.09999990463257, :y1 506.61248779296875, :x2 117.16066122055054, :y2 529.0125122070312, :width 911.6666666666666, :height 1138.3333333333333}), :page 217}, :content {:text "拥有在一个函数块内暂停和恢复代码执行的能力"}, :properties {:color "yellow"}} {:id #uuid "63c7e0fe-a75f-46f0-98d2-0de4352004be", :page 217, :position {:bounding {:x1 389.67626333236694, :y1 506.61248779296875, :x2 678.2221312522888, :y2 529.0125122070312, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 389.67626333236694, :y1 506.61248779296875, :x2 678.2221312522888, :y2 529.0125122070312, :width 911.6666666666666, :height 1138.3333333333333}), :page 217}, :content {:text "使用生成器可以自定义迭代器和实现协程"}, :properties {:color "yellow"}} {:id #uuid "63c7e1ec-785e-4e9b-96d6-36d26f0f5afb", :page 217, :position {:bounding {:x1 130.73789358139038, :y1 543.712516784668, :x2 249.59999990463257, :y2 573.8499984741211, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 149.59999990463257, :y1 543.712516784668, :x2 249.59999990463257, :y2 572.5125045776367, :width 911.6666666666666, :height 1138.3333333333333} {:x1 130.73789358139038, :y1 545.0500106811523, :x2 130.73789358139038, :y2 573.8499984741211, :width 911.6666666666666, :height 1138.3333333333333}), :page 217}, :content {:text "生成器基础"}, :properties {:color "green"}} {:id #uuid "63c7e1ff-bdbb-4129-9ae6-a6ffbf899c41", :page 217, :position {:bounding {:x1 0, :y1 332.7999954223633, :x2 797.3098387718201, :y2 630.8000106811523, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 0, :y1 332.7999954223633, :x2 0, :y2 355.2000045776367, :width 911.6666666666666, :height 1138.3333333333333} {:x1 684.6060423851013, :y1 584.7000045776367, :x2 797.3098387718201, :y2 607.0999984741211, :width 911.6666666666666, :height 1138.3333333333333} {:x1 85.09999990463257, :y1 608.400016784668, :x2 309.4585814476013, :y2 630.8000106811523, :width 911.6666666666666, :height 1138.3333333333333}), :page 217}, :content {:text "只要是可以定义函数的地方，就可以定义生成器"}, :properties {:color "yellow"}} {:id #uuid "63c7e21e-6c04-45af-956f-2c435b31bdb0", :page 218, :position {:bounding {:x1 149.90000295639038, :y1 289.2000198364258, :x2 797.0555663108826, :y2 311.60001373291016, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 149.90000295639038, :y1 289.2000198364258, :x2 797.0555663108826, :y2 311.60001373291016, :width 911.6666666666666, :height 1138.3333333333333} {:x1 339.8875060081482, :y1 292.1500015258789, :x2 735.4894042015076, :y2 307.9500198364258, :width 911.6666666666666, :height 1138.3333333333333}), :page 218}, :content {:text "调用生成器函数会产生一个生成器对象。生成器对象一开始处于暂停执行（suspended）的状态"}, :properties {:color "yellow"}} {:id #uuid "63c7e224-8e7e-445e-b0af-0cfbae4512cf", :page 218, :position {:bounding {:x1 148.2000060081482, :y1 467.75003814697266, :x2 668.8640379905701, :y2 490.50003814697266, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 148.2000060081482, :y1 467.75003814697266, :x2 188.742196559906, :y2 489.35001373291016, :width 911.6666666666666, :height 1138.3333333333333} {:x1 202.2000060081482, :y1 468.10001373291016, :x2 668.8640379905701, :y2 490.50003814697266, :width 911.6666666666666, :height 1138.3333333333333} {:x1 202.2000060081482, :y1 472.10001373291016, :x2 634.0000243186951, :y2 487.9000015258789, :width 911.6666666666666, :height 1138.3333333333333}), :page 218}, :content {:text "next()方法的返回值类似于迭代器，有一个 done 属性和一个 value 属性"}, :properties {:color "yellow"}} {:id #uuid "63c7e307-ecf5-401d-b30b-22aaf0010079", :page 218, :position {:bounding {:x1 149.90000295639038, :y1 783.8000183105469, :x2 510.05520009994507, :y2 806.2000122070312, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 149.90000295639038, :y1 783.8000183105469, :x2 384.4421935081482, :y2 806.2000122070312, :width 911.6666666666666, :height 1138.3333333333333} {:x1 397.90001821517944, :y1 783.8000183105469, :x2 510.05520009994507, :y2 806.2000122070312, :width 911.6666666666666, :height 1138.3333333333333} {:x1 343.90001821517944, :y1 787.4500122070312, :x2 384.4421935081482, :y2 802.4500122070312, :width 911.6666666666666, :height 1138.3333333333333}), :page 218}, :content {:text "生成器函数只会在初次调用 next()方法后开始执行"}, :properties {:color "yellow"}} {:id #uuid "63c7e3b8-85b5-4de3-9488-e5232b70fbd3", :page 218, :position {:bounding {:x1 149.90000295639038, :y1 942.8500061035156, :x2 613.4519896507263, :y2 965.6000061035156, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 352.49999380111694, :y1 942.8500061035156, :x2 613.4519896507263, :y2 964.4499816894531, :width 911.6666666666666, :height 1138.3333333333333} {:x1 149.90000295639038, :y1 943.1999816894531, :x2 334.7531371116638, :y2 965.6000061035156, :width 911.6666666666666, :height 1138.3333333333333} {:x1 280.49999380111694, :y1 946.8500061035156, :x2 334.7531371116638, :y2 961.8500061035156, :width 911.6666666666666, :height 1138.3333333333333} {:x1 352.49999380111694, :y1 946.8500061035156, :x2 355.49999380111694, :y2 961.8500061035156, :width 911.6666666666666, :height 1138.3333333333333}), :page 218}, :content {:text "生成器对象实现了 Iterable 接口，它们默认的迭代器是自引用的"}, :properties {:color "yellow"}} {:id #uuid "63c7e460-596c-47ca-b4ec-1803eb4c8a63", :page 219, :position {:bounding {:x1 149.59999990463257, :y1 298.21249771118164, :x2 337.8000121116638, :y2 327.0125160217285, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 149.59999990463257, :y1 298.21249771118164, :x2 241.08298635482788, :y2 327.0125160217285, :width 911.6666666666666, :height 1138.3333333333333} {:x1 252.11251211166382, :y1 298.89999771118164, :x2 337.8000121116638, :y2 326.89999771118164, :width 911.6666666666666, :height 1138.3333333333333} {:x1 189.59999990463257, :y1 303.0125160217285, :x2 241.08298635482788, :y2 323.0125160217285, :width 911.6666666666666, :height 1138.3333333333333} {:x1 252.11251211166382, :y1 303.7000160217285, :x2 252.31014394760132, :y2 322.89999771118164, :width 911.6666666666666, :height 1138.3333333333333}), :page 219}, :content {:text "通过 yield 中断执行"}, :properties {:color "green"}} {:id #uuid "63c7e487-d662-41d5-a48e-54e446be2188", :page 219, :position {:bounding {:x1 0, :y1 156.80000686645508, :x2 782.8670287132263, :y2 385.299991607666, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 0, :y1 156.80000686645508, :x2 0, :y2 179.20000076293945, :width 911.6666666666666, :height 1138.3333333333333} {:x1 624.9886717796326, :y1 339.2000160217285, :x2 782.8670287132263, :y2 361.6000099182129, :width 911.6666666666666, :height 1138.3333333333333} {:x1 748.7000365257263, :y1 342.8500099182129, :x2 782.8670287132263, :y2 357.8500099182129, :width 911.6666666666666, :height 1138.3333333333333} {:x1 85.09999990463257, :y1 362.89999771118164, :x2 690.9117064476013, :y2 385.299991607666, :width 911.6666666666666, :height 1138.3333333333333}), :page 219}, :content {:text "生成器函数在遇到 yield关键字之前会正常执行。遇到这个关键字后，执行会停止，函数作用域的状态会被保留"}, :properties {:color "yellow"}} {:id #uuid "63c7e4d0-ebeb-409d-baf5-5b4dc60e55aa", :page 220, :position {:bounding {:x1 148.2000060081482, :y1 167.14999389648438, :x2 637.7591185569763, :y2 189.54995727539062, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 148.2000060081482, :y1 167.14999389648438, :x2 182.28749990463257, :y2 188.75003051757812, :width 911.6666666666666, :height 1138.3333333333333} {:x1 193.2000060081482, :y1 167.14999389648438, :x2 637.7591185569763, :y2 189.54995727539062, :width 911.6666666666666, :height 1138.3333333333333} {:x1 193.2000060081482, :y1 171.14999389648438, :x2 637.7591185569763, :y2 186.94998168945312, :width 911.6666666666666, :height 1138.3333333333333}), :page 220}, :content {:text "yield 关键字只能在生成器函数内部使用，用在其他地方会抛出错误。"}, :properties {:color "yellow"}} {:id #uuid "63c7e50d-74cd-420a-ac96-7d3c4e7d2d07", :page 220, :position {:bounding {:x1 456.23192739486694, :y1 191.10001373291016, :x2 760.7933592796326, :y2 213.50000762939453, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 456.23192739486694, :y1 191.10001373291016, :x2 760.7933592796326, :y2 213.50000762939453, :width 911.6666666666666, :height 1138.3333333333333}), :page 220}, :content {:text "出现在嵌套的非生成器函数中会抛出语法错"}, :properties {:color "yellow"}} {:id #uuid "63c7e521-748d-48db-9203-2b281fbfc354", :page 220, :position {:bounding {:x1 167.500009059906, :y1 628.75, :x2 357.4792113304138, :y2 651.1499938964844, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 167.500009059906, :y1 628.75, :x2 357.4792113304138, :y2 651.1499938964844, :width 911.6666666666666, :height 1138.3333333333333}), :page 220}, :content {:text "生成器对象作为可迭代对象"}, :properties {:color "yellow"}} {:id #uuid "63c7e5b8-68be-47bb-b0ba-718a0467ccd7", :page 221, :position {:bounding {:x1 134.3875060081482, :y1 283.1500015258789, :x2 330.2896056175232, :y2 305.5499954223633, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 134.3875060081482, :y1 283.1500015258789, :x2 204.08750295639038, :y2 305.5499954223633, :width 911.6666666666666, :height 1138.3333333333333} {:x1 215.000009059906, :y1 283.85001373291016, :x2 330.2896056175232, :y2 305.44998931884766, :width 911.6666666666666, :height 1138.3333333333333} {:x1 165.98749685287476, :y1 287.1500015258789, :x2 204.08750295639038, :y2 302.94998931884766, :width 911.6666666666666, :height 1138.3333333333333} {:x1 215.000009059906, :y1 287.85001373291016, :x2 215.187509059906, :y2 302.85001373291016, :width 911.6666666666666, :height 1138.3333333333333}), :page 221}, :content {:text "使用 yield 实现输入和输出"}, :properties {:color "yellow"}} {:id #uuid "63c7e611-e7f1-4771-9530-edd7b463a16e", :page 221, :position {:bounding {:x1 288.6160216331482, :y1 743.6500244140625, :x2 730.8320555686951, :y2 766.4000244140625, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 693.7000365257263, :y1 743.6500244140625, :x2 730.8320555686951, :y2 765.25, :width 911.6666666666666, :height 1138.3333333333333} {:x1 288.6160216331482, :y1 744, :x2 412.14220571517944, :y2 766.4000244140625, :width 911.6666666666666, :height 1138.3333333333333} {:x1 425.59999990463257, :y1 744, :x2 682.7670531272888, :y2 766.4000244140625, :width 911.6666666666666, :height 1138.3333333333333} {:x1 371.59999990463257, :y1 747.6500244140625, :x2 412.14220571517944, :y2 762.6500244140625, :width 911.6666666666666, :height 1138.3333333333333} {:x1 693.7000365257263, :y1 747.6500244140625, :x2 693.9123167991638, :y2 762.6500244140625, :width 911.6666666666666, :height 1138.3333333333333} {:x1 425.59999990463257, :y1 748, :x2 682.7670531272888, :y2 763.8000183105469, :width 911.6666666666666, :height 1138.3333333333333}), :page 221}, :content {:text "下一次调用 next()传入了\"bar\"，作为交给同一个 yield 的值"}, :properties {:color "yellow"}} {:id #uuid "63c7e6db-64b9-41cc-9e49-ca9ef98fafc4", :page 222, :position {:bounding {:x1 0, :y1 127.10000610351562, :x2 835.4045042991638, :y2 259.1999816894531, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 389.0295042991638, :y1 127.10000610351562, :x2 835.4045042991638, :y2 149.5, :width 911.6666666666666, :height 1138.3333333333333} {:x1 118.19999837875366, :y1 150.71249389648438, :x2 550.9409346580505, :y2 173.11251831054688, :width 911.6666666666666, :height 1138.3333333333333} {:x1 0, :y1 236.80001831054688, :x2 0, :y2 259.1999816894531, :width 911.6666666666666, :height 1138.3333333333333}), :page 222}, :content {:text "它会根据配置的值迭代相应次数并产生迭代的索引。初始化一个新数组可以实现这个需求，但不用数组也可以实现同样的行为"}, :properties {:color "yellow"}} {:id #uuid "63c7e706-91c4-4030-878d-947e2e5a700a", :page 222, :position {:bounding {:x1 167.500009059906, :y1 978.3500061035156, :x2 278.2896056175232, :y2 1000.75, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 167.500009059906, :y1 978.3500061035156, :x2 278.2896056175232, :y2 1000.75, :width 911.6666666666666, :height 1138.3333333333333}), :page 222}, :content {:text "产生可迭代对象"}, :properties {:color "yellow"}} {:id #uuid "63c7e773-14db-47a6-ac7b-1bf2e5c56dea", :page 222, :position {:bounding {:x1 181.94802236557007, :y1 1000.1500244140625, :x2 762.8335204124451, :y2 1022.9000244140625, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 325.49999380111694, :y1 1000.1500244140625, :x2 762.8335204124451, :y2 1021.7500305175781, :width 911.6666666666666, :height 1138.3333333333333} {:x1 181.94802236557007, :y1 1000.5000305175781, :x2 314.58751821517944, :y2 1022.9000244140625, :width 911.6666666666666, :height 1138.3333333333333} {:x1 280.49999380111694, :y1 1004.1500244140625, :x2 314.58751821517944, :y2 1019.1500244140625, :width 911.6666666666666, :height 1138.3333333333333} {:x1 325.49999380111694, :y1 1004.1500244140625, :x2 328.49999380111694, :y2 1019.1500244140625, :width 911.6666666666666, :height 1138.3333333333333}), :page 222}, :content {:text "使用星号增强 yield 的行为，让它能够迭代一个可迭代对象，从而一次产出一个值"}, :properties {:color "yellow"}} {:id #uuid "63c7e7a6-a6e5-4fc5-849c-99720e501d3e", :page 224, :position {:bounding {:x1 167.500009059906, :y1 665.4500122070312, :x2 352.08959341049194, :y2 687.8500061035156, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 167.500009059906, :y1 665.4500122070312, :x2 244.2468810081482, :y2 687.8500061035156, :width 911.6666666666666, :height 1138.3333333333333} {:x1 257.09999990463257, :y1 665.4500122070312, :x2 352.08959341049194, :y2 687.8500061035156, :width 911.6666666666666, :height 1138.3333333333333} {:x1 199.09999990463257, :y1 669.4500122070312, :x2 244.2468810081482, :y2 685.25, :width 911.6666666666666, :height 1138.3333333333333}), :page 224}, :content {:text "使用 yield*实现递归算法"}, :properties {:color "yellow"}} {:id #uuid "63c7e876-91d0-4635-97f1-e2e84e9109c2", :page 226, :position {:bounding {:x1 182.7000060081482, :y1 865.9125061035156, :x2 382.7000060081482, :y2 894.7124938964844, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 182.7000060081482, :y1 865.9125061035156, :x2 382.7000060081482, :y2 894.7124938964844, :width 911.6666666666666, :height 1138.3333333333333}), :page 226}, :content {:text "生成器作为默认迭代器"}, :properties {:color "green"}} {:id #uuid "63c7e87f-d1cd-4c56-928a-0f8438ce76fa", :page 227, :position {:bounding {:x1 149.59999990463257, :y1 386.6124954223633, :x2 289.59999990463257, :y2 415.41251373291016, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 149.59999990463257, :y1 386.6124954223633, :x2 289.59999990463257, :y2 415.41251373291016, :width 911.6666666666666, :height 1138.3333333333333}), :page 227}, :content {:text "提前终止生成器"}, :properties {:color "green"}} {:id #uuid "63c7e894-4930-47d3-9a70-4541a97302e0", :page 227, :position {:bounding {:x1 115.09999990463257, :y1 637.8500061035156, :x2 558.3550047874451, :y2 660.6000061035156, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 115.09999990463257, :y1 637.8500061035156, :x2 169.1843810081482, :y2 659.4500122070312, :width 911.6666666666666, :height 1138.3333333333333} {:x1 187.09999990463257, :y1 638.2000122070312, :x2 258.9171996116638, :y2 660.6000061035156, :width 911.6666666666666, :height 1138.3333333333333} {:x1 269.90001821517944, :y1 638.2000122070312, :x2 558.3550047874451, :y2 660.6000061035156, :width 911.6666666666666, :height 1138.3333333333333} {:x1 187.09999990463257, :y1 642.2000122070312, :x2 258.9171996116638, :y2 658, :width 911.6666666666666, :height 1138.3333333333333}), :page 227}, :content {:text "return()和 throw()方法都可以用于强制生成器进入关闭状态"}, :properties {:color "yellow"}} {:id #uuid "63c7e937-c50a-4255-935e-7f44e3e34ae0", :page 228, :position {:bounding {:x1 0, :y1 561.150016784668, :x2 834.6245665550232, :y2 611.2000045776367, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 148.2000060081482, :y1 561.150016784668, :x2 200.21718740463257, :y2 582.7500228881836, :width 911.6666666666666, :height 1138.3333333333333} {:x1 211.2000060081482, :y1 561.5000228881836, :x2 834.6245665550232, :y2 583.900016784668, :width 911.6666666666666, :height 1138.3333333333333} {:x1 211.2000060081482, :y1 565.5000228881836, :x2 834.6245665550232, :y2 581.3000106811523, :width 911.6666666666666, :height 1138.3333333333333} {:x1 118.19999837875366, :y1 585.1125106811523, :x2 198.29604482650757, :y2 607.5125045776367, :width 911.6666666666666, :height 1138.3333333333333} {:x1 0, :y1 588.8000106811523, :x2 0, :y2 611.2000045776367, :width 911.6666666666666, :height 1138.3333333333333}), :page 228}, :content {:text "throw()方法会在暂停的时候将一个提供的错误注入到生成器对象中。如果错误未被处理，生成器就会关闭："}, :properties {:color "yellow"}} {:id #uuid "63c7e9fb-fd45-41cc-a9e4-5cbeedbb9a54", :page 230, :position {:bounding {:x1 151.77578115463257, :y1 552.3500213623047, :x2 266.88036489486694, :y2 587.5000152587891, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 173.98749685287476, :y1 552.3500213623047, :x2 266.88036489486694, :y2 585.9500274658203, :width 911.6666666666666, :height 1138.3333333333333} {:x1 151.77578115463257, :y1 553.9000244140625, :x2 151.778817653656, :y2 587.5000152587891, :width 911.6666666666666, :height 1138.3333333333333}), :page 230}, :content {:text "理解对象"}, :properties {:color "green"}} {:id #uuid "63c7ea13-cfc3-4ecd-923f-93977ada5bed", :page 231, :position {:bounding {:x1 116.80000448226929, :y1 237.11250019073486, :x2 389.28019857406616, :y2 259.51249408721924, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 116.80000448226929, :y1 237.11250019073486, :x2 389.28019857406616, :y2 259.51249408721924, :width 911.6666666666666, :height 1138.3333333333333}), :page 231}, :content {:text "属性分两种：数据属性和访问器属性。"}, :properties {:color "yellow"}} {:id #uuid "63c7ea96-b811-431d-b225-f18bed68e8a4", :page 231, :position {:bounding {:x1 137.09999990463257, :y1 334.85001850128174, :x2 636.7977538108826, :y2 357.60001850128174, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 137.09999990463257, :y1 334.85001850128174, :x2 248.320321559906, :y2 356.44999408721924, :width 911.6666666666666, :height 1138.3333333333333} {:x1 281.09999990463257, :y1 335.19999408721924, :x2 636.7977538108826, :y2 357.60001850128174, :width 911.6666666666666, :height 1138.3333333333333} {:x1 281.09999990463257, :y1 339.19999408721924, :x2 516.6458373069763, :y2 355.0000123977661, :width 911.6666666666666, :height 1138.3333333333333}), :page 231}, :content {:text "[[Configurable]]：表示属性是否可以通过 delete 删除并重新定义"}, :properties {:color "yellow"}} {:id #uuid "63c7eaa5-2e31-49da-a8ca-caac905e8d94", :page 231, :position {:bounding {:x1 137.09999990463257, :y1 405.6500062942505, :x2 560.6175169944763, :y2 428.4000062942505, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 137.09999990463257, :y1 405.6500062942505, :x2 243.187509059906, :y2 427.2500123977661, :width 911.6666666666666, :height 1138.3333333333333} {:x1 492.99999380111694, :y1 405.6500062942505, :x2 560.6175169944763, :y2 427.2500123977661, :width 911.6666666666666, :height 1138.3333333333333} {:x1 263.09999990463257, :y1 406.0000123977661, :x2 477.0109496116638, :y2 428.4000062942505, :width 911.6666666666666, :height 1138.3333333333333} {:x1 492.99999380111694, :y1 409.6500062942505, :x2 493.18749380111694, :y2 424.6500062942505, :width 911.6666666666666, :height 1138.3333333333333} {:x1 263.09999990463257, :y1 410.0000123977661, :x2 477.0109496116638, :y2 425.80000019073486, :width 911.6666666666666, :height 1138.3333333333333}), :page 231}, :content {:text "[[Enumerable]]：表示属性是否可以通过 for-in 循环返回"}, :properties {:color "yellow"}} {:id #uuid "63c7eaf8-21f1-4377-864a-1cd308187ba9", :page 231, :position {:bounding {:x1 142.20469045639038, :y1 452.94999408721924, :x2 467.3337950706482, :y2 475.69999408721924, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 142.20469045639038, :y1 452.94999408721924, :x2 216.7078185081482, :y2 474.55000019073486, :width 911.6666666666666, :height 1138.3333333333333} {:x1 245.09999990463257, :y1 453.30000019073486, :x2 467.3337950706482, :y2 475.69999408721924, :width 911.6666666666666, :height 1138.3333333333333}), :page 231}, :content {:text "[Writable]]：表示属性的值是否可以被修改"}, :properties {:color "yellow"}} {:id #uuid "63c7eb04-a564-4e20-bb2d-7d73734609ef", :page 231, :position {:bounding {:x1 137.09999990463257, :y1 500.15001678466797, :x2 363.9821105003357, :y2 522.900016784668, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 137.09999990463257, :y1 500.15001678466797, :x2 196.23281240463257, :y2 521.7499923706055, :width 911.6666666666666, :height 1138.3333333333333} {:x1 218.29999685287476, :y1 500.49999237060547, :x2 363.9821105003357, :y2 522.900016784668, :width 911.6666666666666, :height 1138.3333333333333}), :page 231}, :content {:text "[[Value]]：包含属性实际的值"}, :properties {:color "yellow"}} {:id #uuid "63c7eb9f-04db-44ac-ba0f-ee6c502b8071", :page 232, :position {:bounding {:x1 165.91921377182007, :y1 262.15000915527344, :x2 703.4121947288513, :y2 284.90000915527344, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 342.49999380111694, :y1 262.15000915527344, :x2 434.72667837142944, :y2 284.5500030517578, :width 911.6666666666666, :height 1138.3333333333333} {:x1 165.91921377182007, :y1 262.50001525878906, :x2 322.9532103538513, :y2 284.90000915527344, :width 911.6666666666666, :height 1138.3333333333333} {:x1 446.90001821517944, :y1 262.50001525878906, :x2 703.4121947288513, :y2 284.90000915527344, :width 911.6666666666666, :height 1138.3333333333333} {:x1 234.40000295639038, :y1 266.15000915527344, :x2 322.9532103538513, :y2 281.15000915527344, :width 911.6666666666666, :height 1138.3333333333333} {:x1 342.49999380111694, :y1 266.15000915527344, :x2 434.72667837142944, :y2 281.15000915527344, :width 911.6666666666666, :height 1138.3333333333333}), :page 232}, :content {:text "个例子把 configurable 设置为 false，意味着这个属性不能从对象上删除"}, :properties {:color "yellow"}} {:id #uuid "63c7ed25-8d22-4213-baa9-0744131e61bd", :page 232, :position {:bounding {:x1 424.6667113304138, :y1 689.5125122070312, :x2 795.6725096702576, :y2 711.9125061035156, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 424.6667113304138, :y1 689.5125122070312, :x2 795.6725096702576, :y2 711.9125061035156, :width 911.6666666666666, :height 1138.3333333333333} {:x1 533.1624999046326, :y1 692.4500122070312, :x2 739.9135985374451, :y2 708.2500305175781, :width 911.6666666666666, :height 1138.3333333333333}), :page 232}, :content {:text "包含一个获取（getter）函数和一个设置（setter）函数"}, :properties {:color "yellow"}} {:id #uuid "63c7ed30-998c-4ccb-93bc-555709003ddd", :page 232, :position {:bounding {:x1 0, :y1 748.8000183105469, :x2 830.1802000999451, :y2 830.0125122070312, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 0, :y1 748.8000183105469, :x2 0, :y2 771.2000122070312, :width 911.6666666666666, :height 1138.3333333333333} {:x1 170.2000060081482, :y1 783.6500244140625, :x2 281.42031240463257, :y2 805.2500305175781, :width 911.6666666666666, :height 1138.3333333333333} {:x1 314.2000060081482, :y1 784.0000305175781, :x2 830.1802000999451, :y2 806.4000244140625, :width 911.6666666666666, :height 1138.3333333333333} {:x1 314.2000060081482, :y1 788.0000305175781, :x2 830.1802000999451, :y2 803.8000183105469, :width 911.6666666666666, :height 1138.3333333333333} {:x1 170.2000060081482, :y1 807.6125183105469, :x2 429.6343321800232, :y2 830.0125122070312, :width 911.6666666666666, :height 1138.3333333333333}), :page 232}, :content {:text "[[Configurable]]：表示属性是否可以通过 delete 删除并重新定义，是否可以修改它的特性，以及是否可以把它改为数据属性"}, :properties {:color "yellow"}} {:id #uuid "63c7ed38-2b4c-4ee7-b58b-86e749a205fc", :page 232, :position {:bounding {:x1 170.2000060081482, :y1 854.5500183105469, :x2 593.7175536155701, :y2 877.3000183105469, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 170.2000060081482, :y1 854.5500183105469, :x2 276.28749990463257, :y2 876.1500091552734, :width 911.6666666666666, :height 1138.3333333333333} {:x1 526.0999999046326, :y1 854.5500183105469, :x2 593.7175536155701, :y2 876.1500091552734, :width 911.6666666666666, :height 1138.3333333333333} {:x1 296.2000060081482, :y1 854.9000091552734, :x2 510.1109251976013, :y2 877.3000183105469, :width 911.6666666666666, :height 1138.3333333333333} {:x1 526.0999999046326, :y1 858.5500183105469, :x2 526.2874999046326, :y2 873.5500183105469, :width 911.6666666666666, :height 1138.3333333333333} {:x1 296.2000060081482, :y1 858.9000091552734, :x2 510.1109251976013, :y2 874.7000122070312, :width 911.6666666666666, :height 1138.3333333333333}), :page 232}, :content {:text "[[Enumerable]]：表示属性是否可以通过 for-in 循环返回"}, :properties {:color "yellow"}} {:id #uuid "63c7ed42-9895-4d6b-b124-f6776353c15e", :page 232, :position {:bounding {:x1 170.2000060081482, :y1 901.7500152587891, :x2 635.0000243186951, :y2 924.5000152587891, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 170.2000060081482, :y1 901.7500152587891, :x2 214.97499990463257, :y2 923.3500213623047, :width 911.6666666666666, :height 1138.3333333333333} {:x1 233.2000060081482, :y1 902.1000213623047, :x2 635.0000243186951, :y2 924.5000152587891, :width 911.6666666666666, :height 1138.3333333333333} {:x1 233.2000060081482, :y1 906.1000213623047, :x2 610.1763548851013, :y2 921.9000091552734, :width 911.6666666666666, :height 1138.3333333333333}), :page 232}, :content {:text "[[Get]]：获取函数，在读取属性时调用。默认值为 undefined。"}, :properties {:color "yellow"}} {:id #uuid "63c7ed4d-f416-427d-8524-e64f3cb70279", :page 232, :position {:bounding {:x1 170.2000060081482, :y1 925.4500122070312, :x2 635.0000243186951, :y2 948.2000122070312, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 170.2000060081482, :y1 925.4500122070312, :x2 213.56874990463257, :y2 947.0500183105469, :width 911.6666666666666, :height 1138.3333333333333} {:x1 233.2000060081482, :y1 925.8000183105469, :x2 635.0000243186951, :y2 948.2000122070312, :width 911.6666666666666, :height 1138.3333333333333} {:x1 233.2000060081482, :y1 929.8000183105469, :x2 610.1763548851013, :y2 945.6000213623047, :width 911.6666666666666, :height 1138.3333333333333}), :page 232}, :content {:text "[[Set]]：设置函数，在写入属性时调用。默认值为 undefined。"}, :properties {:color "yellow"}} {:id #uuid "63c7eda1-1209-4c0f-bec2-74970771d713", :page 233, :position {:bounding {:x1 0, :y1 236.8000030517578, :x2 795.8881468772888, :y2 419.3999786376953, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 0, :y1 236.8000030517578, :x2 0, :y2 259.1999969482422, :width 911.6666666666666, :height 1138.3333333333333} {:x1 574.5999999046326, :y1 372.9500274658203, :x2 795.8881468772888, :y2 394.5500030517578, :width 911.6666666666666, :height 1138.3333333333333} {:x1 619.5999999046326, :y1 377.3000030517578, :x2 795.8881468772888, :y2 393.09999084472656, :width 911.6666666666666, :height 1138.3333333333333} {:x1 85.09999990463257, :y1 397.00001525878906, :x2 357.2303099632263, :y2 419.3999786376953, :width 911.6666666666666, :height 1138.3333333333333}), :page 233}, :content {:text "year_中的下划线常用来表示该属性并不希望在对象方法的外部被访问"}, :properties {:color "yellow"}} {:id #uuid "63c7ee31-e7fe-4138-87f5-9dff19f27c2d", :page 233, :position {:bounding {:x1 149.59999990463257, :y1 709.8125305175781, :x2 269.59999990463257, :y2 738.6125183105469, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 149.59999990463257, :y1 709.8125305175781, :x2 269.59999990463257, :y2 738.6125183105469, :width 911.6666666666666, :height 1138.3333333333333}), :page 233}, :content {:text "定义多个属性"}, :properties {:color "green"}} {:id #uuid "63c7eea0-1bee-482b-979d-2b2343ef723d", :page 233, :position {:bounding {:x1 0, :y1 284.8000030517578, :x2 798.1477904319763, :y2 490.2124786376953, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 0, :y1 284.8000030517578, :x2 0, :y2 307.1999969482422, :width 911.6666666666666, :height 1138.3333333333333} {:x1 445.99450063705444, :y1 444.2000274658203, :x2 798.1477904319763, :y2 466.59999084472656, :width 911.6666666666666, :height 1138.3333333333333} {:x1 85.08750295639038, :y1 467.81251525878906, :x2 293.47167348861694, :y2 490.2124786376953, :width 911.6666666666666, :height 1138.3333333333333}), :page 233}, :content {:text "这是访问器属性的典型使用场景，即设置一个属性值会导致一些其他变化发生。"}, :properties {:color "yellow"}} {:id #uuid "63c7ef09-5664-46cc-a5cb-ce5057241c5e", :page 234, :position {:bounding {:x1 182.7000060081482, :y1 362.7125244140625, :x2 322.7000060081482, :y2 391.51251220703125, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 182.7000060081482, :y1 362.7125244140625, :x2 322.7000060081482, :y2 391.51251220703125, :width 911.6666666666666, :height 1138.3333333333333}), :page 234}, :content {:text "读取属性的特性"}, :properties {:color "green"}} {:id #uuid "63c7ef54-bbd4-438b-a5a3-35ca1cb49dfd", :page 234, :position {:bounding {:x1 149.90000295639038, :y1 403.70001220703125, :x2 738.9519896507263, :y2 426.1000061035156, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 149.90000295639038, :y1 403.70001220703125, :x2 435.74218130111694, :y2 426.1000061035156, :width 911.6666666666666, :height 1138.3333333333333} {:x1 482.49999380111694, :y1 403.70001220703125, :x2 738.9519896507263, :y2 426.1000061035156, :width 911.6666666666666, :height 1138.3333333333333} {:x1 185.500009059906, :y1 407.3500061035156, :x2 435.74218130111694, :y2 422.3500061035156, :width 911.6666666666666, :height 1138.3333333333333}), :page 234}, :content {:text "使用 Object.getOwnPropertyDescriptor()方法可以取得指定属性的属性描述符"}, :properties {:color "yellow"}} {:id #uuid "63c7efc4-843d-47ad-9bb4-de91278230dd", :page 235, :position {:bounding {:x1 297.7000060081482, :y1 126.75, :x2 667.8960814476013, :y2 149.5, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 297.7000060081482, :y1 126.75, :x2 555.0335936546326, :y2 148.3499755859375, :width 911.6666666666666, :height 1138.3333333333333} {:x1 603.8000121116638, :y1 127.0999755859375, :x2 667.8960814476013, :y2 149.5, :width 911.6666666666666, :height 1138.3333333333333}), :page 235}, :content {:text "Object.getOwnPropertyDescriptors()静态方法"}, :properties {:color "yellow"}} {:id #uuid "63c7f060-3b20-4c4a-a4c6-dea47a34148c", :page 235, :position {:bounding {:x1 149.59999990463257, :y1 937.0125122070312, :x2 229.59999990463257, :y2 965.8125, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 149.59999990463257, :y1 937.0125122070312, :x2 229.59999990463257, :y2 965.8125, :width 911.6666666666666, :height 1138.3333333333333}), :page 235}, :content {:text "合并对象"}, :properties {:color "green"}} {:id #uuid "63c7f070-b079-4030-a514-9f3a13fefff9", :page 235, :position {:bounding {:x1 0, :y1 732.800036907196, :x2 798.4981932640076, :y2 1024.1000366210938, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 0, :y1 732.800036907196, :x2 0, :y2 755.2000365257263, :width 911.6666666666666, :height 1138.3333333333333} {:x1 653.4067015647888, :y1 978.0000457763672, :x2 798.4981932640076, :y2 1000.4000549316406, :width 911.6666666666666, :height 1138.3333333333333} {:x1 85.08750295639038, :y1 1001.7000427246094, :x2 311.65844106674194, :y2 1024.1000366210938, :width 911.6666666666666, :height 1138.3333333333333}), :page 235}, :content {:text "就是把源对象所有的本地属性一起复制到目标对象上"}, :properties {:color "yellow"}} {:id #uuid "63c7f097-3717-46a2-848c-1db9c31c2a5d", :page 236, :position {:bounding {:x1 149.90000295639038, :y1 126.04999732971191, :x2 576.7049193382263, :y2 149.50000953674316, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 149.90000295639038, :y1 126.04999732971191, :x2 515.3804564476013, :y2 148.45000648498535, :width 911.6666666666666, :height 1138.3333333333333} {:x1 545.0000243186951, :y1 127.10000038146973, :x2 576.7049193382263, :y2 149.50000953674316, :width 911.6666666666666, :height 1138.3333333333333} {:x1 244.500009059906, :y1 130.0499973297119, :x2 515.3804564476013, :y2 145.85000038146973, :width 911.6666666666666, :height 1138.3333333333333}), :page 236}, :content {:text "ECMAScript 6 专门为合并对象提供了 Object.assign()方法"}, :properties {:color "yellow"}} {:id #uuid "63c7f0bb-53b5-48bc-89e2-02106f01e8c3", :page 237, :position {:bounding {:x1 0, :y1 12.800003051757812, :x2 800.6220335960388, :y2 173.1125030517578, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 0, :y1 12.800003051757812, :x2 0, :y2 35.19999694824219, :width 911.6666666666666, :height 1138.3333333333333} {:x1 115.09999990463257, :y1 126.75001525878906, :x2 220.49843740463257, :y2 148.34999084472656, :width 911.6666666666666, :height 1138.3333333333333} {:x1 250.30001211166382, :y1 127.09999084472656, :x2 800.6220335960388, :y2 149.50001525878906, :width 911.6666666666666, :height 1138.3333333333333} {:x1 250.30001211166382, :y1 131.09999084472656, :x2 800.6220335960388, :y2 146.90000915527344, :width 911.6666666666666, :height 1138.3333333333333} {:x1 85.08750295639038, :y1 150.71250915527344, :x2 244.51162099838257, :y2 173.1125030517578, :width 911.6666666666666, :height 1138.3333333333333}), :page 237}, :content {:text "Object.assign()实际上对每个源对象执行的是浅复制。如果多个源对象都有相同的属性，则使用最后一个复制的值。"}, :properties {:color "yellow"}} {:id #uuid "63c7f19f-3c83-4260-b87d-a51ac2ed6ae7", :page 237, :position {:bounding {:x1 0, :y1 492.8000068664551, :x2 776.6080565452576, :y2 842.9125061035156, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 0, :y1 492.8000068664551, :x2 0, :y2 515.2000045776367, :width 911.6666666666666, :height 1138.3333333333333} {:x1 116.80000448226929, :y1 796.9000244140625, :x2 636.4804320335388, :y2 819.3000183105469, :width 911.6666666666666, :height 1138.3333333333333} {:x1 666.2000365257263, :y1 796.9000244140625, :x2 776.6080565452576, :y2 819.3000183105469, :width 911.6666666666666, :height 1138.3333333333333} {:x1 531.0000243186951, :y1 800.5500183105469, :x2 636.4804320335388, :y2 815.5500183105469, :width 911.6666666666666, :height 1138.3333333333333} {:x1 666.2000365257263, :y1 800.9000244140625, :x2 776.6080565452576, :y2 816.7000122070312, :width 911.6666666666666, :height 1138.3333333333333} {:x1 85.08750295639038, :y1 820.5125122070312, :x2 582.0479521751404, :y2 842.9125061035156, :width 911.6666666666666, :height 1138.3333333333333}), :page 237}, :content {:text "如果赋值期间出错，则操作会中止并退出，同时抛出错误。Object.assign()没有“回滚”之前赋值的概念，因此它是一个尽力而为、可能只会完成部分复制的方法。"}, :properties {:color "yellow"}} {:id #uuid "63c7f1ab-76aa-4a71-acc7-54fee3880cc6", :page 238, :position {:bounding {:x1 182.7000060081482, :y1 307.7124938964844, :x2 362.7000060081482, :y2 336.5124816894531, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 182.7000060081482, :y1 307.7124938964844, :x2 362.7000060081482, :y2 336.5124816894531, :width 911.6666666666666, :height 1138.3333333333333}), :page 238}, :content {:text "对象标识及相等判定"}, :properties {:color "green"}} {:id #uuid "63c7f2c4-8707-4222-82eb-c917cad7ea7c", :page 238, :position {:bounding {:x1 463.3000121116638, :y1 590.8500213623047, :x2 716.2889037132263, :y2 613.6000213623047, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 463.3000121116638, :y1 590.8500213623047, :x2 535.3843626976013, :y2 612.4500274658203, :width 911.6666666666666, :height 1138.3333333333333} {:x1 562.3000121116638, :y1 591.2000274658203, :x2 716.2889037132263, :y2 613.6000213623047, :width 911.6666666666666, :height 1138.3333333333333} {:x1 562.3000121116638, :y1 595.2000274658203, :x2 682.3719115257263, :y2 611.0000152587891, :width 911.6666666666666, :height 1138.3333333333333}), :page 238}, :content {:text "Object.is()，这个方法与===很像"}, :properties {:color "yellow"}} {:id #uuid "63c7f32e-e1fa-43bd-81e0-f0eda9e17bc7", :page 238, :position {:bounding {:x1 149.90000295639038, :y1 825.7000122070312, :x2 502.4762969017029, :y2 848.1000061035156, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 149.90000295639038, :y1 825.7000122070312, :x2 502.4762969017029, :y2 848.1000061035156, :width 911.6666666666666, :height 1138.3333333333333}), :page 238}, :content {:text "要检查超过两个值，递归地利用相等性传递即可："}, :properties {:color "yellow"}} {:id #uuid "63c7f335-22de-4d85-9320-4f570779a814", :page 238, :position {:bounding {:x1 182.7000060081482, :y1 939.2125244140625, :x2 322.7000060081482, :y2 968.0125122070312, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 182.7000060081482, :y1 939.2125244140625, :x2 322.7000060081482, :y2 968.0125122070312, :width 911.6666666666666, :height 1138.3333333333333}), :page 238}, :content {:text "增强的对象语法"}, :properties {:color "green"}} {:id #uuid "63c7f409-a9d3-499c-8299-45a88003fe83", :page 239, :position {:bounding {:x1 134.40000295639038, :y1 208.95001220703125, :x2 213.4948058128357, :y2 231.35000610351562, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 134.40000295639038, :y1 208.95001220703125, :x2 213.4948058128357, :y2 231.35000610351562, :width 911.6666666666666, :height 1138.3333333333333}), :page 239}, :content {:text "属性值简写"}, :properties {:color "yellow"}} {:id #uuid "63c7f430-3f34-4695-8145-913c60026db8", :page 239, :position {:bounding {:x1 129.98749685287476, :y1 946.7000427246094, :x2 213.4948058128357, :y2 969.1000366210938, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 129.98749685287476, :y1 946.7000427246094, :x2 213.4948058128357, :y2 969.1000366210938, :width 911.6666666666666, :height 1138.3333333333333}), :page 239}, :content {:text " 可计算属性"}, :properties {:color "yellow"}} {:id #uuid "63c7f437-8de1-4bee-8a9f-449473c0543e", :page 240, :position {:bounding {:x1 167.500009059906, :y1 879.9500427246094, :x2 246.59479665756226, :y2 902.3500366210938, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 167.500009059906, :y1 879.9500427246094, :x2 246.59479665756226, :y2 902.3500366210938, :width 911.6666666666666, :height 1138.3333333333333}), :page 240}, :content {:text "简写方法名"}, :properties {:color "yellow"}} {:id #uuid "63c7f462-70cc-45e5-acf0-cf6c284b761c", :page 239, :position {:bounding {:x1 213.33283376693726, :y1 991.4000244140625, :x2 549.9439787864685, :y2 1013.8000183105469, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 213.33283376693726, :y1 991.4000244140625, :x2 549.9439787864685, :y2 1013.8000183105469, :width 911.6666666666666, :height 1138.3333333333333}), :page 239}, :content {:text "句话说，不能在对象字面量中直接动态命名属性"}, :properties {:color "yellow"}} {:id #uuid "63c7f4c0-8b06-4a2f-843d-ea7a9d6cbc3a", :page 240, :position {:bounding {:x1 0, :y1 262.5, :x2 835.4045042991638, :y2 355.20001220703125, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 580.3330931663513, :y1 262.5, :x2 835.4045042991638, :y2 284.9000244140625, :width 911.6666666666666, :height 1138.3333333333333} {:x1 118.19999837875366, :y1 286.11248779296875, :x2 462.88817739486694, :y2 308.51251220703125, :width 911.6666666666666, :height 1138.3333333333333} {:x1 118.19999837875366, :y1 290.11248779296875, :x2 254.53749990463257, :y2 305.91253662109375, :width 911.6666666666666, :height 1138.3333333333333} {:x1 0, :y1 332.79998779296875, :x2 0, :y2 355.20001220703125, :width 911.6666666666666, :height 1138.3333333333333}), :page 240}, :content {:text "中括号包围的对象属性键告诉运行时将其作为 JavaScript 表达式而不是字符串来求值："}, :properties {:color "yellow"}} {:id #uuid "63c7f4d1-2bf3-491e-b0fa-e5ea9508efb3", :page 241, :position {:bounding {:x1 130.73789358139038, :y1 847.5125122070312, :x2 229.59999990463257, :y2 877.6499938964844, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 149.59999990463257, :y1 847.5125122070312, :x2 229.59999990463257, :y2 876.3125, :width 911.6666666666666, :height 1138.3333333333333} {:x1 130.73789358139038, :y1 848.8500061035156, :x2 130.73789358139038, :y2 877.6499938964844, :width 911.6666666666666, :height 1138.3333333333333}), :page 241}, :content {:text "对象解构"}, :properties {:color "green"}} {:id #uuid "63c7f50a-5a57-4e0d-bf87-700a14aa05f0", :page 245, :position {:bounding {:x1 118.67578268051147, :y1 526.5500183105469, :x2 233.78034353256226, :y2 561.7000122070312, :width 911.6666666666666, :height 1138.3333333333333}, :rects ({:x1 140.8875060081482, :y1 526.5500183105469, :x2 233.78034353256226, :y2 560.1500091552734, :width 911.6666666666666, :height 1138.3333333333333} {:x1 118.67578268051147, :y1 528.1000213623047, :x2 118.67881155014038, :y2 561.7000122070312, :width 911.6666666666666, :height 1138.3333333333333}), :page 245}, :content {:text "创建对象"}, :properties {:color "green"}} {:id #uuid "63c7f53b-719b-4b73-8bc0-5da06313733e", :page 241, :position {:bounding {:x1 374.88750606775284, :y1 901.5625152587891, :x2 775.7452636361122, :y2 924.7625122070312, :width 924.9999999999999, :height 1154.981718464351}, :rects ({:x1 374.88750606775284, :y1 901.5625152587891, :x2 775.7452636361122, :y2 924.7625122070312, :width 924.9999999999999, :height 1154.981718464351}), :page 241}, :content {:text "可以在一条语句中使用嵌套数据实现一个或多个赋值操作"}, :properties {:color "yellow"}} {:id #uuid "63c7f5e3-008b-4a22-b9ea-3d98b960ef18", :page 242, :position {:bounding {:x1 152.08750301599503, :y1 432.1875190734863, :x2 789.733987390995, :y2 455.38750076293945, :width 924.9999999999999, :height 1154.981718464351}, :rects ({:x1 152.08750301599503, :y1 432.1875190734863, :x2 789.733987390995, :y2 455.38750076293945, :width 924.9999999999999, :height 1154.981718464351}), :page 242}, :content {:text "使用解构，可以在一个类似对象字面量的结构中，声明多个变量，同时执行多个赋值操作。"}, :properties {:color "yellow"}} {:id #uuid "63c7f6ad-c781-4e06-8d88-82d50aa5f359", :page 242, :position {:bounding {:x1 0, :y1 732.8000240325928, :x2 837.1137939095497, :y2 890.9750213623047, :width 924.9999999999999, :height 1154.981718464351}, :rects ({:x1 0, :y1 732.8000240325928, :x2 0, :y2 755.200023651123, :width 924.9999999999999, :height 1154.981718464351} {:x1 153.0999999642372, :y1 843.7250213623047, :x2 837.1137939095497, :y2 866.9250335693359, :width 924.9999999999999, :height 1154.981718464351} {:x1 119.91249996423721, :y1 867.7750244140625, :x2 152.58883053064346, :y2 890.9750213623047, :width 924.9999999999999, :height 1154.981718464351}), :page 242}, :content {:text "也可以在解构赋值的同时定义默认值，这适用于前面刚提到的引用的属性不存在于源对象中的情况"}, :properties {:color "yellow"}}], :extra {:page 245}}